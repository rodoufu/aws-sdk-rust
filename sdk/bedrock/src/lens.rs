// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn reflens_list_custom_models_output_output_next_token(
    input: &crate::operation::list_custom_models::ListCustomModelsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_evaluation_jobs_output_output_next_token(
    input: &crate::operation::list_evaluation_jobs::ListEvaluationJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_guardrails_output_output_next_token(
    input: &crate::operation::list_guardrails::ListGuardrailsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_model_customization_jobs_output_output_next_token(
    input: &crate::operation::list_model_customization_jobs::ListModelCustomizationJobsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn reflens_list_provisioned_model_throughputs_output_output_next_token(
    input: &crate::operation::list_provisioned_model_throughputs::ListProvisionedModelThroughputsOutput,
) -> ::std::option::Option<&::std::string::String> {
    let input = match &input.next_token {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_custom_models_output_output_model_summaries(
    input: crate::operation::list_custom_models::ListCustomModelsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::CustomModelSummary>> {
    let input = match input.model_summaries {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_evaluation_jobs_output_output_job_summaries(
    input: crate::operation::list_evaluation_jobs::ListEvaluationJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::EvaluationSummary>> {
    let input = match input.job_summaries {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_guardrails_output_output_guardrails(
    input: crate::operation::list_guardrails::ListGuardrailsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::GuardrailSummary>> {
    let input = input.guardrails;
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_model_customization_jobs_output_output_model_customization_job_summaries(
    input: crate::operation::list_model_customization_jobs::ListModelCustomizationJobsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ModelCustomizationJobSummary>> {
    let input = match input.model_customization_job_summaries {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}

pub(crate) fn lens_list_provisioned_model_throughputs_output_output_provisioned_model_summaries(
    input: crate::operation::list_provisioned_model_throughputs::ListProvisionedModelThroughputsOutput,
) -> ::std::option::Option<::std::vec::Vec<crate::types::ProvisionedModelSummary>> {
    let input = match input.provisioned_model_summaries {
        ::std::option::Option::None => return ::std::option::Option::None,
        ::std::option::Option::Some(t) => t,
    };
    ::std::option::Option::Some(input)
}
