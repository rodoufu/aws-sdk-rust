// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::create_evaluation_job::_create_evaluation_job_output::CreateEvaluationJobOutputBuilder;

pub use crate::operation::create_evaluation_job::_create_evaluation_job_input::CreateEvaluationJobInputBuilder;

impl crate::operation::create_evaluation_job::builders::CreateEvaluationJobInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::create_evaluation_job::CreateEvaluationJobOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_evaluation_job::CreateEvaluationJobError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.create_evaluation_job();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `CreateEvaluationJob`.
///
/// <p>API operation for creating and managing Amazon Bedrock automatic model evaluation jobs and model evaluation jobs that use human workers. To learn more about the requirements for creating a model evaluation job see, <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-evaluation.html">Model evaluations</a>.</p>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct CreateEvaluationJobFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::create_evaluation_job::builders::CreateEvaluationJobInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::create_evaluation_job::CreateEvaluationJobOutput,
        crate::operation::create_evaluation_job::CreateEvaluationJobError,
    > for CreateEvaluationJobFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::create_evaluation_job::CreateEvaluationJobOutput,
            crate::operation::create_evaluation_job::CreateEvaluationJobError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl CreateEvaluationJobFluentBuilder {
    /// Creates a new `CreateEvaluationJob`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the CreateEvaluationJob as a reference.
    pub fn as_input(&self) -> &crate::operation::create_evaluation_job::builders::CreateEvaluationJobInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::create_evaluation_job::CreateEvaluationJobOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::create_evaluation_job::CreateEvaluationJobError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::create_evaluation_job::CreateEvaluationJob::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::create_evaluation_job::CreateEvaluationJob::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::create_evaluation_job::CreateEvaluationJobOutput,
        crate::operation::create_evaluation_job::CreateEvaluationJobError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// <p>The name of the model evaluation job. Model evaluation job names must unique with your AWS account, and your account's AWS region.</p>
    pub fn job_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.job_name(input.into());
        self
    }
    /// <p>The name of the model evaluation job. Model evaluation job names must unique with your AWS account, and your account's AWS region.</p>
    pub fn set_job_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_job_name(input);
        self
    }
    /// <p>The name of the model evaluation job. Model evaluation job names must unique with your AWS account, and your account's AWS region.</p>
    pub fn get_job_name(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_job_name()
    }
    /// <p>A description of the model evaluation job.</p>
    pub fn job_description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.job_description(input.into());
        self
    }
    /// <p>A description of the model evaluation job.</p>
    pub fn set_job_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_job_description(input);
        self
    }
    /// <p>A description of the model evaluation job.</p>
    pub fn get_job_description(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_job_description()
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.client_request_token(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_client_request_token(input);
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than one time. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a>.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_client_request_token()
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM service role that Amazon Bedrock can assume to perform tasks on your behalf. The service role must have Amazon Bedrock as the service principal, and provide access to any Amazon S3 buckets specified in the <code>EvaluationConfig</code> object. To pass this role to Amazon Bedrock, the caller of this API must have the <code>iam:PassRole</code> permission. To learn more about the required permissions, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-evaluation-security.html">Required permissions</a>.</p>
    pub fn role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.role_arn(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM service role that Amazon Bedrock can assume to perform tasks on your behalf. The service role must have Amazon Bedrock as the service principal, and provide access to any Amazon S3 buckets specified in the <code>EvaluationConfig</code> object. To pass this role to Amazon Bedrock, the caller of this API must have the <code>iam:PassRole</code> permission. To learn more about the required permissions, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-evaluation-security.html">Required permissions</a>.</p>
    pub fn set_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_role_arn(input);
        self
    }
    /// <p>The Amazon Resource Name (ARN) of an IAM service role that Amazon Bedrock can assume to perform tasks on your behalf. The service role must have Amazon Bedrock as the service principal, and provide access to any Amazon S3 buckets specified in the <code>EvaluationConfig</code> object. To pass this role to Amazon Bedrock, the caller of this API must have the <code>iam:PassRole</code> permission. To learn more about the required permissions, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/model-evaluation-security.html">Required permissions</a>.</p>
    pub fn get_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_role_arn()
    }
    /// <p>Specify your customer managed key ARN that will be used to encrypt your model evaluation job.</p>
    pub fn customer_encryption_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.customer_encryption_key_id(input.into());
        self
    }
    /// <p>Specify your customer managed key ARN that will be used to encrypt your model evaluation job.</p>
    pub fn set_customer_encryption_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_customer_encryption_key_id(input);
        self
    }
    /// <p>Specify your customer managed key ARN that will be used to encrypt your model evaluation job.</p>
    pub fn get_customer_encryption_key_id(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_customer_encryption_key_id()
    }
    ///
    /// Appends an item to `jobTags`.
    ///
    /// To override the contents of this collection use [`set_job_tags`](Self::set_job_tags).
    ///
    /// <p>Tags to attach to the model evaluation job.</p>
    pub fn job_tags(mut self, input: crate::types::Tag) -> Self {
        self.inner = self.inner.job_tags(input);
        self
    }
    /// <p>Tags to attach to the model evaluation job.</p>
    pub fn set_job_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.inner = self.inner.set_job_tags(input);
        self
    }
    /// <p>Tags to attach to the model evaluation job.</p>
    pub fn get_job_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        self.inner.get_job_tags()
    }
    /// <p>Specifies whether the model evaluation job is automatic or uses human worker.</p>
    pub fn evaluation_config(mut self, input: crate::types::EvaluationConfig) -> Self {
        self.inner = self.inner.evaluation_config(input);
        self
    }
    /// <p>Specifies whether the model evaluation job is automatic or uses human worker.</p>
    pub fn set_evaluation_config(mut self, input: ::std::option::Option<crate::types::EvaluationConfig>) -> Self {
        self.inner = self.inner.set_evaluation_config(input);
        self
    }
    /// <p>Specifies whether the model evaluation job is automatic or uses human worker.</p>
    pub fn get_evaluation_config(&self) -> &::std::option::Option<crate::types::EvaluationConfig> {
        self.inner.get_evaluation_config()
    }
    /// <p>Specify the models you want to use in your model evaluation job. Automatic model evaluation jobs support a single model, and model evaluation job that use human workers support two models.</p>
    pub fn inference_config(mut self, input: crate::types::EvaluationInferenceConfig) -> Self {
        self.inner = self.inner.inference_config(input);
        self
    }
    /// <p>Specify the models you want to use in your model evaluation job. Automatic model evaluation jobs support a single model, and model evaluation job that use human workers support two models.</p>
    pub fn set_inference_config(mut self, input: ::std::option::Option<crate::types::EvaluationInferenceConfig>) -> Self {
        self.inner = self.inner.set_inference_config(input);
        self
    }
    /// <p>Specify the models you want to use in your model evaluation job. Automatic model evaluation jobs support a single model, and model evaluation job that use human workers support two models.</p>
    pub fn get_inference_config(&self) -> &::std::option::Option<crate::types::EvaluationInferenceConfig> {
        self.inner.get_inference_config()
    }
    /// <p>An object that defines where the results of model evaluation job will be saved in Amazon S3.</p>
    pub fn output_data_config(mut self, input: crate::types::EvaluationOutputDataConfig) -> Self {
        self.inner = self.inner.output_data_config(input);
        self
    }
    /// <p>An object that defines where the results of model evaluation job will be saved in Amazon S3.</p>
    pub fn set_output_data_config(mut self, input: ::std::option::Option<crate::types::EvaluationOutputDataConfig>) -> Self {
        self.inner = self.inner.set_output_data_config(input);
        self
    }
    /// <p>An object that defines where the results of model evaluation job will be saved in Amazon S3.</p>
    pub fn get_output_data_config(&self) -> &::std::option::Option<crate::types::EvaluationOutputDataConfig> {
        self.inner.get_output_data_config()
    }
}
