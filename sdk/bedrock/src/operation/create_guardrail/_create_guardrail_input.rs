// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct CreateGuardrailInput {
    /// <p>The name to give the guardrail.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the guardrail.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The topic policies to configure for the guardrail.</p>
    pub topic_policy_config: ::std::option::Option<crate::types::GuardrailTopicPolicyConfig>,
    /// <p>The content filter policies to configure for the guardrail.</p>
    pub content_policy_config: ::std::option::Option<crate::types::GuardrailContentPolicyConfig>,
    /// <p>The word policy you configure for the guardrail.</p>
    pub word_policy_config: ::std::option::Option<crate::types::GuardrailWordPolicyConfig>,
    /// <p>The sensitive information policy to configure for the guardrail.</p>
    pub sensitive_information_policy_config: ::std::option::Option<crate::types::GuardrailSensitiveInformationPolicyConfig>,
    /// <p>The message to return when the guardrail blocks a prompt.</p>
    pub blocked_input_messaging: ::std::option::Option<::std::string::String>,
    /// <p>The message to return when the guardrail blocks a model response.</p>
    pub blocked_outputs_messaging: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the KMS key that you use to encrypt the guardrail.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
    /// <p>The tags that you want to attach to the guardrail.</p>
    pub tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than once. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub client_request_token: ::std::option::Option<::std::string::String>,
}
impl CreateGuardrailInput {
    /// <p>The name to give the guardrail.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the guardrail.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The topic policies to configure for the guardrail.</p>
    pub fn topic_policy_config(&self) -> ::std::option::Option<&crate::types::GuardrailTopicPolicyConfig> {
        self.topic_policy_config.as_ref()
    }
    /// <p>The content filter policies to configure for the guardrail.</p>
    pub fn content_policy_config(&self) -> ::std::option::Option<&crate::types::GuardrailContentPolicyConfig> {
        self.content_policy_config.as_ref()
    }
    /// <p>The word policy you configure for the guardrail.</p>
    pub fn word_policy_config(&self) -> ::std::option::Option<&crate::types::GuardrailWordPolicyConfig> {
        self.word_policy_config.as_ref()
    }
    /// <p>The sensitive information policy to configure for the guardrail.</p>
    pub fn sensitive_information_policy_config(&self) -> ::std::option::Option<&crate::types::GuardrailSensitiveInformationPolicyConfig> {
        self.sensitive_information_policy_config.as_ref()
    }
    /// <p>The message to return when the guardrail blocks a prompt.</p>
    pub fn blocked_input_messaging(&self) -> ::std::option::Option<&str> {
        self.blocked_input_messaging.as_deref()
    }
    /// <p>The message to return when the guardrail blocks a model response.</p>
    pub fn blocked_outputs_messaging(&self) -> ::std::option::Option<&str> {
        self.blocked_outputs_messaging.as_deref()
    }
    /// <p>The ARN of the KMS key that you use to encrypt the guardrail.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
    /// <p>The tags that you want to attach to the guardrail.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.tags.is_none()`.
    pub fn tags(&self) -> &[crate::types::Tag] {
        self.tags.as_deref().unwrap_or_default()
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than once. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn client_request_token(&self) -> ::std::option::Option<&str> {
        self.client_request_token.as_deref()
    }
}
impl ::std::fmt::Debug for CreateGuardrailInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateGuardrailInput");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("topic_policy_config", &self.topic_policy_config);
        formatter.field("content_policy_config", &self.content_policy_config);
        formatter.field("word_policy_config", &self.word_policy_config);
        formatter.field("sensitive_information_policy_config", &self.sensitive_information_policy_config);
        formatter.field("blocked_input_messaging", &"*** Sensitive Data Redacted ***");
        formatter.field("blocked_outputs_messaging", &"*** Sensitive Data Redacted ***");
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("tags", &self.tags);
        formatter.field("client_request_token", &self.client_request_token);
        formatter.finish()
    }
}
impl CreateGuardrailInput {
    /// Creates a new builder-style object to manufacture [`CreateGuardrailInput`](crate::operation::create_guardrail::CreateGuardrailInput).
    pub fn builder() -> crate::operation::create_guardrail::builders::CreateGuardrailInputBuilder {
        crate::operation::create_guardrail::builders::CreateGuardrailInputBuilder::default()
    }
}

/// A builder for [`CreateGuardrailInput`](crate::operation::create_guardrail::CreateGuardrailInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct CreateGuardrailInputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) topic_policy_config: ::std::option::Option<crate::types::GuardrailTopicPolicyConfig>,
    pub(crate) content_policy_config: ::std::option::Option<crate::types::GuardrailContentPolicyConfig>,
    pub(crate) word_policy_config: ::std::option::Option<crate::types::GuardrailWordPolicyConfig>,
    pub(crate) sensitive_information_policy_config: ::std::option::Option<crate::types::GuardrailSensitiveInformationPolicyConfig>,
    pub(crate) blocked_input_messaging: ::std::option::Option<::std::string::String>,
    pub(crate) blocked_outputs_messaging: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
    pub(crate) tags: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>,
    pub(crate) client_request_token: ::std::option::Option<::std::string::String>,
}
impl CreateGuardrailInputBuilder {
    /// <p>The name to give the guardrail.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name to give the guardrail.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name to give the guardrail.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of the guardrail.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the guardrail.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the guardrail.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The topic policies to configure for the guardrail.</p>
    pub fn topic_policy_config(mut self, input: crate::types::GuardrailTopicPolicyConfig) -> Self {
        self.topic_policy_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The topic policies to configure for the guardrail.</p>
    pub fn set_topic_policy_config(mut self, input: ::std::option::Option<crate::types::GuardrailTopicPolicyConfig>) -> Self {
        self.topic_policy_config = input;
        self
    }
    /// <p>The topic policies to configure for the guardrail.</p>
    pub fn get_topic_policy_config(&self) -> &::std::option::Option<crate::types::GuardrailTopicPolicyConfig> {
        &self.topic_policy_config
    }
    /// <p>The content filter policies to configure for the guardrail.</p>
    pub fn content_policy_config(mut self, input: crate::types::GuardrailContentPolicyConfig) -> Self {
        self.content_policy_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The content filter policies to configure for the guardrail.</p>
    pub fn set_content_policy_config(mut self, input: ::std::option::Option<crate::types::GuardrailContentPolicyConfig>) -> Self {
        self.content_policy_config = input;
        self
    }
    /// <p>The content filter policies to configure for the guardrail.</p>
    pub fn get_content_policy_config(&self) -> &::std::option::Option<crate::types::GuardrailContentPolicyConfig> {
        &self.content_policy_config
    }
    /// <p>The word policy you configure for the guardrail.</p>
    pub fn word_policy_config(mut self, input: crate::types::GuardrailWordPolicyConfig) -> Self {
        self.word_policy_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The word policy you configure for the guardrail.</p>
    pub fn set_word_policy_config(mut self, input: ::std::option::Option<crate::types::GuardrailWordPolicyConfig>) -> Self {
        self.word_policy_config = input;
        self
    }
    /// <p>The word policy you configure for the guardrail.</p>
    pub fn get_word_policy_config(&self) -> &::std::option::Option<crate::types::GuardrailWordPolicyConfig> {
        &self.word_policy_config
    }
    /// <p>The sensitive information policy to configure for the guardrail.</p>
    pub fn sensitive_information_policy_config(mut self, input: crate::types::GuardrailSensitiveInformationPolicyConfig) -> Self {
        self.sensitive_information_policy_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sensitive information policy to configure for the guardrail.</p>
    pub fn set_sensitive_information_policy_config(
        mut self,
        input: ::std::option::Option<crate::types::GuardrailSensitiveInformationPolicyConfig>,
    ) -> Self {
        self.sensitive_information_policy_config = input;
        self
    }
    /// <p>The sensitive information policy to configure for the guardrail.</p>
    pub fn get_sensitive_information_policy_config(&self) -> &::std::option::Option<crate::types::GuardrailSensitiveInformationPolicyConfig> {
        &self.sensitive_information_policy_config
    }
    /// <p>The message to return when the guardrail blocks a prompt.</p>
    /// This field is required.
    pub fn blocked_input_messaging(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.blocked_input_messaging = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message to return when the guardrail blocks a prompt.</p>
    pub fn set_blocked_input_messaging(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.blocked_input_messaging = input;
        self
    }
    /// <p>The message to return when the guardrail blocks a prompt.</p>
    pub fn get_blocked_input_messaging(&self) -> &::std::option::Option<::std::string::String> {
        &self.blocked_input_messaging
    }
    /// <p>The message to return when the guardrail blocks a model response.</p>
    /// This field is required.
    pub fn blocked_outputs_messaging(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.blocked_outputs_messaging = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message to return when the guardrail blocks a model response.</p>
    pub fn set_blocked_outputs_messaging(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.blocked_outputs_messaging = input;
        self
    }
    /// <p>The message to return when the guardrail blocks a model response.</p>
    pub fn get_blocked_outputs_messaging(&self) -> &::std::option::Option<::std::string::String> {
        &self.blocked_outputs_messaging
    }
    /// <p>The ARN of the KMS key that you use to encrypt the guardrail.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the KMS key that you use to encrypt the guardrail.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The ARN of the KMS key that you use to encrypt the guardrail.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// Appends an item to `tags`.
    ///
    /// To override the contents of this collection use [`set_tags`](Self::set_tags).
    ///
    /// <p>The tags that you want to attach to the guardrail.</p>
    pub fn tags(mut self, input: crate::types::Tag) -> Self {
        let mut v = self.tags.unwrap_or_default();
        v.push(input);
        self.tags = ::std::option::Option::Some(v);
        self
    }
    /// <p>The tags that you want to attach to the guardrail.</p>
    pub fn set_tags(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::Tag>>) -> Self {
        self.tags = input;
        self
    }
    /// <p>The tags that you want to attach to the guardrail.</p>
    pub fn get_tags(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::Tag>> {
        &self.tags
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than once. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn client_request_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.client_request_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than once. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn set_client_request_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.client_request_token = input;
        self
    }
    /// <p>A unique, case-sensitive identifier to ensure that the API request completes no more than once. If this token matches a previous request, Amazon Bedrock ignores the request, but does not return an error. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/APIReference/Run_Instance_Idempotency.html">Ensuring idempotency</a> in the <i>Amazon S3 User Guide</i>.</p>
    pub fn get_client_request_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.client_request_token
    }
    /// Consumes the builder and constructs a [`CreateGuardrailInput`](crate::operation::create_guardrail::CreateGuardrailInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::create_guardrail::CreateGuardrailInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::create_guardrail::CreateGuardrailInput {
            name: self.name,
            description: self.description,
            topic_policy_config: self.topic_policy_config,
            content_policy_config: self.content_policy_config,
            word_policy_config: self.word_policy_config,
            sensitive_information_policy_config: self.sensitive_information_policy_config,
            blocked_input_messaging: self.blocked_input_messaging,
            blocked_outputs_messaging: self.blocked_outputs_messaging,
            kms_key_id: self.kms_key_id,
            tags: self.tags,
            client_request_token: self.client_request_token,
        })
    }
}
impl ::std::fmt::Debug for CreateGuardrailInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("CreateGuardrailInputBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("topic_policy_config", &self.topic_policy_config);
        formatter.field("content_policy_config", &self.content_policy_config);
        formatter.field("word_policy_config", &self.word_policy_config);
        formatter.field("sensitive_information_policy_config", &self.sensitive_information_policy_config);
        formatter.field("blocked_input_messaging", &"*** Sensitive Data Redacted ***");
        formatter.field("blocked_outputs_messaging", &"*** Sensitive Data Redacted ***");
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.field("tags", &self.tags);
        formatter.field("client_request_token", &self.client_request_token);
        formatter.finish()
    }
}
