// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GetGuardrailOutput {
    /// <p>The name of the guardrail.</p>
    pub name: ::std::string::String,
    /// <p>The description of the guardrail.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The unique identifier of the guardrail.</p>
    pub guardrail_id: ::std::string::String,
    /// <p>The ARN of the guardrail that was created.</p>
    pub guardrail_arn: ::std::string::String,
    /// <p>The version of the guardrail.</p>
    pub version: ::std::string::String,
    /// <p>The status of the guardrail.</p>
    pub status: crate::types::GuardrailStatus,
    /// <p>The topic policy that was configured for the guardrail.</p>
    pub topic_policy: ::std::option::Option<crate::types::GuardrailTopicPolicy>,
    /// <p>The content policy that was configured for the guardrail.</p>
    pub content_policy: ::std::option::Option<crate::types::GuardrailContentPolicy>,
    /// <p>The word policy that was configured for the guardrail.</p>
    pub word_policy: ::std::option::Option<crate::types::GuardrailWordPolicy>,
    /// <p>The sensitive information policy that was configured for the guardrail.</p>
    pub sensitive_information_policy: ::std::option::Option<crate::types::GuardrailSensitiveInformationPolicy>,
    /// <p>The date and time at which the guardrail was created.</p>
    pub created_at: ::aws_smithy_types::DateTime,
    /// <p>The date and time at which the guardrail was updated.</p>
    pub updated_at: ::aws_smithy_types::DateTime,
    /// <p>Appears if the <code>status</code> is <code>FAILED</code>. A list of reasons for why the guardrail failed to be created, updated, versioned, or deleted.</p>
    pub status_reasons: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Appears if the <code>status</code> of the guardrail is <code>FAILED</code>. A list of recommendations to carry out before retrying the request.</p>
    pub failure_recommendations: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The message that the guardrail returns when it blocks a prompt.</p>
    pub blocked_input_messaging: ::std::string::String,
    /// <p>The message that the guardrail returns when it blocks a model response.</p>
    pub blocked_outputs_messaging: ::std::string::String,
    /// <p>The ARN of the KMS key that encrypts the guardrail.</p>
    pub kms_key_arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetGuardrailOutput {
    /// <p>The name of the guardrail.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>The description of the guardrail.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The unique identifier of the guardrail.</p>
    pub fn guardrail_id(&self) -> &str {
        use std::ops::Deref;
        self.guardrail_id.deref()
    }
    /// <p>The ARN of the guardrail that was created.</p>
    pub fn guardrail_arn(&self) -> &str {
        use std::ops::Deref;
        self.guardrail_arn.deref()
    }
    /// <p>The version of the guardrail.</p>
    pub fn version(&self) -> &str {
        use std::ops::Deref;
        self.version.deref()
    }
    /// <p>The status of the guardrail.</p>
    pub fn status(&self) -> &crate::types::GuardrailStatus {
        &self.status
    }
    /// <p>The topic policy that was configured for the guardrail.</p>
    pub fn topic_policy(&self) -> ::std::option::Option<&crate::types::GuardrailTopicPolicy> {
        self.topic_policy.as_ref()
    }
    /// <p>The content policy that was configured for the guardrail.</p>
    pub fn content_policy(&self) -> ::std::option::Option<&crate::types::GuardrailContentPolicy> {
        self.content_policy.as_ref()
    }
    /// <p>The word policy that was configured for the guardrail.</p>
    pub fn word_policy(&self) -> ::std::option::Option<&crate::types::GuardrailWordPolicy> {
        self.word_policy.as_ref()
    }
    /// <p>The sensitive information policy that was configured for the guardrail.</p>
    pub fn sensitive_information_policy(&self) -> ::std::option::Option<&crate::types::GuardrailSensitiveInformationPolicy> {
        self.sensitive_information_policy.as_ref()
    }
    /// <p>The date and time at which the guardrail was created.</p>
    pub fn created_at(&self) -> &::aws_smithy_types::DateTime {
        &self.created_at
    }
    /// <p>The date and time at which the guardrail was updated.</p>
    pub fn updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.updated_at
    }
    /// <p>Appears if the <code>status</code> is <code>FAILED</code>. A list of reasons for why the guardrail failed to be created, updated, versioned, or deleted.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.status_reasons.is_none()`.
    pub fn status_reasons(&self) -> &[::std::string::String] {
        self.status_reasons.as_deref().unwrap_or_default()
    }
    /// <p>Appears if the <code>status</code> of the guardrail is <code>FAILED</code>. A list of recommendations to carry out before retrying the request.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.failure_recommendations.is_none()`.
    pub fn failure_recommendations(&self) -> &[::std::string::String] {
        self.failure_recommendations.as_deref().unwrap_or_default()
    }
    /// <p>The message that the guardrail returns when it blocks a prompt.</p>
    pub fn blocked_input_messaging(&self) -> &str {
        use std::ops::Deref;
        self.blocked_input_messaging.deref()
    }
    /// <p>The message that the guardrail returns when it blocks a model response.</p>
    pub fn blocked_outputs_messaging(&self) -> &str {
        use std::ops::Deref;
        self.blocked_outputs_messaging.deref()
    }
    /// <p>The ARN of the KMS key that encrypts the guardrail.</p>
    pub fn kms_key_arn(&self) -> ::std::option::Option<&str> {
        self.kms_key_arn.as_deref()
    }
}
impl ::std::fmt::Debug for GetGuardrailOutput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetGuardrailOutput");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("guardrail_id", &self.guardrail_id);
        formatter.field("guardrail_arn", &self.guardrail_arn);
        formatter.field("version", &self.version);
        formatter.field("status", &self.status);
        formatter.field("topic_policy", &self.topic_policy);
        formatter.field("content_policy", &self.content_policy);
        formatter.field("word_policy", &self.word_policy);
        formatter.field("sensitive_information_policy", &self.sensitive_information_policy);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("status_reasons", &self.status_reasons);
        formatter.field("failure_recommendations", &self.failure_recommendations);
        formatter.field("blocked_input_messaging", &"*** Sensitive Data Redacted ***");
        formatter.field("blocked_outputs_messaging", &"*** Sensitive Data Redacted ***");
        formatter.field("kms_key_arn", &self.kms_key_arn);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
impl ::aws_types::request_id::RequestId for GetGuardrailOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetGuardrailOutput {
    /// Creates a new builder-style object to manufacture [`GetGuardrailOutput`](crate::operation::get_guardrail::GetGuardrailOutput).
    pub fn builder() -> crate::operation::get_guardrail::builders::GetGuardrailOutputBuilder {
        crate::operation::get_guardrail::builders::GetGuardrailOutputBuilder::default()
    }
}

/// A builder for [`GetGuardrailOutput`](crate::operation::get_guardrail::GetGuardrailOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GetGuardrailOutputBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) guardrail_id: ::std::option::Option<::std::string::String>,
    pub(crate) guardrail_arn: ::std::option::Option<::std::string::String>,
    pub(crate) version: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::GuardrailStatus>,
    pub(crate) topic_policy: ::std::option::Option<crate::types::GuardrailTopicPolicy>,
    pub(crate) content_policy: ::std::option::Option<crate::types::GuardrailContentPolicy>,
    pub(crate) word_policy: ::std::option::Option<crate::types::GuardrailWordPolicy>,
    pub(crate) sensitive_information_policy: ::std::option::Option<crate::types::GuardrailSensitiveInformationPolicy>,
    pub(crate) created_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) status_reasons: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) failure_recommendations: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) blocked_input_messaging: ::std::option::Option<::std::string::String>,
    pub(crate) blocked_outputs_messaging: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_arn: ::std::option::Option<::std::string::String>,
    _request_id: Option<String>,
}
impl GetGuardrailOutputBuilder {
    /// <p>The name of the guardrail.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the guardrail.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the guardrail.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The description of the guardrail.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The description of the guardrail.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>The description of the guardrail.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The unique identifier of the guardrail.</p>
    /// This field is required.
    pub fn guardrail_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.guardrail_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the guardrail.</p>
    pub fn set_guardrail_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.guardrail_id = input;
        self
    }
    /// <p>The unique identifier of the guardrail.</p>
    pub fn get_guardrail_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.guardrail_id
    }
    /// <p>The ARN of the guardrail that was created.</p>
    /// This field is required.
    pub fn guardrail_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.guardrail_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the guardrail that was created.</p>
    pub fn set_guardrail_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.guardrail_arn = input;
        self
    }
    /// <p>The ARN of the guardrail that was created.</p>
    pub fn get_guardrail_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.guardrail_arn
    }
    /// <p>The version of the guardrail.</p>
    /// This field is required.
    pub fn version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the guardrail.</p>
    pub fn set_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.version = input;
        self
    }
    /// <p>The version of the guardrail.</p>
    pub fn get_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.version
    }
    /// <p>The status of the guardrail.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::GuardrailStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the guardrail.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::GuardrailStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the guardrail.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::GuardrailStatus> {
        &self.status
    }
    /// <p>The topic policy that was configured for the guardrail.</p>
    pub fn topic_policy(mut self, input: crate::types::GuardrailTopicPolicy) -> Self {
        self.topic_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The topic policy that was configured for the guardrail.</p>
    pub fn set_topic_policy(mut self, input: ::std::option::Option<crate::types::GuardrailTopicPolicy>) -> Self {
        self.topic_policy = input;
        self
    }
    /// <p>The topic policy that was configured for the guardrail.</p>
    pub fn get_topic_policy(&self) -> &::std::option::Option<crate::types::GuardrailTopicPolicy> {
        &self.topic_policy
    }
    /// <p>The content policy that was configured for the guardrail.</p>
    pub fn content_policy(mut self, input: crate::types::GuardrailContentPolicy) -> Self {
        self.content_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The content policy that was configured for the guardrail.</p>
    pub fn set_content_policy(mut self, input: ::std::option::Option<crate::types::GuardrailContentPolicy>) -> Self {
        self.content_policy = input;
        self
    }
    /// <p>The content policy that was configured for the guardrail.</p>
    pub fn get_content_policy(&self) -> &::std::option::Option<crate::types::GuardrailContentPolicy> {
        &self.content_policy
    }
    /// <p>The word policy that was configured for the guardrail.</p>
    pub fn word_policy(mut self, input: crate::types::GuardrailWordPolicy) -> Self {
        self.word_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The word policy that was configured for the guardrail.</p>
    pub fn set_word_policy(mut self, input: ::std::option::Option<crate::types::GuardrailWordPolicy>) -> Self {
        self.word_policy = input;
        self
    }
    /// <p>The word policy that was configured for the guardrail.</p>
    pub fn get_word_policy(&self) -> &::std::option::Option<crate::types::GuardrailWordPolicy> {
        &self.word_policy
    }
    /// <p>The sensitive information policy that was configured for the guardrail.</p>
    pub fn sensitive_information_policy(mut self, input: crate::types::GuardrailSensitiveInformationPolicy) -> Self {
        self.sensitive_information_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sensitive information policy that was configured for the guardrail.</p>
    pub fn set_sensitive_information_policy(mut self, input: ::std::option::Option<crate::types::GuardrailSensitiveInformationPolicy>) -> Self {
        self.sensitive_information_policy = input;
        self
    }
    /// <p>The sensitive information policy that was configured for the guardrail.</p>
    pub fn get_sensitive_information_policy(&self) -> &::std::option::Option<crate::types::GuardrailSensitiveInformationPolicy> {
        &self.sensitive_information_policy
    }
    /// <p>The date and time at which the guardrail was created.</p>
    /// This field is required.
    pub fn created_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.created_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time at which the guardrail was created.</p>
    pub fn set_created_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.created_at = input;
        self
    }
    /// <p>The date and time at which the guardrail was created.</p>
    pub fn get_created_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.created_at
    }
    /// <p>The date and time at which the guardrail was updated.</p>
    /// This field is required.
    pub fn updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time at which the guardrail was updated.</p>
    pub fn set_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.updated_at = input;
        self
    }
    /// <p>The date and time at which the guardrail was updated.</p>
    pub fn get_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.updated_at
    }
    /// Appends an item to `status_reasons`.
    ///
    /// To override the contents of this collection use [`set_status_reasons`](Self::set_status_reasons).
    ///
    /// <p>Appears if the <code>status</code> is <code>FAILED</code>. A list of reasons for why the guardrail failed to be created, updated, versioned, or deleted.</p>
    pub fn status_reasons(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.status_reasons.unwrap_or_default();
        v.push(input.into());
        self.status_reasons = ::std::option::Option::Some(v);
        self
    }
    /// <p>Appears if the <code>status</code> is <code>FAILED</code>. A list of reasons for why the guardrail failed to be created, updated, versioned, or deleted.</p>
    pub fn set_status_reasons(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.status_reasons = input;
        self
    }
    /// <p>Appears if the <code>status</code> is <code>FAILED</code>. A list of reasons for why the guardrail failed to be created, updated, versioned, or deleted.</p>
    pub fn get_status_reasons(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.status_reasons
    }
    /// Appends an item to `failure_recommendations`.
    ///
    /// To override the contents of this collection use [`set_failure_recommendations`](Self::set_failure_recommendations).
    ///
    /// <p>Appears if the <code>status</code> of the guardrail is <code>FAILED</code>. A list of recommendations to carry out before retrying the request.</p>
    pub fn failure_recommendations(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.failure_recommendations.unwrap_or_default();
        v.push(input.into());
        self.failure_recommendations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Appears if the <code>status</code> of the guardrail is <code>FAILED</code>. A list of recommendations to carry out before retrying the request.</p>
    pub fn set_failure_recommendations(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.failure_recommendations = input;
        self
    }
    /// <p>Appears if the <code>status</code> of the guardrail is <code>FAILED</code>. A list of recommendations to carry out before retrying the request.</p>
    pub fn get_failure_recommendations(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.failure_recommendations
    }
    /// <p>The message that the guardrail returns when it blocks a prompt.</p>
    /// This field is required.
    pub fn blocked_input_messaging(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.blocked_input_messaging = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message that the guardrail returns when it blocks a prompt.</p>
    pub fn set_blocked_input_messaging(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.blocked_input_messaging = input;
        self
    }
    /// <p>The message that the guardrail returns when it blocks a prompt.</p>
    pub fn get_blocked_input_messaging(&self) -> &::std::option::Option<::std::string::String> {
        &self.blocked_input_messaging
    }
    /// <p>The message that the guardrail returns when it blocks a model response.</p>
    /// This field is required.
    pub fn blocked_outputs_messaging(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.blocked_outputs_messaging = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message that the guardrail returns when it blocks a model response.</p>
    pub fn set_blocked_outputs_messaging(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.blocked_outputs_messaging = input;
        self
    }
    /// <p>The message that the guardrail returns when it blocks a model response.</p>
    pub fn get_blocked_outputs_messaging(&self) -> &::std::option::Option<::std::string::String> {
        &self.blocked_outputs_messaging
    }
    /// <p>The ARN of the KMS key that encrypts the guardrail.</p>
    pub fn kms_key_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the KMS key that encrypts the guardrail.</p>
    pub fn set_kms_key_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_arn = input;
        self
    }
    /// <p>The ARN of the KMS key that encrypts the guardrail.</p>
    pub fn get_kms_key_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_arn
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetGuardrailOutput`](crate::operation::get_guardrail::GetGuardrailOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::operation::get_guardrail::builders::GetGuardrailOutputBuilder::name)
    /// - [`guardrail_id`](crate::operation::get_guardrail::builders::GetGuardrailOutputBuilder::guardrail_id)
    /// - [`guardrail_arn`](crate::operation::get_guardrail::builders::GetGuardrailOutputBuilder::guardrail_arn)
    /// - [`version`](crate::operation::get_guardrail::builders::GetGuardrailOutputBuilder::version)
    /// - [`status`](crate::operation::get_guardrail::builders::GetGuardrailOutputBuilder::status)
    /// - [`created_at`](crate::operation::get_guardrail::builders::GetGuardrailOutputBuilder::created_at)
    /// - [`updated_at`](crate::operation::get_guardrail::builders::GetGuardrailOutputBuilder::updated_at)
    /// - [`blocked_input_messaging`](crate::operation::get_guardrail::builders::GetGuardrailOutputBuilder::blocked_input_messaging)
    /// - [`blocked_outputs_messaging`](crate::operation::get_guardrail::builders::GetGuardrailOutputBuilder::blocked_outputs_messaging)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::get_guardrail::GetGuardrailOutput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::get_guardrail::GetGuardrailOutput {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GetGuardrailOutput",
                )
            })?,
            description: self.description,
            guardrail_id: self.guardrail_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "guardrail_id",
                    "guardrail_id was not specified but it is required when building GetGuardrailOutput",
                )
            })?,
            guardrail_arn: self.guardrail_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "guardrail_arn",
                    "guardrail_arn was not specified but it is required when building GetGuardrailOutput",
                )
            })?,
            version: self.version.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "version",
                    "version was not specified but it is required when building GetGuardrailOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetGuardrailOutput",
                )
            })?,
            topic_policy: self.topic_policy,
            content_policy: self.content_policy,
            word_policy: self.word_policy,
            sensitive_information_policy: self.sensitive_information_policy,
            created_at: self.created_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "created_at",
                    "created_at was not specified but it is required when building GetGuardrailOutput",
                )
            })?,
            updated_at: self.updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "updated_at",
                    "updated_at was not specified but it is required when building GetGuardrailOutput",
                )
            })?,
            status_reasons: self.status_reasons,
            failure_recommendations: self.failure_recommendations,
            blocked_input_messaging: self.blocked_input_messaging.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "blocked_input_messaging",
                    "blocked_input_messaging was not specified but it is required when building GetGuardrailOutput",
                )
            })?,
            blocked_outputs_messaging: self.blocked_outputs_messaging.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "blocked_outputs_messaging",
                    "blocked_outputs_messaging was not specified but it is required when building GetGuardrailOutput",
                )
            })?,
            kms_key_arn: self.kms_key_arn,
            _request_id: self._request_id,
        })
    }
}
impl ::std::fmt::Debug for GetGuardrailOutputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GetGuardrailOutputBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("guardrail_id", &self.guardrail_id);
        formatter.field("guardrail_arn", &self.guardrail_arn);
        formatter.field("version", &self.version);
        formatter.field("status", &self.status);
        formatter.field("topic_policy", &self.topic_policy);
        formatter.field("content_policy", &self.content_policy);
        formatter.field("word_policy", &self.word_policy);
        formatter.field("sensitive_information_policy", &self.sensitive_information_policy);
        formatter.field("created_at", &self.created_at);
        formatter.field("updated_at", &self.updated_at);
        formatter.field("status_reasons", &self.status_reasons);
        formatter.field("failure_recommendations", &self.failure_recommendations);
        formatter.field("blocked_input_messaging", &"*** Sensitive Data Redacted ***");
        formatter.field("blocked_outputs_messaging", &"*** Sensitive Data Redacted ***");
        formatter.field("kms_key_arn", &self.kms_key_arn);
        formatter.field("_request_id", &self._request_id);
        formatter.finish()
    }
}
