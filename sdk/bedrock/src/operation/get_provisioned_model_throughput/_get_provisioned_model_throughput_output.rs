// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GetProvisionedModelThroughputOutput {
    /// <p>The number of model units allocated to this Provisioned Throughput.</p>
    pub model_units: i32,
    /// <p>The number of model units that was requested for this Provisioned Throughput.</p>
    pub desired_model_units: i32,
    /// <p>The name of the Provisioned Throughput.</p>
    pub provisioned_model_name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the Provisioned Throughput.</p>
    pub provisioned_model_arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the model associated with this Provisioned Throughput.</p>
    pub model_arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the model requested to be associated to this Provisioned Throughput. This value differs from the <code>modelArn</code> if updating hasn't completed.</p>
    pub desired_model_arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the base model for which the Provisioned Throughput was created, or of the base model that the custom model for which the Provisioned Throughput was created was customized.</p>
    pub foundation_model_arn: ::std::string::String,
    /// <p>The status of the Provisioned Throughput.</p>
    pub status: crate::types::ProvisionedModelStatus,
    /// <p>The timestamp of the creation time for this Provisioned Throughput.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>The timestamp of the last time that this Provisioned Throughput was modified.</p>
    pub last_modified_time: ::aws_smithy_types::DateTime,
    /// <p>A failure message for any issues that occurred during creation, updating, or deletion of the Provisioned Throughput.</p>
    pub failure_message: ::std::option::Option<::std::string::String>,
    /// <p>Commitment duration of the Provisioned Throughput.</p>
    pub commitment_duration: ::std::option::Option<crate::types::CommitmentDuration>,
    /// <p>The timestamp for when the commitment term for the Provisioned Throughput expires.</p>
    pub commitment_expiration_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetProvisionedModelThroughputOutput {
    /// <p>The number of model units allocated to this Provisioned Throughput.</p>
    pub fn model_units(&self) -> i32 {
        self.model_units
    }
    /// <p>The number of model units that was requested for this Provisioned Throughput.</p>
    pub fn desired_model_units(&self) -> i32 {
        self.desired_model_units
    }
    /// <p>The name of the Provisioned Throughput.</p>
    pub fn provisioned_model_name(&self) -> &str {
        use std::ops::Deref;
        self.provisioned_model_name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Provisioned Throughput.</p>
    pub fn provisioned_model_arn(&self) -> &str {
        use std::ops::Deref;
        self.provisioned_model_arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the model associated with this Provisioned Throughput.</p>
    pub fn model_arn(&self) -> &str {
        use std::ops::Deref;
        self.model_arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the model requested to be associated to this Provisioned Throughput. This value differs from the <code>modelArn</code> if updating hasn't completed.</p>
    pub fn desired_model_arn(&self) -> &str {
        use std::ops::Deref;
        self.desired_model_arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the base model for which the Provisioned Throughput was created, or of the base model that the custom model for which the Provisioned Throughput was created was customized.</p>
    pub fn foundation_model_arn(&self) -> &str {
        use std::ops::Deref;
        self.foundation_model_arn.deref()
    }
    /// <p>The status of the Provisioned Throughput.</p>
    pub fn status(&self) -> &crate::types::ProvisionedModelStatus {
        &self.status
    }
    /// <p>The timestamp of the creation time for this Provisioned Throughput.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>The timestamp of the last time that this Provisioned Throughput was modified.</p>
    pub fn last_modified_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_modified_time
    }
    /// <p>A failure message for any issues that occurred during creation, updating, or deletion of the Provisioned Throughput.</p>
    pub fn failure_message(&self) -> ::std::option::Option<&str> {
        self.failure_message.as_deref()
    }
    /// <p>Commitment duration of the Provisioned Throughput.</p>
    pub fn commitment_duration(&self) -> ::std::option::Option<&crate::types::CommitmentDuration> {
        self.commitment_duration.as_ref()
    }
    /// <p>The timestamp for when the commitment term for the Provisioned Throughput expires.</p>
    pub fn commitment_expiration_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.commitment_expiration_time.as_ref()
    }
}
impl ::aws_types::request_id::RequestId for GetProvisionedModelThroughputOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl GetProvisionedModelThroughputOutput {
    /// Creates a new builder-style object to manufacture [`GetProvisionedModelThroughputOutput`](crate::operation::get_provisioned_model_throughput::GetProvisionedModelThroughputOutput).
    pub fn builder() -> crate::operation::get_provisioned_model_throughput::builders::GetProvisionedModelThroughputOutputBuilder {
        crate::operation::get_provisioned_model_throughput::builders::GetProvisionedModelThroughputOutputBuilder::default()
    }
}

/// A builder for [`GetProvisionedModelThroughputOutput`](crate::operation::get_provisioned_model_throughput::GetProvisionedModelThroughputOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GetProvisionedModelThroughputOutputBuilder {
    pub(crate) model_units: ::std::option::Option<i32>,
    pub(crate) desired_model_units: ::std::option::Option<i32>,
    pub(crate) provisioned_model_name: ::std::option::Option<::std::string::String>,
    pub(crate) provisioned_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) desired_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) foundation_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ProvisionedModelStatus>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) failure_message: ::std::option::Option<::std::string::String>,
    pub(crate) commitment_duration: ::std::option::Option<crate::types::CommitmentDuration>,
    pub(crate) commitment_expiration_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    _request_id: Option<String>,
}
impl GetProvisionedModelThroughputOutputBuilder {
    /// <p>The number of model units allocated to this Provisioned Throughput.</p>
    /// This field is required.
    pub fn model_units(mut self, input: i32) -> Self {
        self.model_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of model units allocated to this Provisioned Throughput.</p>
    pub fn set_model_units(mut self, input: ::std::option::Option<i32>) -> Self {
        self.model_units = input;
        self
    }
    /// <p>The number of model units allocated to this Provisioned Throughput.</p>
    pub fn get_model_units(&self) -> &::std::option::Option<i32> {
        &self.model_units
    }
    /// <p>The number of model units that was requested for this Provisioned Throughput.</p>
    /// This field is required.
    pub fn desired_model_units(mut self, input: i32) -> Self {
        self.desired_model_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of model units that was requested for this Provisioned Throughput.</p>
    pub fn set_desired_model_units(mut self, input: ::std::option::Option<i32>) -> Self {
        self.desired_model_units = input;
        self
    }
    /// <p>The number of model units that was requested for this Provisioned Throughput.</p>
    pub fn get_desired_model_units(&self) -> &::std::option::Option<i32> {
        &self.desired_model_units
    }
    /// <p>The name of the Provisioned Throughput.</p>
    /// This field is required.
    pub fn provisioned_model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provisioned_model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Provisioned Throughput.</p>
    pub fn set_provisioned_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provisioned_model_name = input;
        self
    }
    /// <p>The name of the Provisioned Throughput.</p>
    pub fn get_provisioned_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.provisioned_model_name
    }
    /// <p>The Amazon Resource Name (ARN) of the Provisioned Throughput.</p>
    /// This field is required.
    pub fn provisioned_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provisioned_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Provisioned Throughput.</p>
    pub fn set_provisioned_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provisioned_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Provisioned Throughput.</p>
    pub fn get_provisioned_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.provisioned_model_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the model associated with this Provisioned Throughput.</p>
    /// This field is required.
    pub fn model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model associated with this Provisioned Throughput.</p>
    pub fn set_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model associated with this Provisioned Throughput.</p>
    pub fn get_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the model requested to be associated to this Provisioned Throughput. This value differs from the <code>modelArn</code> if updating hasn't completed.</p>
    /// This field is required.
    pub fn desired_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.desired_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model requested to be associated to this Provisioned Throughput. This value differs from the <code>modelArn</code> if updating hasn't completed.</p>
    pub fn set_desired_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.desired_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model requested to be associated to this Provisioned Throughput. This value differs from the <code>modelArn</code> if updating hasn't completed.</p>
    pub fn get_desired_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.desired_model_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the base model for which the Provisioned Throughput was created, or of the base model that the custom model for which the Provisioned Throughput was created was customized.</p>
    /// This field is required.
    pub fn foundation_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.foundation_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the base model for which the Provisioned Throughput was created, or of the base model that the custom model for which the Provisioned Throughput was created was customized.</p>
    pub fn set_foundation_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.foundation_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the base model for which the Provisioned Throughput was created, or of the base model that the custom model for which the Provisioned Throughput was created was customized.</p>
    pub fn get_foundation_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.foundation_model_arn
    }
    /// <p>The status of the Provisioned Throughput.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ProvisionedModelStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the Provisioned Throughput.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ProvisionedModelStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the Provisioned Throughput.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ProvisionedModelStatus> {
        &self.status
    }
    /// <p>The timestamp of the creation time for this Provisioned Throughput.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of the creation time for this Provisioned Throughput.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The timestamp of the creation time for this Provisioned Throughput.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The timestamp of the last time that this Provisioned Throughput was modified.</p>
    /// This field is required.
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp of the last time that this Provisioned Throughput was modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The timestamp of the last time that this Provisioned Throughput was modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// <p>A failure message for any issues that occurred during creation, updating, or deletion of the Provisioned Throughput.</p>
    pub fn failure_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.failure_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A failure message for any issues that occurred during creation, updating, or deletion of the Provisioned Throughput.</p>
    pub fn set_failure_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.failure_message = input;
        self
    }
    /// <p>A failure message for any issues that occurred during creation, updating, or deletion of the Provisioned Throughput.</p>
    pub fn get_failure_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.failure_message
    }
    /// <p>Commitment duration of the Provisioned Throughput.</p>
    pub fn commitment_duration(mut self, input: crate::types::CommitmentDuration) -> Self {
        self.commitment_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Commitment duration of the Provisioned Throughput.</p>
    pub fn set_commitment_duration(mut self, input: ::std::option::Option<crate::types::CommitmentDuration>) -> Self {
        self.commitment_duration = input;
        self
    }
    /// <p>Commitment duration of the Provisioned Throughput.</p>
    pub fn get_commitment_duration(&self) -> &::std::option::Option<crate::types::CommitmentDuration> {
        &self.commitment_duration
    }
    /// <p>The timestamp for when the commitment term for the Provisioned Throughput expires.</p>
    pub fn commitment_expiration_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.commitment_expiration_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for when the commitment term for the Provisioned Throughput expires.</p>
    pub fn set_commitment_expiration_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.commitment_expiration_time = input;
        self
    }
    /// <p>The timestamp for when the commitment term for the Provisioned Throughput expires.</p>
    pub fn get_commitment_expiration_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.commitment_expiration_time
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`GetProvisionedModelThroughputOutput`](crate::operation::get_provisioned_model_throughput::GetProvisionedModelThroughputOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`model_units`](crate::operation::get_provisioned_model_throughput::builders::GetProvisionedModelThroughputOutputBuilder::model_units)
    /// - [`desired_model_units`](crate::operation::get_provisioned_model_throughput::builders::GetProvisionedModelThroughputOutputBuilder::desired_model_units)
    /// - [`provisioned_model_name`](crate::operation::get_provisioned_model_throughput::builders::GetProvisionedModelThroughputOutputBuilder::provisioned_model_name)
    /// - [`provisioned_model_arn`](crate::operation::get_provisioned_model_throughput::builders::GetProvisionedModelThroughputOutputBuilder::provisioned_model_arn)
    /// - [`model_arn`](crate::operation::get_provisioned_model_throughput::builders::GetProvisionedModelThroughputOutputBuilder::model_arn)
    /// - [`desired_model_arn`](crate::operation::get_provisioned_model_throughput::builders::GetProvisionedModelThroughputOutputBuilder::desired_model_arn)
    /// - [`foundation_model_arn`](crate::operation::get_provisioned_model_throughput::builders::GetProvisionedModelThroughputOutputBuilder::foundation_model_arn)
    /// - [`status`](crate::operation::get_provisioned_model_throughput::builders::GetProvisionedModelThroughputOutputBuilder::status)
    /// - [`creation_time`](crate::operation::get_provisioned_model_throughput::builders::GetProvisionedModelThroughputOutputBuilder::creation_time)
    /// - [`last_modified_time`](crate::operation::get_provisioned_model_throughput::builders::GetProvisionedModelThroughputOutputBuilder::last_modified_time)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::get_provisioned_model_throughput::GetProvisionedModelThroughputOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::get_provisioned_model_throughput::GetProvisionedModelThroughputOutput {
            model_units: self.model_units.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "model_units",
                    "model_units was not specified but it is required when building GetProvisionedModelThroughputOutput",
                )
            })?,
            desired_model_units: self.desired_model_units.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "desired_model_units",
                    "desired_model_units was not specified but it is required when building GetProvisionedModelThroughputOutput",
                )
            })?,
            provisioned_model_name: self.provisioned_model_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "provisioned_model_name",
                    "provisioned_model_name was not specified but it is required when building GetProvisionedModelThroughputOutput",
                )
            })?,
            provisioned_model_arn: self.provisioned_model_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "provisioned_model_arn",
                    "provisioned_model_arn was not specified but it is required when building GetProvisionedModelThroughputOutput",
                )
            })?,
            model_arn: self.model_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "model_arn",
                    "model_arn was not specified but it is required when building GetProvisionedModelThroughputOutput",
                )
            })?,
            desired_model_arn: self.desired_model_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "desired_model_arn",
                    "desired_model_arn was not specified but it is required when building GetProvisionedModelThroughputOutput",
                )
            })?,
            foundation_model_arn: self.foundation_model_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "foundation_model_arn",
                    "foundation_model_arn was not specified but it is required when building GetProvisionedModelThroughputOutput",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building GetProvisionedModelThroughputOutput",
                )
            })?,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building GetProvisionedModelThroughputOutput",
                )
            })?,
            last_modified_time: self.last_modified_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_modified_time",
                    "last_modified_time was not specified but it is required when building GetProvisionedModelThroughputOutput",
                )
            })?,
            failure_message: self.failure_message,
            commitment_duration: self.commitment_duration,
            commitment_expiration_time: self.commitment_expiration_time,
            _request_id: self._request_id,
        })
    }
}
