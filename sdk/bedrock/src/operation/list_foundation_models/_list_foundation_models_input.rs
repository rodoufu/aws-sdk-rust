// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListFoundationModelsInput {
    /// <p>Return models belonging to the model provider that you specify.</p>
    pub by_provider: ::std::option::Option<::std::string::String>,
    /// <p>Return models that support the customization type that you specify. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/custom-models.html">Custom models</a> in the Amazon Bedrock User Guide.</p>
    pub by_customization_type: ::std::option::Option<crate::types::ModelCustomization>,
    /// <p>Return models that support the output modality that you specify.</p>
    pub by_output_modality: ::std::option::Option<crate::types::ModelModality>,
    /// <p>Return models that support the inference type that you specify. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/prov-throughput.html">Provisioned Throughput</a> in the Amazon Bedrock User Guide.</p>
    pub by_inference_type: ::std::option::Option<crate::types::InferenceType>,
}
impl ListFoundationModelsInput {
    /// <p>Return models belonging to the model provider that you specify.</p>
    pub fn by_provider(&self) -> ::std::option::Option<&str> {
        self.by_provider.as_deref()
    }
    /// <p>Return models that support the customization type that you specify. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/custom-models.html">Custom models</a> in the Amazon Bedrock User Guide.</p>
    pub fn by_customization_type(&self) -> ::std::option::Option<&crate::types::ModelCustomization> {
        self.by_customization_type.as_ref()
    }
    /// <p>Return models that support the output modality that you specify.</p>
    pub fn by_output_modality(&self) -> ::std::option::Option<&crate::types::ModelModality> {
        self.by_output_modality.as_ref()
    }
    /// <p>Return models that support the inference type that you specify. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/prov-throughput.html">Provisioned Throughput</a> in the Amazon Bedrock User Guide.</p>
    pub fn by_inference_type(&self) -> ::std::option::Option<&crate::types::InferenceType> {
        self.by_inference_type.as_ref()
    }
}
impl ListFoundationModelsInput {
    /// Creates a new builder-style object to manufacture [`ListFoundationModelsInput`](crate::operation::list_foundation_models::ListFoundationModelsInput).
    pub fn builder() -> crate::operation::list_foundation_models::builders::ListFoundationModelsInputBuilder {
        crate::operation::list_foundation_models::builders::ListFoundationModelsInputBuilder::default()
    }
}

/// A builder for [`ListFoundationModelsInput`](crate::operation::list_foundation_models::ListFoundationModelsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListFoundationModelsInputBuilder {
    pub(crate) by_provider: ::std::option::Option<::std::string::String>,
    pub(crate) by_customization_type: ::std::option::Option<crate::types::ModelCustomization>,
    pub(crate) by_output_modality: ::std::option::Option<crate::types::ModelModality>,
    pub(crate) by_inference_type: ::std::option::Option<crate::types::InferenceType>,
}
impl ListFoundationModelsInputBuilder {
    /// <p>Return models belonging to the model provider that you specify.</p>
    pub fn by_provider(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.by_provider = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Return models belonging to the model provider that you specify.</p>
    pub fn set_by_provider(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.by_provider = input;
        self
    }
    /// <p>Return models belonging to the model provider that you specify.</p>
    pub fn get_by_provider(&self) -> &::std::option::Option<::std::string::String> {
        &self.by_provider
    }
    /// <p>Return models that support the customization type that you specify. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/custom-models.html">Custom models</a> in the Amazon Bedrock User Guide.</p>
    pub fn by_customization_type(mut self, input: crate::types::ModelCustomization) -> Self {
        self.by_customization_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Return models that support the customization type that you specify. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/custom-models.html">Custom models</a> in the Amazon Bedrock User Guide.</p>
    pub fn set_by_customization_type(mut self, input: ::std::option::Option<crate::types::ModelCustomization>) -> Self {
        self.by_customization_type = input;
        self
    }
    /// <p>Return models that support the customization type that you specify. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/custom-models.html">Custom models</a> in the Amazon Bedrock User Guide.</p>
    pub fn get_by_customization_type(&self) -> &::std::option::Option<crate::types::ModelCustomization> {
        &self.by_customization_type
    }
    /// <p>Return models that support the output modality that you specify.</p>
    pub fn by_output_modality(mut self, input: crate::types::ModelModality) -> Self {
        self.by_output_modality = ::std::option::Option::Some(input);
        self
    }
    /// <p>Return models that support the output modality that you specify.</p>
    pub fn set_by_output_modality(mut self, input: ::std::option::Option<crate::types::ModelModality>) -> Self {
        self.by_output_modality = input;
        self
    }
    /// <p>Return models that support the output modality that you specify.</p>
    pub fn get_by_output_modality(&self) -> &::std::option::Option<crate::types::ModelModality> {
        &self.by_output_modality
    }
    /// <p>Return models that support the inference type that you specify. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/prov-throughput.html">Provisioned Throughput</a> in the Amazon Bedrock User Guide.</p>
    pub fn by_inference_type(mut self, input: crate::types::InferenceType) -> Self {
        self.by_inference_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Return models that support the inference type that you specify. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/prov-throughput.html">Provisioned Throughput</a> in the Amazon Bedrock User Guide.</p>
    pub fn set_by_inference_type(mut self, input: ::std::option::Option<crate::types::InferenceType>) -> Self {
        self.by_inference_type = input;
        self
    }
    /// <p>Return models that support the inference type that you specify. For more information, see <a href="https://docs.aws.amazon.com/bedrock/latest/userguide/prov-throughput.html">Provisioned Throughput</a> in the Amazon Bedrock User Guide.</p>
    pub fn get_by_inference_type(&self) -> &::std::option::Option<crate::types::InferenceType> {
        &self.by_inference_type
    }
    /// Consumes the builder and constructs a [`ListFoundationModelsInput`](crate::operation::list_foundation_models::ListFoundationModelsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::list_foundation_models::ListFoundationModelsInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::list_foundation_models::ListFoundationModelsInput {
            by_provider: self.by_provider,
            by_customization_type: self.by_customization_type,
            by_output_modality: self.by_output_modality,
            by_inference_type: self.by_inference_type,
        })
    }
}
