// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct UpdateGuardrailInput {
    /// <p>The unique identifier of the guardrail</p>
    pub guardrail_identifier: ::std::option::Option<::std::string::String>,
    /// <p>A name for the guardrail.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>A description of the guardrail.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The topic policy to configure for the guardrail.</p>
    pub topic_policy_config: ::std::option::Option<crate::types::GuardrailTopicPolicyConfig>,
    /// <p>The content policy to configure for the guardrail.</p>
    pub content_policy_config: ::std::option::Option<crate::types::GuardrailContentPolicyConfig>,
    /// <p>The word policy to configure for the guardrail.</p>
    pub word_policy_config: ::std::option::Option<crate::types::GuardrailWordPolicyConfig>,
    /// <p>The sensitive information policy to configure for the guardrail.</p>
    pub sensitive_information_policy_config: ::std::option::Option<crate::types::GuardrailSensitiveInformationPolicyConfig>,
    /// <p>The message to return when the guardrail blocks a prompt.</p>
    pub blocked_input_messaging: ::std::option::Option<::std::string::String>,
    /// <p>The message to return when the guardrail blocks a model response.</p>
    pub blocked_outputs_messaging: ::std::option::Option<::std::string::String>,
    /// <p>The ARN of the KMS key with which to encrypt the guardrail.</p>
    pub kms_key_id: ::std::option::Option<::std::string::String>,
}
impl UpdateGuardrailInput {
    /// <p>The unique identifier of the guardrail</p>
    pub fn guardrail_identifier(&self) -> ::std::option::Option<&str> {
        self.guardrail_identifier.as_deref()
    }
    /// <p>A name for the guardrail.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>A description of the guardrail.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The topic policy to configure for the guardrail.</p>
    pub fn topic_policy_config(&self) -> ::std::option::Option<&crate::types::GuardrailTopicPolicyConfig> {
        self.topic_policy_config.as_ref()
    }
    /// <p>The content policy to configure for the guardrail.</p>
    pub fn content_policy_config(&self) -> ::std::option::Option<&crate::types::GuardrailContentPolicyConfig> {
        self.content_policy_config.as_ref()
    }
    /// <p>The word policy to configure for the guardrail.</p>
    pub fn word_policy_config(&self) -> ::std::option::Option<&crate::types::GuardrailWordPolicyConfig> {
        self.word_policy_config.as_ref()
    }
    /// <p>The sensitive information policy to configure for the guardrail.</p>
    pub fn sensitive_information_policy_config(&self) -> ::std::option::Option<&crate::types::GuardrailSensitiveInformationPolicyConfig> {
        self.sensitive_information_policy_config.as_ref()
    }
    /// <p>The message to return when the guardrail blocks a prompt.</p>
    pub fn blocked_input_messaging(&self) -> ::std::option::Option<&str> {
        self.blocked_input_messaging.as_deref()
    }
    /// <p>The message to return when the guardrail blocks a model response.</p>
    pub fn blocked_outputs_messaging(&self) -> ::std::option::Option<&str> {
        self.blocked_outputs_messaging.as_deref()
    }
    /// <p>The ARN of the KMS key with which to encrypt the guardrail.</p>
    pub fn kms_key_id(&self) -> ::std::option::Option<&str> {
        self.kms_key_id.as_deref()
    }
}
impl ::std::fmt::Debug for UpdateGuardrailInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateGuardrailInput");
        formatter.field("guardrail_identifier", &self.guardrail_identifier);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("topic_policy_config", &self.topic_policy_config);
        formatter.field("content_policy_config", &self.content_policy_config);
        formatter.field("word_policy_config", &self.word_policy_config);
        formatter.field("sensitive_information_policy_config", &self.sensitive_information_policy_config);
        formatter.field("blocked_input_messaging", &"*** Sensitive Data Redacted ***");
        formatter.field("blocked_outputs_messaging", &"*** Sensitive Data Redacted ***");
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.finish()
    }
}
impl UpdateGuardrailInput {
    /// Creates a new builder-style object to manufacture [`UpdateGuardrailInput`](crate::operation::update_guardrail::UpdateGuardrailInput).
    pub fn builder() -> crate::operation::update_guardrail::builders::UpdateGuardrailInputBuilder {
        crate::operation::update_guardrail::builders::UpdateGuardrailInputBuilder::default()
    }
}

/// A builder for [`UpdateGuardrailInput`](crate::operation::update_guardrail::UpdateGuardrailInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct UpdateGuardrailInputBuilder {
    pub(crate) guardrail_identifier: ::std::option::Option<::std::string::String>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) topic_policy_config: ::std::option::Option<crate::types::GuardrailTopicPolicyConfig>,
    pub(crate) content_policy_config: ::std::option::Option<crate::types::GuardrailContentPolicyConfig>,
    pub(crate) word_policy_config: ::std::option::Option<crate::types::GuardrailWordPolicyConfig>,
    pub(crate) sensitive_information_policy_config: ::std::option::Option<crate::types::GuardrailSensitiveInformationPolicyConfig>,
    pub(crate) blocked_input_messaging: ::std::option::Option<::std::string::String>,
    pub(crate) blocked_outputs_messaging: ::std::option::Option<::std::string::String>,
    pub(crate) kms_key_id: ::std::option::Option<::std::string::String>,
}
impl UpdateGuardrailInputBuilder {
    /// <p>The unique identifier of the guardrail</p>
    /// This field is required.
    pub fn guardrail_identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.guardrail_identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The unique identifier of the guardrail</p>
    pub fn set_guardrail_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.guardrail_identifier = input;
        self
    }
    /// <p>The unique identifier of the guardrail</p>
    pub fn get_guardrail_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.guardrail_identifier
    }
    /// <p>A name for the guardrail.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A name for the guardrail.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A name for the guardrail.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A description of the guardrail.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A description of the guardrail.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>A description of the guardrail.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The topic policy to configure for the guardrail.</p>
    pub fn topic_policy_config(mut self, input: crate::types::GuardrailTopicPolicyConfig) -> Self {
        self.topic_policy_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The topic policy to configure for the guardrail.</p>
    pub fn set_topic_policy_config(mut self, input: ::std::option::Option<crate::types::GuardrailTopicPolicyConfig>) -> Self {
        self.topic_policy_config = input;
        self
    }
    /// <p>The topic policy to configure for the guardrail.</p>
    pub fn get_topic_policy_config(&self) -> &::std::option::Option<crate::types::GuardrailTopicPolicyConfig> {
        &self.topic_policy_config
    }
    /// <p>The content policy to configure for the guardrail.</p>
    pub fn content_policy_config(mut self, input: crate::types::GuardrailContentPolicyConfig) -> Self {
        self.content_policy_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The content policy to configure for the guardrail.</p>
    pub fn set_content_policy_config(mut self, input: ::std::option::Option<crate::types::GuardrailContentPolicyConfig>) -> Self {
        self.content_policy_config = input;
        self
    }
    /// <p>The content policy to configure for the guardrail.</p>
    pub fn get_content_policy_config(&self) -> &::std::option::Option<crate::types::GuardrailContentPolicyConfig> {
        &self.content_policy_config
    }
    /// <p>The word policy to configure for the guardrail.</p>
    pub fn word_policy_config(mut self, input: crate::types::GuardrailWordPolicyConfig) -> Self {
        self.word_policy_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The word policy to configure for the guardrail.</p>
    pub fn set_word_policy_config(mut self, input: ::std::option::Option<crate::types::GuardrailWordPolicyConfig>) -> Self {
        self.word_policy_config = input;
        self
    }
    /// <p>The word policy to configure for the guardrail.</p>
    pub fn get_word_policy_config(&self) -> &::std::option::Option<crate::types::GuardrailWordPolicyConfig> {
        &self.word_policy_config
    }
    /// <p>The sensitive information policy to configure for the guardrail.</p>
    pub fn sensitive_information_policy_config(mut self, input: crate::types::GuardrailSensitiveInformationPolicyConfig) -> Self {
        self.sensitive_information_policy_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>The sensitive information policy to configure for the guardrail.</p>
    pub fn set_sensitive_information_policy_config(
        mut self,
        input: ::std::option::Option<crate::types::GuardrailSensitiveInformationPolicyConfig>,
    ) -> Self {
        self.sensitive_information_policy_config = input;
        self
    }
    /// <p>The sensitive information policy to configure for the guardrail.</p>
    pub fn get_sensitive_information_policy_config(&self) -> &::std::option::Option<crate::types::GuardrailSensitiveInformationPolicyConfig> {
        &self.sensitive_information_policy_config
    }
    /// <p>The message to return when the guardrail blocks a prompt.</p>
    /// This field is required.
    pub fn blocked_input_messaging(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.blocked_input_messaging = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message to return when the guardrail blocks a prompt.</p>
    pub fn set_blocked_input_messaging(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.blocked_input_messaging = input;
        self
    }
    /// <p>The message to return when the guardrail blocks a prompt.</p>
    pub fn get_blocked_input_messaging(&self) -> &::std::option::Option<::std::string::String> {
        &self.blocked_input_messaging
    }
    /// <p>The message to return when the guardrail blocks a model response.</p>
    /// This field is required.
    pub fn blocked_outputs_messaging(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.blocked_outputs_messaging = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The message to return when the guardrail blocks a model response.</p>
    pub fn set_blocked_outputs_messaging(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.blocked_outputs_messaging = input;
        self
    }
    /// <p>The message to return when the guardrail blocks a model response.</p>
    pub fn get_blocked_outputs_messaging(&self) -> &::std::option::Option<::std::string::String> {
        &self.blocked_outputs_messaging
    }
    /// <p>The ARN of the KMS key with which to encrypt the guardrail.</p>
    pub fn kms_key_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.kms_key_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the KMS key with which to encrypt the guardrail.</p>
    pub fn set_kms_key_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.kms_key_id = input;
        self
    }
    /// <p>The ARN of the KMS key with which to encrypt the guardrail.</p>
    pub fn get_kms_key_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.kms_key_id
    }
    /// Consumes the builder and constructs a [`UpdateGuardrailInput`](crate::operation::update_guardrail::UpdateGuardrailInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::update_guardrail::UpdateGuardrailInput, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::operation::update_guardrail::UpdateGuardrailInput {
            guardrail_identifier: self.guardrail_identifier,
            name: self.name,
            description: self.description,
            topic_policy_config: self.topic_policy_config,
            content_policy_config: self.content_policy_config,
            word_policy_config: self.word_policy_config,
            sensitive_information_policy_config: self.sensitive_information_policy_config,
            blocked_input_messaging: self.blocked_input_messaging,
            blocked_outputs_messaging: self.blocked_outputs_messaging,
            kms_key_id: self.kms_key_id,
        })
    }
}
impl ::std::fmt::Debug for UpdateGuardrailInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("UpdateGuardrailInputBuilder");
        formatter.field("guardrail_identifier", &self.guardrail_identifier);
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("topic_policy_config", &self.topic_policy_config);
        formatter.field("content_policy_config", &self.content_policy_config);
        formatter.field("word_policy_config", &self.word_policy_config);
        formatter.field("sensitive_information_policy_config", &self.sensitive_information_policy_config);
        formatter.field("blocked_input_messaging", &"*** Sensitive Data Redacted ***");
        formatter.field("blocked_outputs_messaging", &"*** Sensitive Data Redacted ***");
        formatter.field("kms_key_id", &self.kms_key_id);
        formatter.finish()
    }
}
