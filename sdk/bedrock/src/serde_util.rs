// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn create_evaluation_job_output_output_correct_errors(
    mut builder: crate::operation::create_evaluation_job::builders::CreateEvaluationJobOutputBuilder,
) -> crate::operation::create_evaluation_job::builders::CreateEvaluationJobOutputBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_guardrail_output_output_correct_errors(
    mut builder: crate::operation::create_guardrail::builders::CreateGuardrailOutputBuilder,
) -> crate::operation::create_guardrail::builders::CreateGuardrailOutputBuilder {
    if builder.guardrail_id.is_none() {
        builder.guardrail_id = Some(Default::default())
    }
    if builder.guardrail_arn.is_none() {
        builder.guardrail_arn = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn create_guardrail_version_output_output_correct_errors(
    mut builder: crate::operation::create_guardrail_version::builders::CreateGuardrailVersionOutputBuilder,
) -> crate::operation::create_guardrail_version::builders::CreateGuardrailVersionOutputBuilder {
    if builder.guardrail_id.is_none() {
        builder.guardrail_id = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    builder
}

pub(crate) fn create_model_customization_job_output_output_correct_errors(
    mut builder: crate::operation::create_model_customization_job::builders::CreateModelCustomizationJobOutputBuilder,
) -> crate::operation::create_model_customization_job::builders::CreateModelCustomizationJobOutputBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn create_provisioned_model_throughput_output_output_correct_errors(
    mut builder: crate::operation::create_provisioned_model_throughput::builders::CreateProvisionedModelThroughputOutputBuilder,
) -> crate::operation::create_provisioned_model_throughput::builders::CreateProvisionedModelThroughputOutputBuilder {
    if builder.provisioned_model_arn.is_none() {
        builder.provisioned_model_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn get_custom_model_output_output_correct_errors(
    mut builder: crate::operation::get_custom_model::builders::GetCustomModelOutputBuilder,
) -> crate::operation::get_custom_model::builders::GetCustomModelOutputBuilder {
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    if builder.model_name.is_none() {
        builder.model_name = Some(Default::default())
    }
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.base_model_arn.is_none() {
        builder.base_model_arn = Some(Default::default())
    }
    if builder.training_data_config.is_none() {
        builder.training_data_config = {
            let builder = crate::types::builders::TrainingDataConfigBuilder::default();
            crate::serde_util::training_data_config_correct_errors(builder).build().ok()
        }
    }
    if builder.output_data_config.is_none() {
        builder.output_data_config = {
            let builder = crate::types::builders::OutputDataConfigBuilder::default();
            crate::serde_util::output_data_config_correct_errors(builder).build().ok()
        }
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_evaluation_job_output_output_correct_errors(
    mut builder: crate::operation::get_evaluation_job::builders::GetEvaluationJobOutputBuilder,
) -> crate::operation::get_evaluation_job::builders::GetEvaluationJobOutputBuilder {
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::EvaluationJobStatus>().ok()
    }
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.job_type.is_none() {
        builder.job_type = "no value was set".parse::<crate::types::EvaluationJobType>().ok()
    }
    if builder.evaluation_config.is_none() {
        builder.evaluation_config = Some(crate::types::EvaluationConfig::Unknown)
    }
    if builder.inference_config.is_none() {
        builder.inference_config = Some(crate::types::EvaluationInferenceConfig::Unknown)
    }
    if builder.output_data_config.is_none() {
        builder.output_data_config = {
            let builder = crate::types::builders::EvaluationOutputDataConfigBuilder::default();
            crate::serde_util::evaluation_output_data_config_correct_errors(builder).build().ok()
        }
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn get_guardrail_output_output_correct_errors(
    mut builder: crate::operation::get_guardrail::builders::GetGuardrailOutputBuilder,
) -> crate::operation::get_guardrail::builders::GetGuardrailOutputBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.guardrail_id.is_none() {
        builder.guardrail_id = Some(Default::default())
    }
    if builder.guardrail_arn.is_none() {
        builder.guardrail_arn = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::GuardrailStatus>().ok()
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.blocked_input_messaging.is_none() {
        builder.blocked_input_messaging = Some(Default::default())
    }
    if builder.blocked_outputs_messaging.is_none() {
        builder.blocked_outputs_messaging = Some(Default::default())
    }
    builder
}

pub(crate) fn get_model_customization_job_output_output_correct_errors(
    mut builder: crate::operation::get_model_customization_job::builders::GetModelCustomizationJobOutputBuilder,
) -> crate::operation::get_model_customization_job::builders::GetModelCustomizationJobOutputBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    if builder.output_model_name.is_none() {
        builder.output_model_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.base_model_arn.is_none() {
        builder.base_model_arn = Some(Default::default())
    }
    if builder.hyper_parameters.is_none() {
        builder.hyper_parameters = Some(Default::default())
    }
    if builder.training_data_config.is_none() {
        builder.training_data_config = {
            let builder = crate::types::builders::TrainingDataConfigBuilder::default();
            crate::serde_util::training_data_config_correct_errors(builder).build().ok()
        }
    }
    if builder.validation_data_config.is_none() {
        builder.validation_data_config = {
            let builder = crate::types::builders::ValidationDataConfigBuilder::default();
            crate::serde_util::validation_data_config_correct_errors(builder).build().ok()
        }
    }
    if builder.output_data_config.is_none() {
        builder.output_data_config = {
            let builder = crate::types::builders::OutputDataConfigBuilder::default();
            crate::serde_util::output_data_config_correct_errors(builder).build().ok()
        }
    }
    builder
}

pub(crate) fn get_provisioned_model_throughput_output_output_correct_errors(
    mut builder: crate::operation::get_provisioned_model_throughput::builders::GetProvisionedModelThroughputOutputBuilder,
) -> crate::operation::get_provisioned_model_throughput::builders::GetProvisionedModelThroughputOutputBuilder {
    if builder.model_units.is_none() {
        builder.model_units = Some(Default::default())
    }
    if builder.desired_model_units.is_none() {
        builder.desired_model_units = Some(Default::default())
    }
    if builder.provisioned_model_name.is_none() {
        builder.provisioned_model_name = Some(Default::default())
    }
    if builder.provisioned_model_arn.is_none() {
        builder.provisioned_model_arn = Some(Default::default())
    }
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    if builder.desired_model_arn.is_none() {
        builder.desired_model_arn = Some(Default::default())
    }
    if builder.foundation_model_arn.is_none() {
        builder.foundation_model_arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ProvisionedModelStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn list_guardrails_output_output_correct_errors(
    mut builder: crate::operation::list_guardrails::builders::ListGuardrailsOutputBuilder,
) -> crate::operation::list_guardrails::builders::ListGuardrailsOutputBuilder {
    if builder.guardrails.is_none() {
        builder.guardrails = Some(Default::default())
    }
    builder
}

pub(crate) fn update_guardrail_output_output_correct_errors(
    mut builder: crate::operation::update_guardrail::builders::UpdateGuardrailOutputBuilder,
) -> crate::operation::update_guardrail::builders::UpdateGuardrailOutputBuilder {
    if builder.guardrail_id.is_none() {
        builder.guardrail_id = Some(Default::default())
    }
    if builder.guardrail_arn.is_none() {
        builder.guardrail_arn = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn training_data_config_correct_errors(
    mut builder: crate::types::builders::TrainingDataConfigBuilder,
) -> crate::types::builders::TrainingDataConfigBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn output_data_config_correct_errors(
    mut builder: crate::types::builders::OutputDataConfigBuilder,
) -> crate::types::builders::OutputDataConfigBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_output_data_config_correct_errors(
    mut builder: crate::types::builders::EvaluationOutputDataConfigBuilder,
) -> crate::types::builders::EvaluationOutputDataConfigBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_data_config_correct_errors(
    mut builder: crate::types::builders::ValidationDataConfigBuilder,
) -> crate::types::builders::ValidationDataConfigBuilder {
    if builder.validators.is_none() {
        builder.validators = Some(Default::default())
    }
    builder
}

pub(crate) fn foundation_model_details_correct_errors(
    mut builder: crate::types::builders::FoundationModelDetailsBuilder,
) -> crate::types::builders::FoundationModelDetailsBuilder {
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    if builder.model_id.is_none() {
        builder.model_id = Some(Default::default())
    }
    builder
}

pub(crate) fn guardrail_topic_policy_correct_errors(
    mut builder: crate::types::builders::GuardrailTopicPolicyBuilder,
) -> crate::types::builders::GuardrailTopicPolicyBuilder {
    if builder.topics.is_none() {
        builder.topics = Some(Default::default())
    }
    builder
}

pub(crate) fn vpc_config_correct_errors(mut builder: crate::types::builders::VpcConfigBuilder) -> crate::types::builders::VpcConfigBuilder {
    if builder.subnet_ids.is_none() {
        builder.subnet_ids = Some(Default::default())
    }
    if builder.security_group_ids.is_none() {
        builder.security_group_ids = Some(Default::default())
    }
    builder
}

pub(crate) fn automated_evaluation_config_correct_errors(
    mut builder: crate::types::builders::AutomatedEvaluationConfigBuilder,
) -> crate::types::builders::AutomatedEvaluationConfigBuilder {
    if builder.dataset_metric_configs.is_none() {
        builder.dataset_metric_configs = Some(Default::default())
    }
    builder
}

pub(crate) fn cloud_watch_config_correct_errors(
    mut builder: crate::types::builders::CloudWatchConfigBuilder,
) -> crate::types::builders::CloudWatchConfigBuilder {
    if builder.log_group_name.is_none() {
        builder.log_group_name = Some(Default::default())
    }
    if builder.role_arn.is_none() {
        builder.role_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn custom_model_summary_correct_errors(
    mut builder: crate::types::builders::CustomModelSummaryBuilder,
) -> crate::types::builders::CustomModelSummaryBuilder {
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    if builder.model_name.is_none() {
        builder.model_name = Some(Default::default())
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.base_model_arn.is_none() {
        builder.base_model_arn = Some(Default::default())
    }
    if builder.base_model_name.is_none() {
        builder.base_model_name = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_summary_correct_errors(
    mut builder: crate::types::builders::EvaluationSummaryBuilder,
) -> crate::types::builders::EvaluationSummaryBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::EvaluationJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.job_type.is_none() {
        builder.job_type = "no value was set".parse::<crate::types::EvaluationJobType>().ok()
    }
    if builder.evaluation_task_types.is_none() {
        builder.evaluation_task_types = Some(Default::default())
    }
    if builder.model_identifiers.is_none() {
        builder.model_identifiers = Some(Default::default())
    }
    builder
}

pub(crate) fn foundation_model_lifecycle_correct_errors(
    mut builder: crate::types::builders::FoundationModelLifecycleBuilder,
) -> crate::types::builders::FoundationModelLifecycleBuilder {
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::FoundationModelLifecycleStatus>().ok()
    }
    builder
}

pub(crate) fn foundation_model_summary_correct_errors(
    mut builder: crate::types::builders::FoundationModelSummaryBuilder,
) -> crate::types::builders::FoundationModelSummaryBuilder {
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    if builder.model_id.is_none() {
        builder.model_id = Some(Default::default())
    }
    builder
}

pub(crate) fn guardrail_summary_correct_errors(
    mut builder: crate::types::builders::GuardrailSummaryBuilder,
) -> crate::types::builders::GuardrailSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::GuardrailStatus>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.version.is_none() {
        builder.version = Some(Default::default())
    }
    if builder.created_at.is_none() {
        builder.created_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.updated_at.is_none() {
        builder.updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn human_evaluation_config_correct_errors(
    mut builder: crate::types::builders::HumanEvaluationConfigBuilder,
) -> crate::types::builders::HumanEvaluationConfigBuilder {
    if builder.dataset_metric_configs.is_none() {
        builder.dataset_metric_configs = Some(Default::default())
    }
    builder
}

pub(crate) fn model_customization_job_summary_correct_errors(
    mut builder: crate::types::builders::ModelCustomizationJobSummaryBuilder,
) -> crate::types::builders::ModelCustomizationJobSummaryBuilder {
    if builder.job_arn.is_none() {
        builder.job_arn = Some(Default::default())
    }
    if builder.base_model_arn.is_none() {
        builder.base_model_arn = Some(Default::default())
    }
    if builder.job_name.is_none() {
        builder.job_name = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ModelCustomizationJobStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn provisioned_model_summary_correct_errors(
    mut builder: crate::types::builders::ProvisionedModelSummaryBuilder,
) -> crate::types::builders::ProvisionedModelSummaryBuilder {
    if builder.provisioned_model_name.is_none() {
        builder.provisioned_model_name = Some(Default::default())
    }
    if builder.provisioned_model_arn.is_none() {
        builder.provisioned_model_arn = Some(Default::default())
    }
    if builder.model_arn.is_none() {
        builder.model_arn = Some(Default::default())
    }
    if builder.desired_model_arn.is_none() {
        builder.desired_model_arn = Some(Default::default())
    }
    if builder.foundation_model_arn.is_none() {
        builder.foundation_model_arn = Some(Default::default())
    }
    if builder.model_units.is_none() {
        builder.model_units = Some(Default::default())
    }
    if builder.desired_model_units.is_none() {
        builder.desired_model_units = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ProvisionedModelStatus>().ok()
    }
    if builder.creation_time.is_none() {
        builder.creation_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.last_modified_time.is_none() {
        builder.last_modified_time = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    builder
}

pub(crate) fn s3_config_correct_errors(mut builder: crate::types::builders::S3ConfigBuilder) -> crate::types::builders::S3ConfigBuilder {
    if builder.bucket_name.is_none() {
        builder.bucket_name = Some(Default::default())
    }
    builder
}

pub(crate) fn tag_correct_errors(mut builder: crate::types::builders::TagBuilder) -> crate::types::builders::TagBuilder {
    if builder.key.is_none() {
        builder.key = Some(Default::default())
    }
    if builder.value.is_none() {
        builder.value = Some(Default::default())
    }
    builder
}

pub(crate) fn guardrail_content_filter_correct_errors(
    mut builder: crate::types::builders::GuardrailContentFilterBuilder,
) -> crate::types::builders::GuardrailContentFilterBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::GuardrailContentFilterType>().ok()
    }
    if builder.input_strength.is_none() {
        builder.input_strength = "no value was set".parse::<crate::types::GuardrailFilterStrength>().ok()
    }
    if builder.output_strength.is_none() {
        builder.output_strength = "no value was set".parse::<crate::types::GuardrailFilterStrength>().ok()
    }
    builder
}

pub(crate) fn guardrail_managed_words_correct_errors(
    mut builder: crate::types::builders::GuardrailManagedWordsBuilder,
) -> crate::types::builders::GuardrailManagedWordsBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::GuardrailManagedWordsType>().ok()
    }
    builder
}

pub(crate) fn guardrail_pii_entity_correct_errors(
    mut builder: crate::types::builders::GuardrailPiiEntityBuilder,
) -> crate::types::builders::GuardrailPiiEntityBuilder {
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::GuardrailPiiEntityType>().ok()
    }
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::GuardrailSensitiveInformationAction>().ok()
    }
    builder
}

pub(crate) fn guardrail_regex_correct_errors(
    mut builder: crate::types::builders::GuardrailRegexBuilder,
) -> crate::types::builders::GuardrailRegexBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.pattern.is_none() {
        builder.pattern = Some(Default::default())
    }
    if builder.action.is_none() {
        builder.action = "no value was set".parse::<crate::types::GuardrailSensitiveInformationAction>().ok()
    }
    builder
}

pub(crate) fn guardrail_topic_correct_errors(
    mut builder: crate::types::builders::GuardrailTopicBuilder,
) -> crate::types::builders::GuardrailTopicBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.definition.is_none() {
        builder.definition = Some(Default::default())
    }
    builder
}

pub(crate) fn guardrail_word_correct_errors(
    mut builder: crate::types::builders::GuardrailWordBuilder,
) -> crate::types::builders::GuardrailWordBuilder {
    if builder.text.is_none() {
        builder.text = Some(Default::default())
    }
    builder
}

pub(crate) fn human_workflow_config_correct_errors(
    mut builder: crate::types::builders::HumanWorkflowConfigBuilder,
) -> crate::types::builders::HumanWorkflowConfigBuilder {
    if builder.flow_definition_arn.is_none() {
        builder.flow_definition_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn validator_correct_errors(mut builder: crate::types::builders::ValidatorBuilder) -> crate::types::builders::ValidatorBuilder {
    if builder.s3_uri.is_none() {
        builder.s3_uri = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_bedrock_model_correct_errors(
    mut builder: crate::types::builders::EvaluationBedrockModelBuilder,
) -> crate::types::builders::EvaluationBedrockModelBuilder {
    if builder.model_identifier.is_none() {
        builder.model_identifier = Some(Default::default())
    }
    if builder.inference_params.is_none() {
        builder.inference_params = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_dataset_metric_config_correct_errors(
    mut builder: crate::types::builders::EvaluationDatasetMetricConfigBuilder,
) -> crate::types::builders::EvaluationDatasetMetricConfigBuilder {
    if builder.task_type.is_none() {
        builder.task_type = "no value was set".parse::<crate::types::EvaluationTaskType>().ok()
    }
    if builder.dataset.is_none() {
        builder.dataset = {
            let builder = crate::types::builders::EvaluationDatasetBuilder::default();
            crate::serde_util::evaluation_dataset_correct_errors(builder).build().ok()
        }
    }
    if builder.metric_names.is_none() {
        builder.metric_names = Some(Default::default())
    }
    builder
}

pub(crate) fn human_evaluation_custom_metric_correct_errors(
    mut builder: crate::types::builders::HumanEvaluationCustomMetricBuilder,
) -> crate::types::builders::HumanEvaluationCustomMetricBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.rating_method.is_none() {
        builder.rating_method = Some(Default::default())
    }
    builder
}

pub(crate) fn evaluation_dataset_correct_errors(
    mut builder: crate::types::builders::EvaluationDatasetBuilder,
) -> crate::types::builders::EvaluationDatasetBuilder {
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    builder
}
