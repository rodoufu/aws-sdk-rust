// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Used to specify the name of a built-in prompt dataset and optionally, the Amazon S3 bucket where a custom prompt dataset is saved.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct EvaluationDataset {
    /// <p>Used to specify supported built-in prompt datasets. Valid values are <code>Builtin.Bold</code>, <code>Builtin.BoolQ</code>, <code>Builtin.NaturalQuestions</code>, <code>Builtin.Gigaword</code>, <code>Builtin.RealToxicityPrompts</code>, <code>Builtin.TriviaQa</code>, <code>Builtin.T-Rex</code>, <code>Builtin.WomensEcommerceClothingReviews</code> and <code>Builtin.Wikitext2</code>.</p>
    pub name: ::std::string::String,
    /// <p>For custom prompt datasets, you must specify the location in Amazon S3 where the prompt dataset is saved.</p>
    pub dataset_location: ::std::option::Option<crate::types::EvaluationDatasetLocation>,
}
impl EvaluationDataset {
    /// <p>Used to specify supported built-in prompt datasets. Valid values are <code>Builtin.Bold</code>, <code>Builtin.BoolQ</code>, <code>Builtin.NaturalQuestions</code>, <code>Builtin.Gigaword</code>, <code>Builtin.RealToxicityPrompts</code>, <code>Builtin.TriviaQa</code>, <code>Builtin.T-Rex</code>, <code>Builtin.WomensEcommerceClothingReviews</code> and <code>Builtin.Wikitext2</code>.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>For custom prompt datasets, you must specify the location in Amazon S3 where the prompt dataset is saved.</p>
    pub fn dataset_location(&self) -> ::std::option::Option<&crate::types::EvaluationDatasetLocation> {
        self.dataset_location.as_ref()
    }
}
impl ::std::fmt::Debug for EvaluationDataset {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EvaluationDataset");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("dataset_location", &self.dataset_location);
        formatter.finish()
    }
}
impl EvaluationDataset {
    /// Creates a new builder-style object to manufacture [`EvaluationDataset`](crate::types::EvaluationDataset).
    pub fn builder() -> crate::types::builders::EvaluationDatasetBuilder {
        crate::types::builders::EvaluationDatasetBuilder::default()
    }
}

/// A builder for [`EvaluationDataset`](crate::types::EvaluationDataset).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct EvaluationDatasetBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) dataset_location: ::std::option::Option<crate::types::EvaluationDatasetLocation>,
}
impl EvaluationDatasetBuilder {
    /// <p>Used to specify supported built-in prompt datasets. Valid values are <code>Builtin.Bold</code>, <code>Builtin.BoolQ</code>, <code>Builtin.NaturalQuestions</code>, <code>Builtin.Gigaword</code>, <code>Builtin.RealToxicityPrompts</code>, <code>Builtin.TriviaQa</code>, <code>Builtin.T-Rex</code>, <code>Builtin.WomensEcommerceClothingReviews</code> and <code>Builtin.Wikitext2</code>.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Used to specify supported built-in prompt datasets. Valid values are <code>Builtin.Bold</code>, <code>Builtin.BoolQ</code>, <code>Builtin.NaturalQuestions</code>, <code>Builtin.Gigaword</code>, <code>Builtin.RealToxicityPrompts</code>, <code>Builtin.TriviaQa</code>, <code>Builtin.T-Rex</code>, <code>Builtin.WomensEcommerceClothingReviews</code> and <code>Builtin.Wikitext2</code>.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>Used to specify supported built-in prompt datasets. Valid values are <code>Builtin.Bold</code>, <code>Builtin.BoolQ</code>, <code>Builtin.NaturalQuestions</code>, <code>Builtin.Gigaword</code>, <code>Builtin.RealToxicityPrompts</code>, <code>Builtin.TriviaQa</code>, <code>Builtin.T-Rex</code>, <code>Builtin.WomensEcommerceClothingReviews</code> and <code>Builtin.Wikitext2</code>.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>For custom prompt datasets, you must specify the location in Amazon S3 where the prompt dataset is saved.</p>
    pub fn dataset_location(mut self, input: crate::types::EvaluationDatasetLocation) -> Self {
        self.dataset_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>For custom prompt datasets, you must specify the location in Amazon S3 where the prompt dataset is saved.</p>
    pub fn set_dataset_location(mut self, input: ::std::option::Option<crate::types::EvaluationDatasetLocation>) -> Self {
        self.dataset_location = input;
        self
    }
    /// <p>For custom prompt datasets, you must specify the location in Amazon S3 where the prompt dataset is saved.</p>
    pub fn get_dataset_location(&self) -> &::std::option::Option<crate::types::EvaluationDatasetLocation> {
        &self.dataset_location
    }
    /// Consumes the builder and constructs a [`EvaluationDataset`](crate::types::EvaluationDataset).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::EvaluationDatasetBuilder::name)
    pub fn build(self) -> ::std::result::Result<crate::types::EvaluationDataset, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::EvaluationDataset {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building EvaluationDataset",
                )
            })?,
            dataset_location: self.dataset_location,
        })
    }
}
impl ::std::fmt::Debug for EvaluationDatasetBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("EvaluationDatasetBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("dataset_location", &self.dataset_location);
        formatter.finish()
    }
}
