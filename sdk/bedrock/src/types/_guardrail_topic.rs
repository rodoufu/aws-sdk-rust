// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Details about topics for the guardrail to identify and deny.</p>
/// <p>This data type is used in the following API operations:</p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_GetGuardrail.html#API_GetGuardrail_ResponseSyntax">GetGuardrail response body</a></p></li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct GuardrailTopic {
    /// <p>The name of the topic to deny.</p>
    pub name: ::std::string::String,
    /// <p>A definition of the topic to deny.</p>
    pub definition: ::std::string::String,
    /// <p>A list of prompts, each of which is an example of a prompt that can be categorized as belonging to the topic.</p>
    pub examples: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>Specifies to deny the topic.</p>
    pub r#type: ::std::option::Option<crate::types::GuardrailTopicType>,
}
impl GuardrailTopic {
    /// <p>The name of the topic to deny.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>A definition of the topic to deny.</p>
    pub fn definition(&self) -> &str {
        use std::ops::Deref;
        self.definition.deref()
    }
    /// <p>A list of prompts, each of which is an example of a prompt that can be categorized as belonging to the topic.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.examples.is_none()`.
    pub fn examples(&self) -> &[::std::string::String] {
        self.examples.as_deref().unwrap_or_default()
    }
    /// <p>Specifies to deny the topic.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::GuardrailTopicType> {
        self.r#type.as_ref()
    }
}
impl ::std::fmt::Debug for GuardrailTopic {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailTopic");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("definition", &"*** Sensitive Data Redacted ***");
        formatter.field("examples", &self.examples);
        formatter.field("r#type", &self.r#type);
        formatter.finish()
    }
}
impl GuardrailTopic {
    /// Creates a new builder-style object to manufacture [`GuardrailTopic`](crate::types::GuardrailTopic).
    pub fn builder() -> crate::types::builders::GuardrailTopicBuilder {
        crate::types::builders::GuardrailTopicBuilder::default()
    }
}

/// A builder for [`GuardrailTopic`](crate::types::GuardrailTopic).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct GuardrailTopicBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) definition: ::std::option::Option<::std::string::String>,
    pub(crate) examples: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) r#type: ::std::option::Option<crate::types::GuardrailTopicType>,
}
impl GuardrailTopicBuilder {
    /// <p>The name of the topic to deny.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the topic to deny.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the topic to deny.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>A definition of the topic to deny.</p>
    /// This field is required.
    pub fn definition(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.definition = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A definition of the topic to deny.</p>
    pub fn set_definition(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.definition = input;
        self
    }
    /// <p>A definition of the topic to deny.</p>
    pub fn get_definition(&self) -> &::std::option::Option<::std::string::String> {
        &self.definition
    }
    /// Appends an item to `examples`.
    ///
    /// To override the contents of this collection use [`set_examples`](Self::set_examples).
    ///
    /// <p>A list of prompts, each of which is an example of a prompt that can be categorized as belonging to the topic.</p>
    pub fn examples(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.examples.unwrap_or_default();
        v.push(input.into());
        self.examples = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of prompts, each of which is an example of a prompt that can be categorized as belonging to the topic.</p>
    pub fn set_examples(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.examples = input;
        self
    }
    /// <p>A list of prompts, each of which is an example of a prompt that can be categorized as belonging to the topic.</p>
    pub fn get_examples(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.examples
    }
    /// <p>Specifies to deny the topic.</p>
    pub fn r#type(mut self, input: crate::types::GuardrailTopicType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>Specifies to deny the topic.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::GuardrailTopicType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>Specifies to deny the topic.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::GuardrailTopicType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`GuardrailTopic`](crate::types::GuardrailTopic).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::GuardrailTopicBuilder::name)
    /// - [`definition`](crate::types::builders::GuardrailTopicBuilder::definition)
    pub fn build(self) -> ::std::result::Result<crate::types::GuardrailTopic, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::GuardrailTopic {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building GuardrailTopic",
                )
            })?,
            definition: self.definition.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "definition",
                    "definition was not specified but it is required when building GuardrailTopic",
                )
            })?,
            examples: self.examples,
            r#type: self.r#type,
        })
    }
}
impl ::std::fmt::Debug for GuardrailTopicBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("GuardrailTopicBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("definition", &"*** Sensitive Data Redacted ***");
        formatter.field("examples", &self.examples);
        formatter.field("r#type", &self.r#type);
        formatter.finish()
    }
}
