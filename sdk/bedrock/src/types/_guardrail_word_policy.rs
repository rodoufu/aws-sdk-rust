// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the word policy configured for the guardrail.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GuardrailWordPolicy {
    /// <p>A list of words configured for the guardrail.</p>
    pub words: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailWord>>,
    /// <p>A list of managed words configured for the guardrail.</p>
    pub managed_word_lists: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailManagedWords>>,
}
impl GuardrailWordPolicy {
    /// <p>A list of words configured for the guardrail.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.words.is_none()`.
    pub fn words(&self) -> &[crate::types::GuardrailWord] {
        self.words.as_deref().unwrap_or_default()
    }
    /// <p>A list of managed words configured for the guardrail.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.managed_word_lists.is_none()`.
    pub fn managed_word_lists(&self) -> &[crate::types::GuardrailManagedWords] {
        self.managed_word_lists.as_deref().unwrap_or_default()
    }
}
impl GuardrailWordPolicy {
    /// Creates a new builder-style object to manufacture [`GuardrailWordPolicy`](crate::types::GuardrailWordPolicy).
    pub fn builder() -> crate::types::builders::GuardrailWordPolicyBuilder {
        crate::types::builders::GuardrailWordPolicyBuilder::default()
    }
}

/// A builder for [`GuardrailWordPolicy`](crate::types::GuardrailWordPolicy).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GuardrailWordPolicyBuilder {
    pub(crate) words: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailWord>>,
    pub(crate) managed_word_lists: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailManagedWords>>,
}
impl GuardrailWordPolicyBuilder {
    /// Appends an item to `words`.
    ///
    /// To override the contents of this collection use [`set_words`](Self::set_words).
    ///
    /// <p>A list of words configured for the guardrail.</p>
    pub fn words(mut self, input: crate::types::GuardrailWord) -> Self {
        let mut v = self.words.unwrap_or_default();
        v.push(input);
        self.words = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of words configured for the guardrail.</p>
    pub fn set_words(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailWord>>) -> Self {
        self.words = input;
        self
    }
    /// <p>A list of words configured for the guardrail.</p>
    pub fn get_words(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GuardrailWord>> {
        &self.words
    }
    /// Appends an item to `managed_word_lists`.
    ///
    /// To override the contents of this collection use [`set_managed_word_lists`](Self::set_managed_word_lists).
    ///
    /// <p>A list of managed words configured for the guardrail.</p>
    pub fn managed_word_lists(mut self, input: crate::types::GuardrailManagedWords) -> Self {
        let mut v = self.managed_word_lists.unwrap_or_default();
        v.push(input);
        self.managed_word_lists = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of managed words configured for the guardrail.</p>
    pub fn set_managed_word_lists(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailManagedWords>>) -> Self {
        self.managed_word_lists = input;
        self
    }
    /// <p>A list of managed words configured for the guardrail.</p>
    pub fn get_managed_word_lists(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GuardrailManagedWords>> {
        &self.managed_word_lists
    }
    /// Consumes the builder and constructs a [`GuardrailWordPolicy`](crate::types::GuardrailWordPolicy).
    pub fn build(self) -> crate::types::GuardrailWordPolicy {
        crate::types::GuardrailWordPolicy {
            words: self.words,
            managed_word_lists: self.managed_word_lists,
        }
    }
}
