// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains details about the word policy to configured for the guardrail.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct GuardrailWordPolicyConfig {
    /// <p>A list of words to configure for the guardrail.</p>
    pub words_config: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailWordConfig>>,
    /// <p>A list of managed words to configure for the guardrail.</p>
    pub managed_word_lists_config: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailManagedWordsConfig>>,
}
impl GuardrailWordPolicyConfig {
    /// <p>A list of words to configure for the guardrail.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.words_config.is_none()`.
    pub fn words_config(&self) -> &[crate::types::GuardrailWordConfig] {
        self.words_config.as_deref().unwrap_or_default()
    }
    /// <p>A list of managed words to configure for the guardrail.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.managed_word_lists_config.is_none()`.
    pub fn managed_word_lists_config(&self) -> &[crate::types::GuardrailManagedWordsConfig] {
        self.managed_word_lists_config.as_deref().unwrap_or_default()
    }
}
impl GuardrailWordPolicyConfig {
    /// Creates a new builder-style object to manufacture [`GuardrailWordPolicyConfig`](crate::types::GuardrailWordPolicyConfig).
    pub fn builder() -> crate::types::builders::GuardrailWordPolicyConfigBuilder {
        crate::types::builders::GuardrailWordPolicyConfigBuilder::default()
    }
}

/// A builder for [`GuardrailWordPolicyConfig`](crate::types::GuardrailWordPolicyConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct GuardrailWordPolicyConfigBuilder {
    pub(crate) words_config: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailWordConfig>>,
    pub(crate) managed_word_lists_config: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailManagedWordsConfig>>,
}
impl GuardrailWordPolicyConfigBuilder {
    /// Appends an item to `words_config`.
    ///
    /// To override the contents of this collection use [`set_words_config`](Self::set_words_config).
    ///
    /// <p>A list of words to configure for the guardrail.</p>
    pub fn words_config(mut self, input: crate::types::GuardrailWordConfig) -> Self {
        let mut v = self.words_config.unwrap_or_default();
        v.push(input);
        self.words_config = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of words to configure for the guardrail.</p>
    pub fn set_words_config(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailWordConfig>>) -> Self {
        self.words_config = input;
        self
    }
    /// <p>A list of words to configure for the guardrail.</p>
    pub fn get_words_config(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GuardrailWordConfig>> {
        &self.words_config
    }
    /// Appends an item to `managed_word_lists_config`.
    ///
    /// To override the contents of this collection use [`set_managed_word_lists_config`](Self::set_managed_word_lists_config).
    ///
    /// <p>A list of managed words to configure for the guardrail.</p>
    pub fn managed_word_lists_config(mut self, input: crate::types::GuardrailManagedWordsConfig) -> Self {
        let mut v = self.managed_word_lists_config.unwrap_or_default();
        v.push(input);
        self.managed_word_lists_config = ::std::option::Option::Some(v);
        self
    }
    /// <p>A list of managed words to configure for the guardrail.</p>
    pub fn set_managed_word_lists_config(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::GuardrailManagedWordsConfig>>) -> Self {
        self.managed_word_lists_config = input;
        self
    }
    /// <p>A list of managed words to configure for the guardrail.</p>
    pub fn get_managed_word_lists_config(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::GuardrailManagedWordsConfig>> {
        &self.managed_word_lists_config
    }
    /// Consumes the builder and constructs a [`GuardrailWordPolicyConfig`](crate::types::GuardrailWordPolicyConfig).
    pub fn build(self) -> crate::types::GuardrailWordPolicyConfig {
        crate::types::GuardrailWordPolicyConfig {
            words_config: self.words_config,
            managed_word_lists_config: self.managed_word_lists_config,
        }
    }
}
