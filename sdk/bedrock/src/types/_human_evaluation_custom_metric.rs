// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>In a model evaluation job that uses human workers you must define the name of the metric, and how you want that metric rated <code>ratingMethod</code>, and an optional description of the metric.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct HumanEvaluationCustomMetric {
    /// <p>The name of the metric. Your human evaluators will see this name in the evaluation UI.</p>
    pub name: ::std::string::String,
    /// <p>An optional description of the metric. Use this parameter to provide more details about the metric.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>Choose how you want your human workers to evaluation your model. Valid values for rating methods are <code>ThumbsUpDown</code>, <code>IndividualLikertScale</code>,<code>ComparisonLikertScale</code>, <code>ComparisonChoice</code>, and <code>ComparisonRank</code></p>
    pub rating_method: ::std::string::String,
}
impl HumanEvaluationCustomMetric {
    /// <p>The name of the metric. Your human evaluators will see this name in the evaluation UI.</p>
    pub fn name(&self) -> &str {
        use std::ops::Deref;
        self.name.deref()
    }
    /// <p>An optional description of the metric. Use this parameter to provide more details about the metric.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>Choose how you want your human workers to evaluation your model. Valid values for rating methods are <code>ThumbsUpDown</code>, <code>IndividualLikertScale</code>,<code>ComparisonLikertScale</code>, <code>ComparisonChoice</code>, and <code>ComparisonRank</code></p>
    pub fn rating_method(&self) -> &str {
        use std::ops::Deref;
        self.rating_method.deref()
    }
}
impl ::std::fmt::Debug for HumanEvaluationCustomMetric {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("HumanEvaluationCustomMetric");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("rating_method", &self.rating_method);
        formatter.finish()
    }
}
impl HumanEvaluationCustomMetric {
    /// Creates a new builder-style object to manufacture [`HumanEvaluationCustomMetric`](crate::types::HumanEvaluationCustomMetric).
    pub fn builder() -> crate::types::builders::HumanEvaluationCustomMetricBuilder {
        crate::types::builders::HumanEvaluationCustomMetricBuilder::default()
    }
}

/// A builder for [`HumanEvaluationCustomMetric`](crate::types::HumanEvaluationCustomMetric).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct HumanEvaluationCustomMetricBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) rating_method: ::std::option::Option<::std::string::String>,
}
impl HumanEvaluationCustomMetricBuilder {
    /// <p>The name of the metric. Your human evaluators will see this name in the evaluation UI.</p>
    /// This field is required.
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the metric. Your human evaluators will see this name in the evaluation UI.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The name of the metric. Your human evaluators will see this name in the evaluation UI.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>An optional description of the metric. Use this parameter to provide more details about the metric.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>An optional description of the metric. Use this parameter to provide more details about the metric.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>An optional description of the metric. Use this parameter to provide more details about the metric.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>Choose how you want your human workers to evaluation your model. Valid values for rating methods are <code>ThumbsUpDown</code>, <code>IndividualLikertScale</code>,<code>ComparisonLikertScale</code>, <code>ComparisonChoice</code>, and <code>ComparisonRank</code></p>
    /// This field is required.
    pub fn rating_method(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.rating_method = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Choose how you want your human workers to evaluation your model. Valid values for rating methods are <code>ThumbsUpDown</code>, <code>IndividualLikertScale</code>,<code>ComparisonLikertScale</code>, <code>ComparisonChoice</code>, and <code>ComparisonRank</code></p>
    pub fn set_rating_method(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.rating_method = input;
        self
    }
    /// <p>Choose how you want your human workers to evaluation your model. Valid values for rating methods are <code>ThumbsUpDown</code>, <code>IndividualLikertScale</code>,<code>ComparisonLikertScale</code>, <code>ComparisonChoice</code>, and <code>ComparisonRank</code></p>
    pub fn get_rating_method(&self) -> &::std::option::Option<::std::string::String> {
        &self.rating_method
    }
    /// Consumes the builder and constructs a [`HumanEvaluationCustomMetric`](crate::types::HumanEvaluationCustomMetric).
    /// This method will fail if any of the following fields are not set:
    /// - [`name`](crate::types::builders::HumanEvaluationCustomMetricBuilder::name)
    /// - [`rating_method`](crate::types::builders::HumanEvaluationCustomMetricBuilder::rating_method)
    pub fn build(self) -> ::std::result::Result<crate::types::HumanEvaluationCustomMetric, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::HumanEvaluationCustomMetric {
            name: self.name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "name",
                    "name was not specified but it is required when building HumanEvaluationCustomMetric",
                )
            })?,
            description: self.description,
            rating_method: self.rating_method.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "rating_method",
                    "rating_method was not specified but it is required when building HumanEvaluationCustomMetric",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for HumanEvaluationCustomMetricBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("HumanEvaluationCustomMetricBuilder");
        formatter.field("name", &"*** Sensitive Data Redacted ***");
        formatter.field("description", &"*** Sensitive Data Redacted ***");
        formatter.field("rating_method", &self.rating_method);
        formatter.finish()
    }
}
