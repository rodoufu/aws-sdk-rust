// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configuration fields for invocation logging.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LoggingConfig {
    /// <p>CloudWatch logging configuration.</p>
    pub cloud_watch_config: ::std::option::Option<crate::types::CloudWatchConfig>,
    /// <p>S3 configuration for storing log data.</p>
    pub s3_config: ::std::option::Option<crate::types::S3Config>,
    /// <p>Set to include text data in the log delivery.</p>
    pub text_data_delivery_enabled: ::std::option::Option<bool>,
    /// <p>Set to include image data in the log delivery.</p>
    pub image_data_delivery_enabled: ::std::option::Option<bool>,
    /// <p>Set to include embeddings data in the log delivery.</p>
    pub embedding_data_delivery_enabled: ::std::option::Option<bool>,
}
impl LoggingConfig {
    /// <p>CloudWatch logging configuration.</p>
    pub fn cloud_watch_config(&self) -> ::std::option::Option<&crate::types::CloudWatchConfig> {
        self.cloud_watch_config.as_ref()
    }
    /// <p>S3 configuration for storing log data.</p>
    pub fn s3_config(&self) -> ::std::option::Option<&crate::types::S3Config> {
        self.s3_config.as_ref()
    }
    /// <p>Set to include text data in the log delivery.</p>
    pub fn text_data_delivery_enabled(&self) -> ::std::option::Option<bool> {
        self.text_data_delivery_enabled
    }
    /// <p>Set to include image data in the log delivery.</p>
    pub fn image_data_delivery_enabled(&self) -> ::std::option::Option<bool> {
        self.image_data_delivery_enabled
    }
    /// <p>Set to include embeddings data in the log delivery.</p>
    pub fn embedding_data_delivery_enabled(&self) -> ::std::option::Option<bool> {
        self.embedding_data_delivery_enabled
    }
}
impl LoggingConfig {
    /// Creates a new builder-style object to manufacture [`LoggingConfig`](crate::types::LoggingConfig).
    pub fn builder() -> crate::types::builders::LoggingConfigBuilder {
        crate::types::builders::LoggingConfigBuilder::default()
    }
}

/// A builder for [`LoggingConfig`](crate::types::LoggingConfig).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LoggingConfigBuilder {
    pub(crate) cloud_watch_config: ::std::option::Option<crate::types::CloudWatchConfig>,
    pub(crate) s3_config: ::std::option::Option<crate::types::S3Config>,
    pub(crate) text_data_delivery_enabled: ::std::option::Option<bool>,
    pub(crate) image_data_delivery_enabled: ::std::option::Option<bool>,
    pub(crate) embedding_data_delivery_enabled: ::std::option::Option<bool>,
}
impl LoggingConfigBuilder {
    /// <p>CloudWatch logging configuration.</p>
    pub fn cloud_watch_config(mut self, input: crate::types::CloudWatchConfig) -> Self {
        self.cloud_watch_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>CloudWatch logging configuration.</p>
    pub fn set_cloud_watch_config(mut self, input: ::std::option::Option<crate::types::CloudWatchConfig>) -> Self {
        self.cloud_watch_config = input;
        self
    }
    /// <p>CloudWatch logging configuration.</p>
    pub fn get_cloud_watch_config(&self) -> &::std::option::Option<crate::types::CloudWatchConfig> {
        &self.cloud_watch_config
    }
    /// <p>S3 configuration for storing log data.</p>
    pub fn s3_config(mut self, input: crate::types::S3Config) -> Self {
        self.s3_config = ::std::option::Option::Some(input);
        self
    }
    /// <p>S3 configuration for storing log data.</p>
    pub fn set_s3_config(mut self, input: ::std::option::Option<crate::types::S3Config>) -> Self {
        self.s3_config = input;
        self
    }
    /// <p>S3 configuration for storing log data.</p>
    pub fn get_s3_config(&self) -> &::std::option::Option<crate::types::S3Config> {
        &self.s3_config
    }
    /// <p>Set to include text data in the log delivery.</p>
    pub fn text_data_delivery_enabled(mut self, input: bool) -> Self {
        self.text_data_delivery_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Set to include text data in the log delivery.</p>
    pub fn set_text_data_delivery_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.text_data_delivery_enabled = input;
        self
    }
    /// <p>Set to include text data in the log delivery.</p>
    pub fn get_text_data_delivery_enabled(&self) -> &::std::option::Option<bool> {
        &self.text_data_delivery_enabled
    }
    /// <p>Set to include image data in the log delivery.</p>
    pub fn image_data_delivery_enabled(mut self, input: bool) -> Self {
        self.image_data_delivery_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Set to include image data in the log delivery.</p>
    pub fn set_image_data_delivery_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.image_data_delivery_enabled = input;
        self
    }
    /// <p>Set to include image data in the log delivery.</p>
    pub fn get_image_data_delivery_enabled(&self) -> &::std::option::Option<bool> {
        &self.image_data_delivery_enabled
    }
    /// <p>Set to include embeddings data in the log delivery.</p>
    pub fn embedding_data_delivery_enabled(mut self, input: bool) -> Self {
        self.embedding_data_delivery_enabled = ::std::option::Option::Some(input);
        self
    }
    /// <p>Set to include embeddings data in the log delivery.</p>
    pub fn set_embedding_data_delivery_enabled(mut self, input: ::std::option::Option<bool>) -> Self {
        self.embedding_data_delivery_enabled = input;
        self
    }
    /// <p>Set to include embeddings data in the log delivery.</p>
    pub fn get_embedding_data_delivery_enabled(&self) -> &::std::option::Option<bool> {
        &self.embedding_data_delivery_enabled
    }
    /// Consumes the builder and constructs a [`LoggingConfig`](crate::types::LoggingConfig).
    pub fn build(self) -> crate::types::LoggingConfig {
        crate::types::LoggingConfig {
            cloud_watch_config: self.cloud_watch_config,
            s3_config: self.s3_config,
            text_data_delivery_enabled: self.text_data_delivery_enabled,
            image_data_delivery_enabled: self.image_data_delivery_enabled,
            embedding_data_delivery_enabled: self.embedding_data_delivery_enabled,
        }
    }
}
