// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>A summary of information about a Provisioned Throughput.</p>
/// <p>This data type is used in the following API operations:</p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/bedrock/latest/APIReference/API_ListProvisionedModelThroughputs.html#API_ListProvisionedModelThroughputs_ResponseSyntax">ListProvisionedThroughputs response</a></p></li>
/// </ul>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ProvisionedModelSummary {
    /// <p>The name of the Provisioned Throughput.</p>
    pub provisioned_model_name: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the Provisioned Throughput.</p>
    pub provisioned_model_arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the model associated with the Provisioned Throughput.</p>
    pub model_arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the model requested to be associated to this Provisioned Throughput. This value differs from the <code>modelArn</code> if updating hasn't completed.</p>
    pub desired_model_arn: ::std::string::String,
    /// <p>The Amazon Resource Name (ARN) of the base model for which the Provisioned Throughput was created, or of the base model that the custom model for which the Provisioned Throughput was created was customized.</p>
    pub foundation_model_arn: ::std::string::String,
    /// <p>The number of model units allocated to the Provisioned Throughput.</p>
    pub model_units: i32,
    /// <p>The number of model units that was requested to be allocated to the Provisioned Throughput.</p>
    pub desired_model_units: i32,
    /// <p>The status of the Provisioned Throughput.</p>
    pub status: crate::types::ProvisionedModelStatus,
    /// <p>The duration for which the Provisioned Throughput was committed.</p>
    pub commitment_duration: ::std::option::Option<crate::types::CommitmentDuration>,
    /// <p>The timestamp for when the commitment term of the Provisioned Throughput expires.</p>
    pub commitment_expiration_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The time that the Provisioned Throughput was created.</p>
    pub creation_time: ::aws_smithy_types::DateTime,
    /// <p>The time that the Provisioned Throughput was last modified.</p>
    pub last_modified_time: ::aws_smithy_types::DateTime,
}
impl ProvisionedModelSummary {
    /// <p>The name of the Provisioned Throughput.</p>
    pub fn provisioned_model_name(&self) -> &str {
        use std::ops::Deref;
        self.provisioned_model_name.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the Provisioned Throughput.</p>
    pub fn provisioned_model_arn(&self) -> &str {
        use std::ops::Deref;
        self.provisioned_model_arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the model associated with the Provisioned Throughput.</p>
    pub fn model_arn(&self) -> &str {
        use std::ops::Deref;
        self.model_arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the model requested to be associated to this Provisioned Throughput. This value differs from the <code>modelArn</code> if updating hasn't completed.</p>
    pub fn desired_model_arn(&self) -> &str {
        use std::ops::Deref;
        self.desired_model_arn.deref()
    }
    /// <p>The Amazon Resource Name (ARN) of the base model for which the Provisioned Throughput was created, or of the base model that the custom model for which the Provisioned Throughput was created was customized.</p>
    pub fn foundation_model_arn(&self) -> &str {
        use std::ops::Deref;
        self.foundation_model_arn.deref()
    }
    /// <p>The number of model units allocated to the Provisioned Throughput.</p>
    pub fn model_units(&self) -> i32 {
        self.model_units
    }
    /// <p>The number of model units that was requested to be allocated to the Provisioned Throughput.</p>
    pub fn desired_model_units(&self) -> i32 {
        self.desired_model_units
    }
    /// <p>The status of the Provisioned Throughput.</p>
    pub fn status(&self) -> &crate::types::ProvisionedModelStatus {
        &self.status
    }
    /// <p>The duration for which the Provisioned Throughput was committed.</p>
    pub fn commitment_duration(&self) -> ::std::option::Option<&crate::types::CommitmentDuration> {
        self.commitment_duration.as_ref()
    }
    /// <p>The timestamp for when the commitment term of the Provisioned Throughput expires.</p>
    pub fn commitment_expiration_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.commitment_expiration_time.as_ref()
    }
    /// <p>The time that the Provisioned Throughput was created.</p>
    pub fn creation_time(&self) -> &::aws_smithy_types::DateTime {
        &self.creation_time
    }
    /// <p>The time that the Provisioned Throughput was last modified.</p>
    pub fn last_modified_time(&self) -> &::aws_smithy_types::DateTime {
        &self.last_modified_time
    }
}
impl ProvisionedModelSummary {
    /// Creates a new builder-style object to manufacture [`ProvisionedModelSummary`](crate::types::ProvisionedModelSummary).
    pub fn builder() -> crate::types::builders::ProvisionedModelSummaryBuilder {
        crate::types::builders::ProvisionedModelSummaryBuilder::default()
    }
}

/// A builder for [`ProvisionedModelSummary`](crate::types::ProvisionedModelSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ProvisionedModelSummaryBuilder {
    pub(crate) provisioned_model_name: ::std::option::Option<::std::string::String>,
    pub(crate) provisioned_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) desired_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) foundation_model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) model_units: ::std::option::Option<i32>,
    pub(crate) desired_model_units: ::std::option::Option<i32>,
    pub(crate) status: ::std::option::Option<crate::types::ProvisionedModelStatus>,
    pub(crate) commitment_duration: ::std::option::Option<crate::types::CommitmentDuration>,
    pub(crate) commitment_expiration_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_modified_time: ::std::option::Option<::aws_smithy_types::DateTime>,
}
impl ProvisionedModelSummaryBuilder {
    /// <p>The name of the Provisioned Throughput.</p>
    /// This field is required.
    pub fn provisioned_model_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provisioned_model_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the Provisioned Throughput.</p>
    pub fn set_provisioned_model_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provisioned_model_name = input;
        self
    }
    /// <p>The name of the Provisioned Throughput.</p>
    pub fn get_provisioned_model_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.provisioned_model_name
    }
    /// <p>The Amazon Resource Name (ARN) of the Provisioned Throughput.</p>
    /// This field is required.
    pub fn provisioned_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.provisioned_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Provisioned Throughput.</p>
    pub fn set_provisioned_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.provisioned_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the Provisioned Throughput.</p>
    pub fn get_provisioned_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.provisioned_model_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the model associated with the Provisioned Throughput.</p>
    /// This field is required.
    pub fn model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model associated with the Provisioned Throughput.</p>
    pub fn set_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model associated with the Provisioned Throughput.</p>
    pub fn get_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the model requested to be associated to this Provisioned Throughput. This value differs from the <code>modelArn</code> if updating hasn't completed.</p>
    /// This field is required.
    pub fn desired_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.desired_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model requested to be associated to this Provisioned Throughput. This value differs from the <code>modelArn</code> if updating hasn't completed.</p>
    pub fn set_desired_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.desired_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the model requested to be associated to this Provisioned Throughput. This value differs from the <code>modelArn</code> if updating hasn't completed.</p>
    pub fn get_desired_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.desired_model_arn
    }
    /// <p>The Amazon Resource Name (ARN) of the base model for which the Provisioned Throughput was created, or of the base model that the custom model for which the Provisioned Throughput was created was customized.</p>
    /// This field is required.
    pub fn foundation_model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.foundation_model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the base model for which the Provisioned Throughput was created, or of the base model that the custom model for which the Provisioned Throughput was created was customized.</p>
    pub fn set_foundation_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.foundation_model_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (ARN) of the base model for which the Provisioned Throughput was created, or of the base model that the custom model for which the Provisioned Throughput was created was customized.</p>
    pub fn get_foundation_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.foundation_model_arn
    }
    /// <p>The number of model units allocated to the Provisioned Throughput.</p>
    /// This field is required.
    pub fn model_units(mut self, input: i32) -> Self {
        self.model_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of model units allocated to the Provisioned Throughput.</p>
    pub fn set_model_units(mut self, input: ::std::option::Option<i32>) -> Self {
        self.model_units = input;
        self
    }
    /// <p>The number of model units allocated to the Provisioned Throughput.</p>
    pub fn get_model_units(&self) -> &::std::option::Option<i32> {
        &self.model_units
    }
    /// <p>The number of model units that was requested to be allocated to the Provisioned Throughput.</p>
    /// This field is required.
    pub fn desired_model_units(mut self, input: i32) -> Self {
        self.desired_model_units = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of model units that was requested to be allocated to the Provisioned Throughput.</p>
    pub fn set_desired_model_units(mut self, input: ::std::option::Option<i32>) -> Self {
        self.desired_model_units = input;
        self
    }
    /// <p>The number of model units that was requested to be allocated to the Provisioned Throughput.</p>
    pub fn get_desired_model_units(&self) -> &::std::option::Option<i32> {
        &self.desired_model_units
    }
    /// <p>The status of the Provisioned Throughput.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ProvisionedModelStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the Provisioned Throughput.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ProvisionedModelStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the Provisioned Throughput.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ProvisionedModelStatus> {
        &self.status
    }
    /// <p>The duration for which the Provisioned Throughput was committed.</p>
    pub fn commitment_duration(mut self, input: crate::types::CommitmentDuration) -> Self {
        self.commitment_duration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The duration for which the Provisioned Throughput was committed.</p>
    pub fn set_commitment_duration(mut self, input: ::std::option::Option<crate::types::CommitmentDuration>) -> Self {
        self.commitment_duration = input;
        self
    }
    /// <p>The duration for which the Provisioned Throughput was committed.</p>
    pub fn get_commitment_duration(&self) -> &::std::option::Option<crate::types::CommitmentDuration> {
        &self.commitment_duration
    }
    /// <p>The timestamp for when the commitment term of the Provisioned Throughput expires.</p>
    pub fn commitment_expiration_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.commitment_expiration_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for when the commitment term of the Provisioned Throughput expires.</p>
    pub fn set_commitment_expiration_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.commitment_expiration_time = input;
        self
    }
    /// <p>The timestamp for when the commitment term of the Provisioned Throughput expires.</p>
    pub fn get_commitment_expiration_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.commitment_expiration_time
    }
    /// <p>The time that the Provisioned Throughput was created.</p>
    /// This field is required.
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the Provisioned Throughput was created.</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>The time that the Provisioned Throughput was created.</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The time that the Provisioned Throughput was last modified.</p>
    /// This field is required.
    pub fn last_modified_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_modified_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time that the Provisioned Throughput was last modified.</p>
    pub fn set_last_modified_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_modified_time = input;
        self
    }
    /// <p>The time that the Provisioned Throughput was last modified.</p>
    pub fn get_last_modified_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_modified_time
    }
    /// Consumes the builder and constructs a [`ProvisionedModelSummary`](crate::types::ProvisionedModelSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`provisioned_model_name`](crate::types::builders::ProvisionedModelSummaryBuilder::provisioned_model_name)
    /// - [`provisioned_model_arn`](crate::types::builders::ProvisionedModelSummaryBuilder::provisioned_model_arn)
    /// - [`model_arn`](crate::types::builders::ProvisionedModelSummaryBuilder::model_arn)
    /// - [`desired_model_arn`](crate::types::builders::ProvisionedModelSummaryBuilder::desired_model_arn)
    /// - [`foundation_model_arn`](crate::types::builders::ProvisionedModelSummaryBuilder::foundation_model_arn)
    /// - [`model_units`](crate::types::builders::ProvisionedModelSummaryBuilder::model_units)
    /// - [`desired_model_units`](crate::types::builders::ProvisionedModelSummaryBuilder::desired_model_units)
    /// - [`status`](crate::types::builders::ProvisionedModelSummaryBuilder::status)
    /// - [`creation_time`](crate::types::builders::ProvisionedModelSummaryBuilder::creation_time)
    /// - [`last_modified_time`](crate::types::builders::ProvisionedModelSummaryBuilder::last_modified_time)
    pub fn build(self) -> ::std::result::Result<crate::types::ProvisionedModelSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ProvisionedModelSummary {
            provisioned_model_name: self.provisioned_model_name.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "provisioned_model_name",
                    "provisioned_model_name was not specified but it is required when building ProvisionedModelSummary",
                )
            })?,
            provisioned_model_arn: self.provisioned_model_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "provisioned_model_arn",
                    "provisioned_model_arn was not specified but it is required when building ProvisionedModelSummary",
                )
            })?,
            model_arn: self.model_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "model_arn",
                    "model_arn was not specified but it is required when building ProvisionedModelSummary",
                )
            })?,
            desired_model_arn: self.desired_model_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "desired_model_arn",
                    "desired_model_arn was not specified but it is required when building ProvisionedModelSummary",
                )
            })?,
            foundation_model_arn: self.foundation_model_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "foundation_model_arn",
                    "foundation_model_arn was not specified but it is required when building ProvisionedModelSummary",
                )
            })?,
            model_units: self.model_units.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "model_units",
                    "model_units was not specified but it is required when building ProvisionedModelSummary",
                )
            })?,
            desired_model_units: self.desired_model_units.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "desired_model_units",
                    "desired_model_units was not specified but it is required when building ProvisionedModelSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building ProvisionedModelSummary",
                )
            })?,
            commitment_duration: self.commitment_duration,
            commitment_expiration_time: self.commitment_expiration_time,
            creation_time: self.creation_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "creation_time",
                    "creation_time was not specified but it is required when building ProvisionedModelSummary",
                )
            })?,
            last_modified_time: self.last_modified_time.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_modified_time",
                    "last_modified_time was not specified but it is required when building ProvisionedModelSummary",
                )
            })?,
        })
    }
}
