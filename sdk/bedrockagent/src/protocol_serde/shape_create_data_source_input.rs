// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn ser_create_data_source_input_input(
    object: &mut ::aws_smithy_json::serialize::JsonObjectWriter,
    input: &crate::operation::create_data_source::CreateDataSourceInput,
) -> Result<(), ::aws_smithy_types::error::operation::SerializationError> {
    if let Some(var_1) = &input.client_token {
        object.key("clientToken").string(var_1.as_str());
    }
    if let Some(var_2) = &input.data_deletion_policy {
        object.key("dataDeletionPolicy").string(var_2.as_str());
    }
    if let Some(var_3) = &input.data_source_configuration {
        #[allow(unused_mut)]
        let mut object_4 = object.key("dataSourceConfiguration").start_object();
        crate::protocol_serde::shape_data_source_configuration::ser_data_source_configuration(&mut object_4, var_3)?;
        object_4.finish();
    }
    if let Some(var_5) = &input.description {
        object.key("description").string(var_5.as_str());
    }
    if let Some(var_6) = &input.name {
        object.key("name").string(var_6.as_str());
    }
    if let Some(var_7) = &input.server_side_encryption_configuration {
        #[allow(unused_mut)]
        let mut object_8 = object.key("serverSideEncryptionConfiguration").start_object();
        crate::protocol_serde::shape_server_side_encryption_configuration::ser_server_side_encryption_configuration(&mut object_8, var_7)?;
        object_8.finish();
    }
    if let Some(var_9) = &input.vector_ingestion_configuration {
        #[allow(unused_mut)]
        let mut object_10 = object.key("vectorIngestionConfiguration").start_object();
        crate::protocol_serde::shape_vector_ingestion_configuration::ser_vector_ingestion_configuration(&mut object_10, var_9)?;
        object_10.finish();
    }
    Ok(())
}
