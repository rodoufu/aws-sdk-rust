// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This property contains the document to chat with, along with its attributes.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ByteContentDoc {
    /// <p>The file name of the document contained in the wrapper object.</p>
    pub identifier: ::std::string::String,
    /// <p>The MIME type of the document contained in the wrapper object.</p>
    pub content_type: ::std::string::String,
    /// <p>The byte value of the file to upload, encoded as a Base-64 string.</p>
    pub data: ::aws_smithy_types::Blob,
}
impl ByteContentDoc {
    /// <p>The file name of the document contained in the wrapper object.</p>
    pub fn identifier(&self) -> &str {
        use std::ops::Deref;
        self.identifier.deref()
    }
    /// <p>The MIME type of the document contained in the wrapper object.</p>
    pub fn content_type(&self) -> &str {
        use std::ops::Deref;
        self.content_type.deref()
    }
    /// <p>The byte value of the file to upload, encoded as a Base-64 string.</p>
    pub fn data(&self) -> &::aws_smithy_types::Blob {
        &self.data
    }
}
impl ::std::fmt::Debug for ByteContentDoc {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ByteContentDoc");
        formatter.field("identifier", &"*** Sensitive Data Redacted ***");
        formatter.field("content_type", &self.content_type);
        formatter.field("data", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
impl ByteContentDoc {
    /// Creates a new builder-style object to manufacture [`ByteContentDoc`](crate::types::ByteContentDoc).
    pub fn builder() -> crate::types::builders::ByteContentDocBuilder {
        crate::types::builders::ByteContentDocBuilder::default()
    }
}

/// A builder for [`ByteContentDoc`](crate::types::ByteContentDoc).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ByteContentDocBuilder {
    pub(crate) identifier: ::std::option::Option<::std::string::String>,
    pub(crate) content_type: ::std::option::Option<::std::string::String>,
    pub(crate) data: ::std::option::Option<::aws_smithy_types::Blob>,
}
impl ByteContentDocBuilder {
    /// <p>The file name of the document contained in the wrapper object.</p>
    /// This field is required.
    pub fn identifier(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.identifier = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The file name of the document contained in the wrapper object.</p>
    pub fn set_identifier(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.identifier = input;
        self
    }
    /// <p>The file name of the document contained in the wrapper object.</p>
    pub fn get_identifier(&self) -> &::std::option::Option<::std::string::String> {
        &self.identifier
    }
    /// <p>The MIME type of the document contained in the wrapper object.</p>
    /// This field is required.
    pub fn content_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.content_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The MIME type of the document contained in the wrapper object.</p>
    pub fn set_content_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.content_type = input;
        self
    }
    /// <p>The MIME type of the document contained in the wrapper object.</p>
    pub fn get_content_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.content_type
    }
    /// <p>The byte value of the file to upload, encoded as a Base-64 string.</p>
    /// This field is required.
    pub fn data(mut self, input: ::aws_smithy_types::Blob) -> Self {
        self.data = ::std::option::Option::Some(input);
        self
    }
    /// <p>The byte value of the file to upload, encoded as a Base-64 string.</p>
    pub fn set_data(mut self, input: ::std::option::Option<::aws_smithy_types::Blob>) -> Self {
        self.data = input;
        self
    }
    /// <p>The byte value of the file to upload, encoded as a Base-64 string.</p>
    pub fn get_data(&self) -> &::std::option::Option<::aws_smithy_types::Blob> {
        &self.data
    }
    /// Consumes the builder and constructs a [`ByteContentDoc`](crate::types::ByteContentDoc).
    /// This method will fail if any of the following fields are not set:
    /// - [`identifier`](crate::types::builders::ByteContentDocBuilder::identifier)
    /// - [`content_type`](crate::types::builders::ByteContentDocBuilder::content_type)
    /// - [`data`](crate::types::builders::ByteContentDocBuilder::data)
    pub fn build(self) -> ::std::result::Result<crate::types::ByteContentDoc, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ByteContentDoc {
            identifier: self.identifier.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "identifier",
                    "identifier was not specified but it is required when building ByteContentDoc",
                )
            })?,
            content_type: self.content_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "content_type",
                    "content_type was not specified but it is required when building ByteContentDoc",
                )
            })?,
            data: self.data.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "data",
                    "data was not specified but it is required when building ByteContentDoc",
                )
            })?,
        })
    }
}
impl ::std::fmt::Debug for ByteContentDocBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ByteContentDocBuilder");
        formatter.field("identifier", &"*** Sensitive Data Redacted ***");
        formatter.field("content_type", &self.content_type);
        formatter.field("data", &"*** Sensitive Data Redacted ***");
        formatter.finish()
    }
}
