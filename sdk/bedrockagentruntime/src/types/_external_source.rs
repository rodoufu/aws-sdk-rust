// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The unique external source of the content contained in the wrapper object.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExternalSource {
    /// <p>The source type of the external source wrapper object.</p>
    pub source_type: crate::types::ExternalSourceType,
    /// <p>The S3 location of the external source wrapper object.</p>
    pub s3_location: ::std::option::Option<crate::types::S3ObjectDoc>,
    /// <p>The identifier, contentType, and data of the external source wrapper object.</p>
    pub byte_content: ::std::option::Option<crate::types::ByteContentDoc>,
}
impl ExternalSource {
    /// <p>The source type of the external source wrapper object.</p>
    pub fn source_type(&self) -> &crate::types::ExternalSourceType {
        &self.source_type
    }
    /// <p>The S3 location of the external source wrapper object.</p>
    pub fn s3_location(&self) -> ::std::option::Option<&crate::types::S3ObjectDoc> {
        self.s3_location.as_ref()
    }
    /// <p>The identifier, contentType, and data of the external source wrapper object.</p>
    pub fn byte_content(&self) -> ::std::option::Option<&crate::types::ByteContentDoc> {
        self.byte_content.as_ref()
    }
}
impl ExternalSource {
    /// Creates a new builder-style object to manufacture [`ExternalSource`](crate::types::ExternalSource).
    pub fn builder() -> crate::types::builders::ExternalSourceBuilder {
        crate::types::builders::ExternalSourceBuilder::default()
    }
}

/// A builder for [`ExternalSource`](crate::types::ExternalSource).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExternalSourceBuilder {
    pub(crate) source_type: ::std::option::Option<crate::types::ExternalSourceType>,
    pub(crate) s3_location: ::std::option::Option<crate::types::S3ObjectDoc>,
    pub(crate) byte_content: ::std::option::Option<crate::types::ByteContentDoc>,
}
impl ExternalSourceBuilder {
    /// <p>The source type of the external source wrapper object.</p>
    /// This field is required.
    pub fn source_type(mut self, input: crate::types::ExternalSourceType) -> Self {
        self.source_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The source type of the external source wrapper object.</p>
    pub fn set_source_type(mut self, input: ::std::option::Option<crate::types::ExternalSourceType>) -> Self {
        self.source_type = input;
        self
    }
    /// <p>The source type of the external source wrapper object.</p>
    pub fn get_source_type(&self) -> &::std::option::Option<crate::types::ExternalSourceType> {
        &self.source_type
    }
    /// <p>The S3 location of the external source wrapper object.</p>
    pub fn s3_location(mut self, input: crate::types::S3ObjectDoc) -> Self {
        self.s3_location = ::std::option::Option::Some(input);
        self
    }
    /// <p>The S3 location of the external source wrapper object.</p>
    pub fn set_s3_location(mut self, input: ::std::option::Option<crate::types::S3ObjectDoc>) -> Self {
        self.s3_location = input;
        self
    }
    /// <p>The S3 location of the external source wrapper object.</p>
    pub fn get_s3_location(&self) -> &::std::option::Option<crate::types::S3ObjectDoc> {
        &self.s3_location
    }
    /// <p>The identifier, contentType, and data of the external source wrapper object.</p>
    pub fn byte_content(mut self, input: crate::types::ByteContentDoc) -> Self {
        self.byte_content = ::std::option::Option::Some(input);
        self
    }
    /// <p>The identifier, contentType, and data of the external source wrapper object.</p>
    pub fn set_byte_content(mut self, input: ::std::option::Option<crate::types::ByteContentDoc>) -> Self {
        self.byte_content = input;
        self
    }
    /// <p>The identifier, contentType, and data of the external source wrapper object.</p>
    pub fn get_byte_content(&self) -> &::std::option::Option<crate::types::ByteContentDoc> {
        &self.byte_content
    }
    /// Consumes the builder and constructs a [`ExternalSource`](crate::types::ExternalSource).
    /// This method will fail if any of the following fields are not set:
    /// - [`source_type`](crate::types::builders::ExternalSourceBuilder::source_type)
    pub fn build(self) -> ::std::result::Result<crate::types::ExternalSource, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ExternalSource {
            source_type: self.source_type.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "source_type",
                    "source_type was not specified but it is required when building ExternalSource",
                )
            })?,
            s3_location: self.s3_location,
            byte_content: self.byte_content,
        })
    }
}
