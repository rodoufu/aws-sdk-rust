// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configurations of the external source wrapper object in the retrieveAndGenerate function.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ExternalSourcesRetrieveAndGenerateConfiguration {
    /// <p>The modelArn used with the external source wrapper object in the retrieveAndGenerate function.</p>
    pub model_arn: ::std::string::String,
    /// <p>The document used with the external source wrapper object in the retrieveAndGenerate function.</p>
    pub sources: ::std::vec::Vec<crate::types::ExternalSource>,
    /// <p>The prompt used with the external source wrapper object with the retrieveAndGenerate function.</p>
    pub generation_configuration: ::std::option::Option<crate::types::ExternalSourcesGenerationConfiguration>,
}
impl ExternalSourcesRetrieveAndGenerateConfiguration {
    /// <p>The modelArn used with the external source wrapper object in the retrieveAndGenerate function.</p>
    pub fn model_arn(&self) -> &str {
        use std::ops::Deref;
        self.model_arn.deref()
    }
    /// <p>The document used with the external source wrapper object in the retrieveAndGenerate function.</p>
    pub fn sources(&self) -> &[crate::types::ExternalSource] {
        use std::ops::Deref;
        self.sources.deref()
    }
    /// <p>The prompt used with the external source wrapper object with the retrieveAndGenerate function.</p>
    pub fn generation_configuration(&self) -> ::std::option::Option<&crate::types::ExternalSourcesGenerationConfiguration> {
        self.generation_configuration.as_ref()
    }
}
impl ExternalSourcesRetrieveAndGenerateConfiguration {
    /// Creates a new builder-style object to manufacture [`ExternalSourcesRetrieveAndGenerateConfiguration`](crate::types::ExternalSourcesRetrieveAndGenerateConfiguration).
    pub fn builder() -> crate::types::builders::ExternalSourcesRetrieveAndGenerateConfigurationBuilder {
        crate::types::builders::ExternalSourcesRetrieveAndGenerateConfigurationBuilder::default()
    }
}

/// A builder for [`ExternalSourcesRetrieveAndGenerateConfiguration`](crate::types::ExternalSourcesRetrieveAndGenerateConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ExternalSourcesRetrieveAndGenerateConfigurationBuilder {
    pub(crate) model_arn: ::std::option::Option<::std::string::String>,
    pub(crate) sources: ::std::option::Option<::std::vec::Vec<crate::types::ExternalSource>>,
    pub(crate) generation_configuration: ::std::option::Option<crate::types::ExternalSourcesGenerationConfiguration>,
}
impl ExternalSourcesRetrieveAndGenerateConfigurationBuilder {
    /// <p>The modelArn used with the external source wrapper object in the retrieveAndGenerate function.</p>
    /// This field is required.
    pub fn model_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.model_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The modelArn used with the external source wrapper object in the retrieveAndGenerate function.</p>
    pub fn set_model_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.model_arn = input;
        self
    }
    /// <p>The modelArn used with the external source wrapper object in the retrieveAndGenerate function.</p>
    pub fn get_model_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.model_arn
    }
    /// Appends an item to `sources`.
    ///
    /// To override the contents of this collection use [`set_sources`](Self::set_sources).
    ///
    /// <p>The document used with the external source wrapper object in the retrieveAndGenerate function.</p>
    pub fn sources(mut self, input: crate::types::ExternalSource) -> Self {
        let mut v = self.sources.unwrap_or_default();
        v.push(input);
        self.sources = ::std::option::Option::Some(v);
        self
    }
    /// <p>The document used with the external source wrapper object in the retrieveAndGenerate function.</p>
    pub fn set_sources(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ExternalSource>>) -> Self {
        self.sources = input;
        self
    }
    /// <p>The document used with the external source wrapper object in the retrieveAndGenerate function.</p>
    pub fn get_sources(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ExternalSource>> {
        &self.sources
    }
    /// <p>The prompt used with the external source wrapper object with the retrieveAndGenerate function.</p>
    pub fn generation_configuration(mut self, input: crate::types::ExternalSourcesGenerationConfiguration) -> Self {
        self.generation_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>The prompt used with the external source wrapper object with the retrieveAndGenerate function.</p>
    pub fn set_generation_configuration(mut self, input: ::std::option::Option<crate::types::ExternalSourcesGenerationConfiguration>) -> Self {
        self.generation_configuration = input;
        self
    }
    /// <p>The prompt used with the external source wrapper object with the retrieveAndGenerate function.</p>
    pub fn get_generation_configuration(&self) -> &::std::option::Option<crate::types::ExternalSourcesGenerationConfiguration> {
        &self.generation_configuration
    }
    /// Consumes the builder and constructs a [`ExternalSourcesRetrieveAndGenerateConfiguration`](crate::types::ExternalSourcesRetrieveAndGenerateConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`model_arn`](crate::types::builders::ExternalSourcesRetrieveAndGenerateConfigurationBuilder::model_arn)
    /// - [`sources`](crate::types::builders::ExternalSourcesRetrieveAndGenerateConfigurationBuilder::sources)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ExternalSourcesRetrieveAndGenerateConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ExternalSourcesRetrieveAndGenerateConfiguration {
            model_arn: self.model_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "model_arn",
                    "model_arn was not specified but it is required when building ExternalSourcesRetrieveAndGenerateConfiguration",
                )
            })?,
            sources: self.sources.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "sources",
                    "sources was not specified but it is required when building ExternalSourcesRetrieveAndGenerateConfiguration",
                )
            })?,
            generation_configuration: self.generation_configuration,
        })
    }
}
