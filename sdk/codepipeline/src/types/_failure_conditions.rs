// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration that specifies the result, such as rollback, to occur upon stage failure.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct FailureConditions {
    /// <p>The specified result for when the failure conditions are met, such as rolling back the stage.</p>
    pub result: ::std::option::Option<crate::types::Result>,
}
impl FailureConditions {
    /// <p>The specified result for when the failure conditions are met, such as rolling back the stage.</p>
    pub fn result(&self) -> ::std::option::Option<&crate::types::Result> {
        self.result.as_ref()
    }
}
impl FailureConditions {
    /// Creates a new builder-style object to manufacture [`FailureConditions`](crate::types::FailureConditions).
    pub fn builder() -> crate::types::builders::FailureConditionsBuilder {
        crate::types::builders::FailureConditionsBuilder::default()
    }
}

/// A builder for [`FailureConditions`](crate::types::FailureConditions).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct FailureConditionsBuilder {
    pub(crate) result: ::std::option::Option<crate::types::Result>,
}
impl FailureConditionsBuilder {
    /// <p>The specified result for when the failure conditions are met, such as rolling back the stage.</p>
    pub fn result(mut self, input: crate::types::Result) -> Self {
        self.result = ::std::option::Option::Some(input);
        self
    }
    /// <p>The specified result for when the failure conditions are met, such as rolling back the stage.</p>
    pub fn set_result(mut self, input: ::std::option::Option<crate::types::Result>) -> Self {
        self.result = input;
        self
    }
    /// <p>The specified result for when the failure conditions are met, such as rolling back the stage.</p>
    pub fn get_result(&self) -> &::std::option::Option<crate::types::Result> {
        &self.result
    }
    /// Consumes the builder and constructs a [`FailureConditions`](crate::types::FailureConditions).
    pub fn build(self) -> crate::types::FailureConditions {
        crate::types::FailureConditions { result: self.result }
    }
}
