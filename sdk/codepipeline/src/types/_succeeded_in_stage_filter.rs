// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Filter for pipeline executions that have successfully completed the stage in the current pipeline version.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct SucceededInStageFilter {
    /// <p>The name of the stage for filtering for pipeline executions where the stage was successful in the current pipeline version.</p>
    pub stage_name: ::std::option::Option<::std::string::String>,
}
impl SucceededInStageFilter {
    /// <p>The name of the stage for filtering for pipeline executions where the stage was successful in the current pipeline version.</p>
    pub fn stage_name(&self) -> ::std::option::Option<&str> {
        self.stage_name.as_deref()
    }
}
impl SucceededInStageFilter {
    /// Creates a new builder-style object to manufacture [`SucceededInStageFilter`](crate::types::SucceededInStageFilter).
    pub fn builder() -> crate::types::builders::SucceededInStageFilterBuilder {
        crate::types::builders::SucceededInStageFilterBuilder::default()
    }
}

/// A builder for [`SucceededInStageFilter`](crate::types::SucceededInStageFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct SucceededInStageFilterBuilder {
    pub(crate) stage_name: ::std::option::Option<::std::string::String>,
}
impl SucceededInStageFilterBuilder {
    /// <p>The name of the stage for filtering for pipeline executions where the stage was successful in the current pipeline version.</p>
    pub fn stage_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.stage_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the stage for filtering for pipeline executions where the stage was successful in the current pipeline version.</p>
    pub fn set_stage_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.stage_name = input;
        self
    }
    /// <p>The name of the stage for filtering for pipeline executions where the stage was successful in the current pipeline version.</p>
    pub fn get_stage_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.stage_name
    }
    /// Consumes the builder and constructs a [`SucceededInStageFilter`](crate::types::SucceededInStageFilter).
    pub fn build(self) -> crate::types::SucceededInStageFilter {
        crate::types::SucceededInStageFilter { stage_name: self.stage_name }
    }
}
