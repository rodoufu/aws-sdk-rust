// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Object to store union of Field values.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub enum AuditEventFieldValueUnion {
    /// <p>Can be either null, or have a Boolean value type. Only one value can be provided.</p>
    BooleanValue(bool),
    /// <p>Can be either null, or have a Double value type. Only one value can be provided.</p>
    DoubleValue(f64),
    /// <p>An empty value. You cannot set <code>EmptyFieldValue</code> on a field that is required on a case template.</p>
    /// <p>This structure will never have any data members. It signifies an empty value on a case field.</p>
    EmptyValue(crate::types::EmptyFieldValue),
    /// <p>Can be either null, or have a String value type. Only one value can be provided.</p>
    StringValue(::std::string::String),
    /// <p>Can be either null, or have a String value type formatted as an ARN. Only one value can be provided.</p>
    UserArnValue(::std::string::String),
    /// The `Unknown` variant represents cases where new union variant was received. Consider upgrading the SDK to the latest available version.
    /// An unknown enum variant
    ///
    /// _Note: If you encounter this error, consider upgrading your SDK to the latest version._
    /// The `Unknown` variant represents cases where the server sent a value that wasn't recognized
    /// by the client. This can happen when the server adds new functionality, but the client has not been updated.
    /// To investigate this, consider turning on debug logging to print the raw HTTP response.
    #[non_exhaustive]
    Unknown,
}
impl AuditEventFieldValueUnion {
    /// Tries to convert the enum instance into [`BooleanValue`](crate::types::AuditEventFieldValueUnion::BooleanValue), extracting the inner [`bool`](bool).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_boolean_value(&self) -> ::std::result::Result<&bool, &Self> {
        if let AuditEventFieldValueUnion::BooleanValue(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`BooleanValue`](crate::types::AuditEventFieldValueUnion::BooleanValue).
    pub fn is_boolean_value(&self) -> bool {
        self.as_boolean_value().is_ok()
    }
    /// Tries to convert the enum instance into [`DoubleValue`](crate::types::AuditEventFieldValueUnion::DoubleValue), extracting the inner [`f64`](f64).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_double_value(&self) -> ::std::result::Result<&f64, &Self> {
        if let AuditEventFieldValueUnion::DoubleValue(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`DoubleValue`](crate::types::AuditEventFieldValueUnion::DoubleValue).
    pub fn is_double_value(&self) -> bool {
        self.as_double_value().is_ok()
    }
    /// Tries to convert the enum instance into [`EmptyValue`](crate::types::AuditEventFieldValueUnion::EmptyValue), extracting the inner [`EmptyFieldValue`](crate::types::EmptyFieldValue).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_empty_value(&self) -> ::std::result::Result<&crate::types::EmptyFieldValue, &Self> {
        if let AuditEventFieldValueUnion::EmptyValue(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`EmptyValue`](crate::types::AuditEventFieldValueUnion::EmptyValue).
    pub fn is_empty_value(&self) -> bool {
        self.as_empty_value().is_ok()
    }
    /// Tries to convert the enum instance into [`StringValue`](crate::types::AuditEventFieldValueUnion::StringValue), extracting the inner [`String`](::std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_string_value(&self) -> ::std::result::Result<&::std::string::String, &Self> {
        if let AuditEventFieldValueUnion::StringValue(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`StringValue`](crate::types::AuditEventFieldValueUnion::StringValue).
    pub fn is_string_value(&self) -> bool {
        self.as_string_value().is_ok()
    }
    /// Tries to convert the enum instance into [`UserArnValue`](crate::types::AuditEventFieldValueUnion::UserArnValue), extracting the inner [`String`](::std::string::String).
    /// Returns `Err(&Self)` if it can't be converted.
    pub fn as_user_arn_value(&self) -> ::std::result::Result<&::std::string::String, &Self> {
        if let AuditEventFieldValueUnion::UserArnValue(val) = &self {
            ::std::result::Result::Ok(val)
        } else {
            ::std::result::Result::Err(self)
        }
    }
    /// Returns true if this is a [`UserArnValue`](crate::types::AuditEventFieldValueUnion::UserArnValue).
    pub fn is_user_arn_value(&self) -> bool {
        self.as_user_arn_value().is_ok()
    }
    /// Returns true if the enum instance is the `Unknown` variant.
    pub fn is_unknown(&self) -> bool {
        matches!(self, Self::Unknown)
    }
}
