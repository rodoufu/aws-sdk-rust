// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about a recommendation, such as the timestamp for when Amazon Web Services made a specific recommendation.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReservationPurchaseRecommendationMetadata {
    /// <p>The ID for the recommendation.</p>
    pub recommendation_id: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp for when Amazon Web Services made the recommendation.</p>
    pub generation_timestamp: ::std::option::Option<::std::string::String>,
    /// <p>Additional metadata that might be applicable to the recommendation.</p>
    pub additional_metadata: ::std::option::Option<::std::string::String>,
}
impl ReservationPurchaseRecommendationMetadata {
    /// <p>The ID for the recommendation.</p>
    pub fn recommendation_id(&self) -> ::std::option::Option<&str> {
        self.recommendation_id.as_deref()
    }
    /// <p>The timestamp for when Amazon Web Services made the recommendation.</p>
    pub fn generation_timestamp(&self) -> ::std::option::Option<&str> {
        self.generation_timestamp.as_deref()
    }
    /// <p>Additional metadata that might be applicable to the recommendation.</p>
    pub fn additional_metadata(&self) -> ::std::option::Option<&str> {
        self.additional_metadata.as_deref()
    }
}
impl ReservationPurchaseRecommendationMetadata {
    /// Creates a new builder-style object to manufacture [`ReservationPurchaseRecommendationMetadata`](crate::types::ReservationPurchaseRecommendationMetadata).
    pub fn builder() -> crate::types::builders::ReservationPurchaseRecommendationMetadataBuilder {
        crate::types::builders::ReservationPurchaseRecommendationMetadataBuilder::default()
    }
}

/// A builder for [`ReservationPurchaseRecommendationMetadata`](crate::types::ReservationPurchaseRecommendationMetadata).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReservationPurchaseRecommendationMetadataBuilder {
    pub(crate) recommendation_id: ::std::option::Option<::std::string::String>,
    pub(crate) generation_timestamp: ::std::option::Option<::std::string::String>,
    pub(crate) additional_metadata: ::std::option::Option<::std::string::String>,
}
impl ReservationPurchaseRecommendationMetadataBuilder {
    /// <p>The ID for the recommendation.</p>
    pub fn recommendation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recommendation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID for the recommendation.</p>
    pub fn set_recommendation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recommendation_id = input;
        self
    }
    /// <p>The ID for the recommendation.</p>
    pub fn get_recommendation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.recommendation_id
    }
    /// <p>The timestamp for when Amazon Web Services made the recommendation.</p>
    pub fn generation_timestamp(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.generation_timestamp = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The timestamp for when Amazon Web Services made the recommendation.</p>
    pub fn set_generation_timestamp(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.generation_timestamp = input;
        self
    }
    /// <p>The timestamp for when Amazon Web Services made the recommendation.</p>
    pub fn get_generation_timestamp(&self) -> &::std::option::Option<::std::string::String> {
        &self.generation_timestamp
    }
    /// <p>Additional metadata that might be applicable to the recommendation.</p>
    pub fn additional_metadata(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.additional_metadata = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional metadata that might be applicable to the recommendation.</p>
    pub fn set_additional_metadata(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.additional_metadata = input;
        self
    }
    /// <p>Additional metadata that might be applicable to the recommendation.</p>
    pub fn get_additional_metadata(&self) -> &::std::option::Option<::std::string::String> {
        &self.additional_metadata
    }
    /// Consumes the builder and constructs a [`ReservationPurchaseRecommendationMetadata`](crate::types::ReservationPurchaseRecommendationMetadata).
    pub fn build(self) -> crate::types::ReservationPurchaseRecommendationMetadata {
        crate::types::ReservationPurchaseRecommendationMetadata {
            recommendation_id: self.recommendation_id,
            generation_timestamp: self.generation_timestamp,
            additional_metadata: self.additional_metadata,
        }
    }
}
