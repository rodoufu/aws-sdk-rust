// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DisableImageDeregistrationProtection`](crate::operation::disable_image_deregistration_protection::builders::DisableImageDeregistrationProtectionFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`image_id(impl Into<String>)`](crate::operation::disable_image_deregistration_protection::builders::DisableImageDeregistrationProtectionFluentBuilder::image_id) / [`set_image_id(Option<String>)`](crate::operation::disable_image_deregistration_protection::builders::DisableImageDeregistrationProtectionFluentBuilder::set_image_id):<br>required: **true**<br><p>The ID of the AMI.</p><br>
    ///   - [`dry_run(bool)`](crate::operation::disable_image_deregistration_protection::builders::DisableImageDeregistrationProtectionFluentBuilder::dry_run) / [`set_dry_run(Option<bool>)`](crate::operation::disable_image_deregistration_protection::builders::DisableImageDeregistrationProtectionFluentBuilder::set_dry_run):<br>required: **false**<br><p>Checks whether you have the required permissions for the action, without actually making the request, and provides an error response. If you have the required permissions, the error response is <code>DryRunOperation</code>. Otherwise, it is <code>UnauthorizedOperation</code>.</p><br>
    /// - On success, responds with [`DisableImageDeregistrationProtectionOutput`](crate::operation::disable_image_deregistration_protection::DisableImageDeregistrationProtectionOutput) with field(s):
    ///   - [`r#return(Option<String>)`](crate::operation::disable_image_deregistration_protection::DisableImageDeregistrationProtectionOutput::return): <p>Returns <code>true</code> if the request succeeds; otherwise, it returns an error.</p>
    /// - On failure, responds with [`SdkError<DisableImageDeregistrationProtectionError>`](crate::operation::disable_image_deregistration_protection::DisableImageDeregistrationProtectionError)
    pub fn disable_image_deregistration_protection(
        &self,
    ) -> crate::operation::disable_image_deregistration_protection::builders::DisableImageDeregistrationProtectionFluentBuilder {
        crate::operation::disable_image_deregistration_protection::builders::DisableImageDeregistrationProtectionFluentBuilder::new(
            self.handle.clone(),
        )
    }
}
