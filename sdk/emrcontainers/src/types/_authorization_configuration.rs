// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Authorization-related configuration inputs for the security configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct AuthorizationConfiguration {
    /// <p>Lake Formation related configuration inputs for the security configuration.</p>
    pub lake_formation_configuration: ::std::option::Option<crate::types::LakeFormationConfiguration>,
    /// <p>Encryption-related configuration input for the security configuration.</p>
    pub encryption_configuration: ::std::option::Option<crate::types::EncryptionConfiguration>,
}
impl AuthorizationConfiguration {
    /// <p>Lake Formation related configuration inputs for the security configuration.</p>
    pub fn lake_formation_configuration(&self) -> ::std::option::Option<&crate::types::LakeFormationConfiguration> {
        self.lake_formation_configuration.as_ref()
    }
    /// <p>Encryption-related configuration input for the security configuration.</p>
    pub fn encryption_configuration(&self) -> ::std::option::Option<&crate::types::EncryptionConfiguration> {
        self.encryption_configuration.as_ref()
    }
}
impl AuthorizationConfiguration {
    /// Creates a new builder-style object to manufacture [`AuthorizationConfiguration`](crate::types::AuthorizationConfiguration).
    pub fn builder() -> crate::types::builders::AuthorizationConfigurationBuilder {
        crate::types::builders::AuthorizationConfigurationBuilder::default()
    }
}

/// A builder for [`AuthorizationConfiguration`](crate::types::AuthorizationConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct AuthorizationConfigurationBuilder {
    pub(crate) lake_formation_configuration: ::std::option::Option<crate::types::LakeFormationConfiguration>,
    pub(crate) encryption_configuration: ::std::option::Option<crate::types::EncryptionConfiguration>,
}
impl AuthorizationConfigurationBuilder {
    /// <p>Lake Formation related configuration inputs for the security configuration.</p>
    pub fn lake_formation_configuration(mut self, input: crate::types::LakeFormationConfiguration) -> Self {
        self.lake_formation_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Lake Formation related configuration inputs for the security configuration.</p>
    pub fn set_lake_formation_configuration(mut self, input: ::std::option::Option<crate::types::LakeFormationConfiguration>) -> Self {
        self.lake_formation_configuration = input;
        self
    }
    /// <p>Lake Formation related configuration inputs for the security configuration.</p>
    pub fn get_lake_formation_configuration(&self) -> &::std::option::Option<crate::types::LakeFormationConfiguration> {
        &self.lake_formation_configuration
    }
    /// <p>Encryption-related configuration input for the security configuration.</p>
    pub fn encryption_configuration(mut self, input: crate::types::EncryptionConfiguration) -> Self {
        self.encryption_configuration = ::std::option::Option::Some(input);
        self
    }
    /// <p>Encryption-related configuration input for the security configuration.</p>
    pub fn set_encryption_configuration(mut self, input: ::std::option::Option<crate::types::EncryptionConfiguration>) -> Self {
        self.encryption_configuration = input;
        self
    }
    /// <p>Encryption-related configuration input for the security configuration.</p>
    pub fn get_encryption_configuration(&self) -> &::std::option::Option<crate::types::EncryptionConfiguration> {
        &self.encryption_configuration
    }
    /// Consumes the builder and constructs a [`AuthorizationConfiguration`](crate::types::AuthorizationConfiguration).
    pub fn build(self) -> crate::types::AuthorizationConfiguration {
        crate::types::AuthorizationConfiguration {
            lake_formation_configuration: self.lake_formation_configuration,
            encryption_configuration: self.encryption_configuration,
        }
    }
}
