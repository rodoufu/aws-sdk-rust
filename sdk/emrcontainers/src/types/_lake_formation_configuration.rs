// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Lake Formation related configuration inputs for the security configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct LakeFormationConfiguration {
    /// <p>The session tag to authorize Amazon EMR on EKS for API calls to Lake Formation.</p>
    pub authorized_session_tag_value: ::std::option::Option<::std::string::String>,
    /// <p>The namespace input of the system job.</p>
    pub secure_namespace_info: ::std::option::Option<crate::types::SecureNamespaceInfo>,
    /// <p>The query engine IAM role ARN that is tied to the secure Spark job. The <code>QueryEngine</code> role assumes the <code>JobExecutionRole</code> to execute all the Lake Formation calls.</p>
    pub query_engine_role_arn: ::std::option::Option<::std::string::String>,
}
impl LakeFormationConfiguration {
    /// <p>The session tag to authorize Amazon EMR on EKS for API calls to Lake Formation.</p>
    pub fn authorized_session_tag_value(&self) -> ::std::option::Option<&str> {
        self.authorized_session_tag_value.as_deref()
    }
    /// <p>The namespace input of the system job.</p>
    pub fn secure_namespace_info(&self) -> ::std::option::Option<&crate::types::SecureNamespaceInfo> {
        self.secure_namespace_info.as_ref()
    }
    /// <p>The query engine IAM role ARN that is tied to the secure Spark job. The <code>QueryEngine</code> role assumes the <code>JobExecutionRole</code> to execute all the Lake Formation calls.</p>
    pub fn query_engine_role_arn(&self) -> ::std::option::Option<&str> {
        self.query_engine_role_arn.as_deref()
    }
}
impl LakeFormationConfiguration {
    /// Creates a new builder-style object to manufacture [`LakeFormationConfiguration`](crate::types::LakeFormationConfiguration).
    pub fn builder() -> crate::types::builders::LakeFormationConfigurationBuilder {
        crate::types::builders::LakeFormationConfigurationBuilder::default()
    }
}

/// A builder for [`LakeFormationConfiguration`](crate::types::LakeFormationConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct LakeFormationConfigurationBuilder {
    pub(crate) authorized_session_tag_value: ::std::option::Option<::std::string::String>,
    pub(crate) secure_namespace_info: ::std::option::Option<crate::types::SecureNamespaceInfo>,
    pub(crate) query_engine_role_arn: ::std::option::Option<::std::string::String>,
}
impl LakeFormationConfigurationBuilder {
    /// <p>The session tag to authorize Amazon EMR on EKS for API calls to Lake Formation.</p>
    pub fn authorized_session_tag_value(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.authorized_session_tag_value = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The session tag to authorize Amazon EMR on EKS for API calls to Lake Formation.</p>
    pub fn set_authorized_session_tag_value(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.authorized_session_tag_value = input;
        self
    }
    /// <p>The session tag to authorize Amazon EMR on EKS for API calls to Lake Formation.</p>
    pub fn get_authorized_session_tag_value(&self) -> &::std::option::Option<::std::string::String> {
        &self.authorized_session_tag_value
    }
    /// <p>The namespace input of the system job.</p>
    pub fn secure_namespace_info(mut self, input: crate::types::SecureNamespaceInfo) -> Self {
        self.secure_namespace_info = ::std::option::Option::Some(input);
        self
    }
    /// <p>The namespace input of the system job.</p>
    pub fn set_secure_namespace_info(mut self, input: ::std::option::Option<crate::types::SecureNamespaceInfo>) -> Self {
        self.secure_namespace_info = input;
        self
    }
    /// <p>The namespace input of the system job.</p>
    pub fn get_secure_namespace_info(&self) -> &::std::option::Option<crate::types::SecureNamespaceInfo> {
        &self.secure_namespace_info
    }
    /// <p>The query engine IAM role ARN that is tied to the secure Spark job. The <code>QueryEngine</code> role assumes the <code>JobExecutionRole</code> to execute all the Lake Formation calls.</p>
    pub fn query_engine_role_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.query_engine_role_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The query engine IAM role ARN that is tied to the secure Spark job. The <code>QueryEngine</code> role assumes the <code>JobExecutionRole</code> to execute all the Lake Formation calls.</p>
    pub fn set_query_engine_role_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.query_engine_role_arn = input;
        self
    }
    /// <p>The query engine IAM role ARN that is tied to the secure Spark job. The <code>QueryEngine</code> role assumes the <code>JobExecutionRole</code> to execute all the Lake Formation calls.</p>
    pub fn get_query_engine_role_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.query_engine_role_arn
    }
    /// Consumes the builder and constructs a [`LakeFormationConfiguration`](crate::types::LakeFormationConfiguration).
    pub fn build(self) -> crate::types::LakeFormationConfiguration {
        crate::types::LakeFormationConfiguration {
            authorized_session_tag_value: self.authorized_session_tag_value,
            secure_namespace_info: self.secure_namespace_info,
            query_engine_role_arn: self.query_engine_role_arn,
        }
    }
}
