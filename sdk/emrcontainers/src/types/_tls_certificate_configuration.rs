// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Configurations related to the TLS certificate for the security configuration.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct TlsCertificateConfiguration {
    /// <p>The TLS certificate type. Acceptable values: <code>PEM</code> or <code>Custom</code>.</p>
    pub certificate_provider_type: ::std::option::Option<crate::types::CertificateProviderType>,
    /// <p>Secrets Manager ARN that contains the public TLS certificate contents, used for communication between the user job and the system job.</p>
    pub public_certificate_secret_arn: ::std::option::Option<::std::string::String>,
    /// <p>Secrets Manager ARN that contains the private TLS certificate contents, used for communication between the user job and the system job.</p>
    pub private_certificate_secret_arn: ::std::option::Option<::std::string::String>,
}
impl TlsCertificateConfiguration {
    /// <p>The TLS certificate type. Acceptable values: <code>PEM</code> or <code>Custom</code>.</p>
    pub fn certificate_provider_type(&self) -> ::std::option::Option<&crate::types::CertificateProviderType> {
        self.certificate_provider_type.as_ref()
    }
    /// <p>Secrets Manager ARN that contains the public TLS certificate contents, used for communication between the user job and the system job.</p>
    pub fn public_certificate_secret_arn(&self) -> ::std::option::Option<&str> {
        self.public_certificate_secret_arn.as_deref()
    }
    /// <p>Secrets Manager ARN that contains the private TLS certificate contents, used for communication between the user job and the system job.</p>
    pub fn private_certificate_secret_arn(&self) -> ::std::option::Option<&str> {
        self.private_certificate_secret_arn.as_deref()
    }
}
impl TlsCertificateConfiguration {
    /// Creates a new builder-style object to manufacture [`TlsCertificateConfiguration`](crate::types::TlsCertificateConfiguration).
    pub fn builder() -> crate::types::builders::TlsCertificateConfigurationBuilder {
        crate::types::builders::TlsCertificateConfigurationBuilder::default()
    }
}

/// A builder for [`TlsCertificateConfiguration`](crate::types::TlsCertificateConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct TlsCertificateConfigurationBuilder {
    pub(crate) certificate_provider_type: ::std::option::Option<crate::types::CertificateProviderType>,
    pub(crate) public_certificate_secret_arn: ::std::option::Option<::std::string::String>,
    pub(crate) private_certificate_secret_arn: ::std::option::Option<::std::string::String>,
}
impl TlsCertificateConfigurationBuilder {
    /// <p>The TLS certificate type. Acceptable values: <code>PEM</code> or <code>Custom</code>.</p>
    pub fn certificate_provider_type(mut self, input: crate::types::CertificateProviderType) -> Self {
        self.certificate_provider_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The TLS certificate type. Acceptable values: <code>PEM</code> or <code>Custom</code>.</p>
    pub fn set_certificate_provider_type(mut self, input: ::std::option::Option<crate::types::CertificateProviderType>) -> Self {
        self.certificate_provider_type = input;
        self
    }
    /// <p>The TLS certificate type. Acceptable values: <code>PEM</code> or <code>Custom</code>.</p>
    pub fn get_certificate_provider_type(&self) -> &::std::option::Option<crate::types::CertificateProviderType> {
        &self.certificate_provider_type
    }
    /// <p>Secrets Manager ARN that contains the public TLS certificate contents, used for communication between the user job and the system job.</p>
    pub fn public_certificate_secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.public_certificate_secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Secrets Manager ARN that contains the public TLS certificate contents, used for communication between the user job and the system job.</p>
    pub fn set_public_certificate_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.public_certificate_secret_arn = input;
        self
    }
    /// <p>Secrets Manager ARN that contains the public TLS certificate contents, used for communication between the user job and the system job.</p>
    pub fn get_public_certificate_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.public_certificate_secret_arn
    }
    /// <p>Secrets Manager ARN that contains the private TLS certificate contents, used for communication between the user job and the system job.</p>
    pub fn private_certificate_secret_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.private_certificate_secret_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Secrets Manager ARN that contains the private TLS certificate contents, used for communication between the user job and the system job.</p>
    pub fn set_private_certificate_secret_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.private_certificate_secret_arn = input;
        self
    }
    /// <p>Secrets Manager ARN that contains the private TLS certificate contents, used for communication between the user job and the system job.</p>
    pub fn get_private_certificate_secret_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.private_certificate_secret_arn
    }
    /// Consumes the builder and constructs a [`TlsCertificateConfiguration`](crate::types::TlsCertificateConfiguration).
    pub fn build(self) -> crate::types::TlsCertificateConfiguration {
        crate::types::TlsCertificateConfiguration {
            certificate_provider_type: self.certificate_provider_type,
            public_certificate_secret_arn: self.public_certificate_secret_arn,
            private_certificate_secret_arn: self.private_certificate_secret_arn,
        }
    }
}
