// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchDeleteUniqueIdInput {
    /// <p>The name of the workflow.</p>
    pub workflow_name: ::std::option::Option<::std::string::String>,
    /// <p>The input source for the batch delete unique ID operation.</p>
    pub input_source: ::std::option::Option<::std::string::String>,
    /// <p>The unique IDs to delete.</p>
    pub unique_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl BatchDeleteUniqueIdInput {
    /// <p>The name of the workflow.</p>
    pub fn workflow_name(&self) -> ::std::option::Option<&str> {
        self.workflow_name.as_deref()
    }
    /// <p>The input source for the batch delete unique ID operation.</p>
    pub fn input_source(&self) -> ::std::option::Option<&str> {
        self.input_source.as_deref()
    }
    /// <p>The unique IDs to delete.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.unique_ids.is_none()`.
    pub fn unique_ids(&self) -> &[::std::string::String] {
        self.unique_ids.as_deref().unwrap_or_default()
    }
}
impl BatchDeleteUniqueIdInput {
    /// Creates a new builder-style object to manufacture [`BatchDeleteUniqueIdInput`](crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdInput).
    pub fn builder() -> crate::operation::batch_delete_unique_id::builders::BatchDeleteUniqueIdInputBuilder {
        crate::operation::batch_delete_unique_id::builders::BatchDeleteUniqueIdInputBuilder::default()
    }
}

/// A builder for [`BatchDeleteUniqueIdInput`](crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchDeleteUniqueIdInputBuilder {
    pub(crate) workflow_name: ::std::option::Option<::std::string::String>,
    pub(crate) input_source: ::std::option::Option<::std::string::String>,
    pub(crate) unique_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl BatchDeleteUniqueIdInputBuilder {
    /// <p>The name of the workflow.</p>
    /// This field is required.
    pub fn workflow_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.workflow_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the workflow.</p>
    pub fn set_workflow_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.workflow_name = input;
        self
    }
    /// <p>The name of the workflow.</p>
    pub fn get_workflow_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.workflow_name
    }
    /// <p>The input source for the batch delete unique ID operation.</p>
    pub fn input_source(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.input_source = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The input source for the batch delete unique ID operation.</p>
    pub fn set_input_source(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.input_source = input;
        self
    }
    /// <p>The input source for the batch delete unique ID operation.</p>
    pub fn get_input_source(&self) -> &::std::option::Option<::std::string::String> {
        &self.input_source
    }
    /// Appends an item to `unique_ids`.
    ///
    /// To override the contents of this collection use [`set_unique_ids`](Self::set_unique_ids).
    ///
    /// <p>The unique IDs to delete.</p>
    pub fn unique_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.unique_ids.unwrap_or_default();
        v.push(input.into());
        self.unique_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The unique IDs to delete.</p>
    pub fn set_unique_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.unique_ids = input;
        self
    }
    /// <p>The unique IDs to delete.</p>
    pub fn get_unique_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.unique_ids
    }
    /// Consumes the builder and constructs a [`BatchDeleteUniqueIdInput`](crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdInput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdInput {
            workflow_name: self.workflow_name,
            input_source: self.input_source,
            unique_ids: self.unique_ids,
        })
    }
}
