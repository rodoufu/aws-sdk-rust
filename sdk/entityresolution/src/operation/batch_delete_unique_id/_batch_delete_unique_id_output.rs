// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct BatchDeleteUniqueIdOutput {
    /// <p>The status of the batch delete unique ID operation.</p>
    pub status: crate::types::DeleteUniqueIdStatus,
    /// <p>The errors from deleting multiple unique IDs.</p>
    pub errors: ::std::vec::Vec<crate::types::DeleteUniqueIdError>,
    /// <p>The unique IDs that were deleted.</p>
    pub deleted: ::std::vec::Vec<crate::types::DeletedUniqueId>,
    /// <p>The unique IDs that were disconnected.</p>
    pub disconnected_unique_ids: ::std::vec::Vec<::std::string::String>,
    _request_id: Option<String>,
}
impl BatchDeleteUniqueIdOutput {
    /// <p>The status of the batch delete unique ID operation.</p>
    pub fn status(&self) -> &crate::types::DeleteUniqueIdStatus {
        &self.status
    }
    /// <p>The errors from deleting multiple unique IDs.</p>
    pub fn errors(&self) -> &[crate::types::DeleteUniqueIdError] {
        use std::ops::Deref;
        self.errors.deref()
    }
    /// <p>The unique IDs that were deleted.</p>
    pub fn deleted(&self) -> &[crate::types::DeletedUniqueId] {
        use std::ops::Deref;
        self.deleted.deref()
    }
    /// <p>The unique IDs that were disconnected.</p>
    pub fn disconnected_unique_ids(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.disconnected_unique_ids.deref()
    }
}
impl ::aws_types::request_id::RequestId for BatchDeleteUniqueIdOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl BatchDeleteUniqueIdOutput {
    /// Creates a new builder-style object to manufacture [`BatchDeleteUniqueIdOutput`](crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdOutput).
    pub fn builder() -> crate::operation::batch_delete_unique_id::builders::BatchDeleteUniqueIdOutputBuilder {
        crate::operation::batch_delete_unique_id::builders::BatchDeleteUniqueIdOutputBuilder::default()
    }
}

/// A builder for [`BatchDeleteUniqueIdOutput`](crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct BatchDeleteUniqueIdOutputBuilder {
    pub(crate) status: ::std::option::Option<crate::types::DeleteUniqueIdStatus>,
    pub(crate) errors: ::std::option::Option<::std::vec::Vec<crate::types::DeleteUniqueIdError>>,
    pub(crate) deleted: ::std::option::Option<::std::vec::Vec<crate::types::DeletedUniqueId>>,
    pub(crate) disconnected_unique_ids: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    _request_id: Option<String>,
}
impl BatchDeleteUniqueIdOutputBuilder {
    /// <p>The status of the batch delete unique ID operation.</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::DeleteUniqueIdStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The status of the batch delete unique ID operation.</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::DeleteUniqueIdStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The status of the batch delete unique ID operation.</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::DeleteUniqueIdStatus> {
        &self.status
    }
    /// Appends an item to `errors`.
    ///
    /// To override the contents of this collection use [`set_errors`](Self::set_errors).
    ///
    /// <p>The errors from deleting multiple unique IDs.</p>
    pub fn errors(mut self, input: crate::types::DeleteUniqueIdError) -> Self {
        let mut v = self.errors.unwrap_or_default();
        v.push(input);
        self.errors = ::std::option::Option::Some(v);
        self
    }
    /// <p>The errors from deleting multiple unique IDs.</p>
    pub fn set_errors(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DeleteUniqueIdError>>) -> Self {
        self.errors = input;
        self
    }
    /// <p>The errors from deleting multiple unique IDs.</p>
    pub fn get_errors(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DeleteUniqueIdError>> {
        &self.errors
    }
    /// Appends an item to `deleted`.
    ///
    /// To override the contents of this collection use [`set_deleted`](Self::set_deleted).
    ///
    /// <p>The unique IDs that were deleted.</p>
    pub fn deleted(mut self, input: crate::types::DeletedUniqueId) -> Self {
        let mut v = self.deleted.unwrap_or_default();
        v.push(input);
        self.deleted = ::std::option::Option::Some(v);
        self
    }
    /// <p>The unique IDs that were deleted.</p>
    pub fn set_deleted(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::DeletedUniqueId>>) -> Self {
        self.deleted = input;
        self
    }
    /// <p>The unique IDs that were deleted.</p>
    pub fn get_deleted(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::DeletedUniqueId>> {
        &self.deleted
    }
    /// Appends an item to `disconnected_unique_ids`.
    ///
    /// To override the contents of this collection use [`set_disconnected_unique_ids`](Self::set_disconnected_unique_ids).
    ///
    /// <p>The unique IDs that were disconnected.</p>
    pub fn disconnected_unique_ids(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.disconnected_unique_ids.unwrap_or_default();
        v.push(input.into());
        self.disconnected_unique_ids = ::std::option::Option::Some(v);
        self
    }
    /// <p>The unique IDs that were disconnected.</p>
    pub fn set_disconnected_unique_ids(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.disconnected_unique_ids = input;
        self
    }
    /// <p>The unique IDs that were disconnected.</p>
    pub fn get_disconnected_unique_ids(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.disconnected_unique_ids
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`BatchDeleteUniqueIdOutput`](crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`status`](crate::operation::batch_delete_unique_id::builders::BatchDeleteUniqueIdOutputBuilder::status)
    /// - [`errors`](crate::operation::batch_delete_unique_id::builders::BatchDeleteUniqueIdOutputBuilder::errors)
    /// - [`deleted`](crate::operation::batch_delete_unique_id::builders::BatchDeleteUniqueIdOutputBuilder::deleted)
    /// - [`disconnected_unique_ids`](crate::operation::batch_delete_unique_id::builders::BatchDeleteUniqueIdOutputBuilder::disconnected_unique_ids)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdOutput, ::aws_smithy_types::error::operation::BuildError>
    {
        ::std::result::Result::Ok(crate::operation::batch_delete_unique_id::BatchDeleteUniqueIdOutput {
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building BatchDeleteUniqueIdOutput",
                )
            })?,
            errors: self.errors.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "errors",
                    "errors was not specified but it is required when building BatchDeleteUniqueIdOutput",
                )
            })?,
            deleted: self.deleted.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "deleted",
                    "deleted was not specified but it is required when building BatchDeleteUniqueIdOutput",
                )
            })?,
            disconnected_unique_ids: self.disconnected_unique_ids.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "disconnected_unique_ids",
                    "disconnected_unique_ids was not specified but it is required when building BatchDeleteUniqueIdOutput",
                )
            })?,
            _request_id: self._request_id,
        })
    }
}
