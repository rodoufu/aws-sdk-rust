// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Information about the <code>DeleteNetworkAclEntries</code> action in Amazon EC2. This is a remediation option in <code>RemediationAction</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct DeleteNetworkAclEntriesAction {
    /// <p>Brief description of this remediation action.</p>
    pub description: ::std::option::Option<::std::string::String>,
    /// <p>The network ACL that's associated with the remediation action.</p>
    pub network_acl_id: ::std::option::Option<crate::types::ActionTarget>,
    /// <p>Lists the entries that the remediation action would delete.</p>
    pub network_acl_entries_to_be_deleted: ::std::option::Option<::std::vec::Vec<crate::types::EntryDescription>>,
    /// <p>Indicates whether it is possible for Firewall Manager to perform this remediation action. A false value indicates that auto remediation is disabled or Firewall Manager is unable to perform the action due to a conflict of some kind.</p>
    pub fms_can_remediate: bool,
}
impl DeleteNetworkAclEntriesAction {
    /// <p>Brief description of this remediation action.</p>
    pub fn description(&self) -> ::std::option::Option<&str> {
        self.description.as_deref()
    }
    /// <p>The network ACL that's associated with the remediation action.</p>
    pub fn network_acl_id(&self) -> ::std::option::Option<&crate::types::ActionTarget> {
        self.network_acl_id.as_ref()
    }
    /// <p>Lists the entries that the remediation action would delete.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.network_acl_entries_to_be_deleted.is_none()`.
    pub fn network_acl_entries_to_be_deleted(&self) -> &[crate::types::EntryDescription] {
        self.network_acl_entries_to_be_deleted.as_deref().unwrap_or_default()
    }
    /// <p>Indicates whether it is possible for Firewall Manager to perform this remediation action. A false value indicates that auto remediation is disabled or Firewall Manager is unable to perform the action due to a conflict of some kind.</p>
    pub fn fms_can_remediate(&self) -> bool {
        self.fms_can_remediate
    }
}
impl DeleteNetworkAclEntriesAction {
    /// Creates a new builder-style object to manufacture [`DeleteNetworkAclEntriesAction`](crate::types::DeleteNetworkAclEntriesAction).
    pub fn builder() -> crate::types::builders::DeleteNetworkAclEntriesActionBuilder {
        crate::types::builders::DeleteNetworkAclEntriesActionBuilder::default()
    }
}

/// A builder for [`DeleteNetworkAclEntriesAction`](crate::types::DeleteNetworkAclEntriesAction).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct DeleteNetworkAclEntriesActionBuilder {
    pub(crate) description: ::std::option::Option<::std::string::String>,
    pub(crate) network_acl_id: ::std::option::Option<crate::types::ActionTarget>,
    pub(crate) network_acl_entries_to_be_deleted: ::std::option::Option<::std::vec::Vec<crate::types::EntryDescription>>,
    pub(crate) fms_can_remediate: ::std::option::Option<bool>,
}
impl DeleteNetworkAclEntriesActionBuilder {
    /// <p>Brief description of this remediation action.</p>
    pub fn description(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.description = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Brief description of this remediation action.</p>
    pub fn set_description(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.description = input;
        self
    }
    /// <p>Brief description of this remediation action.</p>
    pub fn get_description(&self) -> &::std::option::Option<::std::string::String> {
        &self.description
    }
    /// <p>The network ACL that's associated with the remediation action.</p>
    pub fn network_acl_id(mut self, input: crate::types::ActionTarget) -> Self {
        self.network_acl_id = ::std::option::Option::Some(input);
        self
    }
    /// <p>The network ACL that's associated with the remediation action.</p>
    pub fn set_network_acl_id(mut self, input: ::std::option::Option<crate::types::ActionTarget>) -> Self {
        self.network_acl_id = input;
        self
    }
    /// <p>The network ACL that's associated with the remediation action.</p>
    pub fn get_network_acl_id(&self) -> &::std::option::Option<crate::types::ActionTarget> {
        &self.network_acl_id
    }
    /// Appends an item to `network_acl_entries_to_be_deleted`.
    ///
    /// To override the contents of this collection use [`set_network_acl_entries_to_be_deleted`](Self::set_network_acl_entries_to_be_deleted).
    ///
    /// <p>Lists the entries that the remediation action would delete.</p>
    pub fn network_acl_entries_to_be_deleted(mut self, input: crate::types::EntryDescription) -> Self {
        let mut v = self.network_acl_entries_to_be_deleted.unwrap_or_default();
        v.push(input);
        self.network_acl_entries_to_be_deleted = ::std::option::Option::Some(v);
        self
    }
    /// <p>Lists the entries that the remediation action would delete.</p>
    pub fn set_network_acl_entries_to_be_deleted(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EntryDescription>>) -> Self {
        self.network_acl_entries_to_be_deleted = input;
        self
    }
    /// <p>Lists the entries that the remediation action would delete.</p>
    pub fn get_network_acl_entries_to_be_deleted(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EntryDescription>> {
        &self.network_acl_entries_to_be_deleted
    }
    /// <p>Indicates whether it is possible for Firewall Manager to perform this remediation action. A false value indicates that auto remediation is disabled or Firewall Manager is unable to perform the action due to a conflict of some kind.</p>
    pub fn fms_can_remediate(mut self, input: bool) -> Self {
        self.fms_can_remediate = ::std::option::Option::Some(input);
        self
    }
    /// <p>Indicates whether it is possible for Firewall Manager to perform this remediation action. A false value indicates that auto remediation is disabled or Firewall Manager is unable to perform the action due to a conflict of some kind.</p>
    pub fn set_fms_can_remediate(mut self, input: ::std::option::Option<bool>) -> Self {
        self.fms_can_remediate = input;
        self
    }
    /// <p>Indicates whether it is possible for Firewall Manager to perform this remediation action. A false value indicates that auto remediation is disabled or Firewall Manager is unable to perform the action due to a conflict of some kind.</p>
    pub fn get_fms_can_remediate(&self) -> &::std::option::Option<bool> {
        &self.fms_can_remediate
    }
    /// Consumes the builder and constructs a [`DeleteNetworkAclEntriesAction`](crate::types::DeleteNetworkAclEntriesAction).
    pub fn build(self) -> crate::types::DeleteNetworkAclEntriesAction {
        crate::types::DeleteNetworkAclEntriesAction {
            description: self.description,
            network_acl_id: self.network_acl_id,
            network_acl_entries_to_be_deleted: self.network_acl_entries_to_be_deleted,
            fms_can_remediate: self.fms_can_remediate.unwrap_or_default(),
        }
    }
}
