// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Detailed information about an entry violation in a network ACL. The violation is against the network ACL specification inside the Firewall Manager network ACL policy. This data object is part of <code>InvalidNetworkAclEntriesViolation</code>.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct EntryViolation {
    /// <p>The Firewall Manager-managed network ACL entry that is involved in the entry violation.</p>
    pub expected_entry: ::std::option::Option<crate::types::EntryDescription>,
    /// <p>The evaluation location within the ordered list of entries where the <code>ExpectedEntry</code> should be, according to the network ACL policy specifications.</p>
    pub expected_evaluation_order: ::std::option::Option<::std::string::String>,
    /// <p>The evaluation location within the ordered list of entries where the <code>ExpectedEntry</code> is currently located.</p>
    pub actual_evaluation_order: ::std::option::Option<::std::string::String>,
    /// <p>The entry that's currently in the <code>ExpectedEvaluationOrder</code> location, in place of the expected entry.</p>
    pub entry_at_expected_evaluation_order: ::std::option::Option<crate::types::EntryDescription>,
    /// <p>The list of entries that are in conflict with <code>ExpectedEntry</code>.</p>
    pub entries_with_conflicts: ::std::option::Option<::std::vec::Vec<crate::types::EntryDescription>>,
    /// <p>Descriptions of the violations that Firewall Manager found for these entries.</p>
    pub entry_violation_reasons: ::std::option::Option<::std::vec::Vec<crate::types::EntryViolationReason>>,
}
impl EntryViolation {
    /// <p>The Firewall Manager-managed network ACL entry that is involved in the entry violation.</p>
    pub fn expected_entry(&self) -> ::std::option::Option<&crate::types::EntryDescription> {
        self.expected_entry.as_ref()
    }
    /// <p>The evaluation location within the ordered list of entries where the <code>ExpectedEntry</code> should be, according to the network ACL policy specifications.</p>
    pub fn expected_evaluation_order(&self) -> ::std::option::Option<&str> {
        self.expected_evaluation_order.as_deref()
    }
    /// <p>The evaluation location within the ordered list of entries where the <code>ExpectedEntry</code> is currently located.</p>
    pub fn actual_evaluation_order(&self) -> ::std::option::Option<&str> {
        self.actual_evaluation_order.as_deref()
    }
    /// <p>The entry that's currently in the <code>ExpectedEvaluationOrder</code> location, in place of the expected entry.</p>
    pub fn entry_at_expected_evaluation_order(&self) -> ::std::option::Option<&crate::types::EntryDescription> {
        self.entry_at_expected_evaluation_order.as_ref()
    }
    /// <p>The list of entries that are in conflict with <code>ExpectedEntry</code>.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.entries_with_conflicts.is_none()`.
    pub fn entries_with_conflicts(&self) -> &[crate::types::EntryDescription] {
        self.entries_with_conflicts.as_deref().unwrap_or_default()
    }
    /// <p>Descriptions of the violations that Firewall Manager found for these entries.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.entry_violation_reasons.is_none()`.
    pub fn entry_violation_reasons(&self) -> &[crate::types::EntryViolationReason] {
        self.entry_violation_reasons.as_deref().unwrap_or_default()
    }
}
impl EntryViolation {
    /// Creates a new builder-style object to manufacture [`EntryViolation`](crate::types::EntryViolation).
    pub fn builder() -> crate::types::builders::EntryViolationBuilder {
        crate::types::builders::EntryViolationBuilder::default()
    }
}

/// A builder for [`EntryViolation`](crate::types::EntryViolation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct EntryViolationBuilder {
    pub(crate) expected_entry: ::std::option::Option<crate::types::EntryDescription>,
    pub(crate) expected_evaluation_order: ::std::option::Option<::std::string::String>,
    pub(crate) actual_evaluation_order: ::std::option::Option<::std::string::String>,
    pub(crate) entry_at_expected_evaluation_order: ::std::option::Option<crate::types::EntryDescription>,
    pub(crate) entries_with_conflicts: ::std::option::Option<::std::vec::Vec<crate::types::EntryDescription>>,
    pub(crate) entry_violation_reasons: ::std::option::Option<::std::vec::Vec<crate::types::EntryViolationReason>>,
}
impl EntryViolationBuilder {
    /// <p>The Firewall Manager-managed network ACL entry that is involved in the entry violation.</p>
    pub fn expected_entry(mut self, input: crate::types::EntryDescription) -> Self {
        self.expected_entry = ::std::option::Option::Some(input);
        self
    }
    /// <p>The Firewall Manager-managed network ACL entry that is involved in the entry violation.</p>
    pub fn set_expected_entry(mut self, input: ::std::option::Option<crate::types::EntryDescription>) -> Self {
        self.expected_entry = input;
        self
    }
    /// <p>The Firewall Manager-managed network ACL entry that is involved in the entry violation.</p>
    pub fn get_expected_entry(&self) -> &::std::option::Option<crate::types::EntryDescription> {
        &self.expected_entry
    }
    /// <p>The evaluation location within the ordered list of entries where the <code>ExpectedEntry</code> should be, according to the network ACL policy specifications.</p>
    pub fn expected_evaluation_order(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.expected_evaluation_order = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The evaluation location within the ordered list of entries where the <code>ExpectedEntry</code> should be, according to the network ACL policy specifications.</p>
    pub fn set_expected_evaluation_order(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.expected_evaluation_order = input;
        self
    }
    /// <p>The evaluation location within the ordered list of entries where the <code>ExpectedEntry</code> should be, according to the network ACL policy specifications.</p>
    pub fn get_expected_evaluation_order(&self) -> &::std::option::Option<::std::string::String> {
        &self.expected_evaluation_order
    }
    /// <p>The evaluation location within the ordered list of entries where the <code>ExpectedEntry</code> is currently located.</p>
    pub fn actual_evaluation_order(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.actual_evaluation_order = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The evaluation location within the ordered list of entries where the <code>ExpectedEntry</code> is currently located.</p>
    pub fn set_actual_evaluation_order(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.actual_evaluation_order = input;
        self
    }
    /// <p>The evaluation location within the ordered list of entries where the <code>ExpectedEntry</code> is currently located.</p>
    pub fn get_actual_evaluation_order(&self) -> &::std::option::Option<::std::string::String> {
        &self.actual_evaluation_order
    }
    /// <p>The entry that's currently in the <code>ExpectedEvaluationOrder</code> location, in place of the expected entry.</p>
    pub fn entry_at_expected_evaluation_order(mut self, input: crate::types::EntryDescription) -> Self {
        self.entry_at_expected_evaluation_order = ::std::option::Option::Some(input);
        self
    }
    /// <p>The entry that's currently in the <code>ExpectedEvaluationOrder</code> location, in place of the expected entry.</p>
    pub fn set_entry_at_expected_evaluation_order(mut self, input: ::std::option::Option<crate::types::EntryDescription>) -> Self {
        self.entry_at_expected_evaluation_order = input;
        self
    }
    /// <p>The entry that's currently in the <code>ExpectedEvaluationOrder</code> location, in place of the expected entry.</p>
    pub fn get_entry_at_expected_evaluation_order(&self) -> &::std::option::Option<crate::types::EntryDescription> {
        &self.entry_at_expected_evaluation_order
    }
    /// Appends an item to `entries_with_conflicts`.
    ///
    /// To override the contents of this collection use [`set_entries_with_conflicts`](Self::set_entries_with_conflicts).
    ///
    /// <p>The list of entries that are in conflict with <code>ExpectedEntry</code>.</p>
    pub fn entries_with_conflicts(mut self, input: crate::types::EntryDescription) -> Self {
        let mut v = self.entries_with_conflicts.unwrap_or_default();
        v.push(input);
        self.entries_with_conflicts = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of entries that are in conflict with <code>ExpectedEntry</code>.</p>
    pub fn set_entries_with_conflicts(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EntryDescription>>) -> Self {
        self.entries_with_conflicts = input;
        self
    }
    /// <p>The list of entries that are in conflict with <code>ExpectedEntry</code>.</p>
    pub fn get_entries_with_conflicts(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EntryDescription>> {
        &self.entries_with_conflicts
    }
    /// Appends an item to `entry_violation_reasons`.
    ///
    /// To override the contents of this collection use [`set_entry_violation_reasons`](Self::set_entry_violation_reasons).
    ///
    /// <p>Descriptions of the violations that Firewall Manager found for these entries.</p>
    pub fn entry_violation_reasons(mut self, input: crate::types::EntryViolationReason) -> Self {
        let mut v = self.entry_violation_reasons.unwrap_or_default();
        v.push(input);
        self.entry_violation_reasons = ::std::option::Option::Some(v);
        self
    }
    /// <p>Descriptions of the violations that Firewall Manager found for these entries.</p>
    pub fn set_entry_violation_reasons(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EntryViolationReason>>) -> Self {
        self.entry_violation_reasons = input;
        self
    }
    /// <p>Descriptions of the violations that Firewall Manager found for these entries.</p>
    pub fn get_entry_violation_reasons(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EntryViolationReason>> {
        &self.entry_violation_reasons
    }
    /// Consumes the builder and constructs a [`EntryViolation`](crate::types::EntryViolation).
    pub fn build(self) -> crate::types::EntryViolation {
        crate::types::EntryViolation {
            expected_entry: self.expected_entry,
            expected_evaluation_order: self.expected_evaluation_order,
            actual_evaluation_order: self.actual_evaluation_order,
            entry_at_expected_evaluation_order: self.entry_at_expected_evaluation_order,
            entries_with_conflicts: self.entries_with_conflicts,
            entry_violation_reasons: self.entry_violation_reasons,
        }
    }
}
