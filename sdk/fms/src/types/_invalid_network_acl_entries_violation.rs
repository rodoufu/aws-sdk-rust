// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Violation detail for the entries in a network ACL resource.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InvalidNetworkAclEntriesViolation {
    /// <p>The VPC where the violation was found.</p>
    pub vpc: ::std::option::Option<::std::string::String>,
    /// <p>The subnet that's associated with the network ACL.</p>
    pub subnet: ::std::option::Option<::std::string::String>,
    /// <p>The Availability Zone where the network ACL is in use.</p>
    pub subnet_availability_zone: ::std::option::Option<::std::string::String>,
    /// <p>The network ACL containing the entry violations.</p>
    pub current_associated_network_acl: ::std::option::Option<::std::string::String>,
    /// <p>Detailed information about the entry violations in the network ACL.</p>
    pub entry_violations: ::std::option::Option<::std::vec::Vec<crate::types::EntryViolation>>,
}
impl InvalidNetworkAclEntriesViolation {
    /// <p>The VPC where the violation was found.</p>
    pub fn vpc(&self) -> ::std::option::Option<&str> {
        self.vpc.as_deref()
    }
    /// <p>The subnet that's associated with the network ACL.</p>
    pub fn subnet(&self) -> ::std::option::Option<&str> {
        self.subnet.as_deref()
    }
    /// <p>The Availability Zone where the network ACL is in use.</p>
    pub fn subnet_availability_zone(&self) -> ::std::option::Option<&str> {
        self.subnet_availability_zone.as_deref()
    }
    /// <p>The network ACL containing the entry violations.</p>
    pub fn current_associated_network_acl(&self) -> ::std::option::Option<&str> {
        self.current_associated_network_acl.as_deref()
    }
    /// <p>Detailed information about the entry violations in the network ACL.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.entry_violations.is_none()`.
    pub fn entry_violations(&self) -> &[crate::types::EntryViolation] {
        self.entry_violations.as_deref().unwrap_or_default()
    }
}
impl InvalidNetworkAclEntriesViolation {
    /// Creates a new builder-style object to manufacture [`InvalidNetworkAclEntriesViolation`](crate::types::InvalidNetworkAclEntriesViolation).
    pub fn builder() -> crate::types::builders::InvalidNetworkAclEntriesViolationBuilder {
        crate::types::builders::InvalidNetworkAclEntriesViolationBuilder::default()
    }
}

/// A builder for [`InvalidNetworkAclEntriesViolation`](crate::types::InvalidNetworkAclEntriesViolation).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InvalidNetworkAclEntriesViolationBuilder {
    pub(crate) vpc: ::std::option::Option<::std::string::String>,
    pub(crate) subnet: ::std::option::Option<::std::string::String>,
    pub(crate) subnet_availability_zone: ::std::option::Option<::std::string::String>,
    pub(crate) current_associated_network_acl: ::std::option::Option<::std::string::String>,
    pub(crate) entry_violations: ::std::option::Option<::std::vec::Vec<crate::types::EntryViolation>>,
}
impl InvalidNetworkAclEntriesViolationBuilder {
    /// <p>The VPC where the violation was found.</p>
    pub fn vpc(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.vpc = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The VPC where the violation was found.</p>
    pub fn set_vpc(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.vpc = input;
        self
    }
    /// <p>The VPC where the violation was found.</p>
    pub fn get_vpc(&self) -> &::std::option::Option<::std::string::String> {
        &self.vpc
    }
    /// <p>The subnet that's associated with the network ACL.</p>
    pub fn subnet(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The subnet that's associated with the network ACL.</p>
    pub fn set_subnet(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet = input;
        self
    }
    /// <p>The subnet that's associated with the network ACL.</p>
    pub fn get_subnet(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet
    }
    /// <p>The Availability Zone where the network ACL is in use.</p>
    pub fn subnet_availability_zone(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.subnet_availability_zone = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Availability Zone where the network ACL is in use.</p>
    pub fn set_subnet_availability_zone(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.subnet_availability_zone = input;
        self
    }
    /// <p>The Availability Zone where the network ACL is in use.</p>
    pub fn get_subnet_availability_zone(&self) -> &::std::option::Option<::std::string::String> {
        &self.subnet_availability_zone
    }
    /// <p>The network ACL containing the entry violations.</p>
    pub fn current_associated_network_acl(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.current_associated_network_acl = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The network ACL containing the entry violations.</p>
    pub fn set_current_associated_network_acl(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.current_associated_network_acl = input;
        self
    }
    /// <p>The network ACL containing the entry violations.</p>
    pub fn get_current_associated_network_acl(&self) -> &::std::option::Option<::std::string::String> {
        &self.current_associated_network_acl
    }
    /// Appends an item to `entry_violations`.
    ///
    /// To override the contents of this collection use [`set_entry_violations`](Self::set_entry_violations).
    ///
    /// <p>Detailed information about the entry violations in the network ACL.</p>
    pub fn entry_violations(mut self, input: crate::types::EntryViolation) -> Self {
        let mut v = self.entry_violations.unwrap_or_default();
        v.push(input);
        self.entry_violations = ::std::option::Option::Some(v);
        self
    }
    /// <p>Detailed information about the entry violations in the network ACL.</p>
    pub fn set_entry_violations(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::EntryViolation>>) -> Self {
        self.entry_violations = input;
        self
    }
    /// <p>Detailed information about the entry violations in the network ACL.</p>
    pub fn get_entry_violations(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::EntryViolation>> {
        &self.entry_violations
    }
    /// Consumes the builder and constructs a [`InvalidNetworkAclEntriesViolation`](crate::types::InvalidNetworkAclEntriesViolation).
    pub fn build(self) -> crate::types::InvalidNetworkAclEntriesViolation {
        crate::types::InvalidNetworkAclEntriesViolation {
            vpc: self.vpc,
            subnet: self.subnet,
            subnet_availability_zone: self.subnet_availability_zone,
            current_associated_network_acl: self.current_associated_network_acl,
            entry_violations: self.entry_violations,
        }
    }
}
