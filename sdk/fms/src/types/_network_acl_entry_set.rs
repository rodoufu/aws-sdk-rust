// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The configuration of the first and last rules for the network ACL policy, and the remediation settings for each.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NetworkAclEntrySet {
    /// <p>The rules that you want to run first in the Firewall Manager managed network ACLs.</p><note>
    /// <p>Provide these in the order in which you want them to run. Firewall Manager will assign the specific rule numbers for you, in the network ACLs that it creates.</p>
    /// </note>
    pub first_entries: ::std::option::Option<::std::vec::Vec<crate::types::NetworkAclEntry>>,
    /// <p>Applies only when remediation is enabled for the policy as a whole. Firewall Manager uses this setting when it finds policy violations that involve conflicts between the custom entries and the policy entries.</p>
    /// <p>If forced remediation is disabled, Firewall Manager marks the network ACL as noncompliant and does not try to remediate. For more information about the remediation behavior, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/network-acl-policies.html">Network access control list (ACL) policies</a> in the <i>Firewall Manager Developer Guide</i>.</p>
    pub force_remediate_for_first_entries: bool,
    /// <p>The rules that you want to run last in the Firewall Manager managed network ACLs.</p><note>
    /// <p>Provide these in the order in which you want them to run. Firewall Manager will assign the specific rule numbers for you, in the network ACLs that it creates.</p>
    /// </note>
    pub last_entries: ::std::option::Option<::std::vec::Vec<crate::types::NetworkAclEntry>>,
    /// <p>Applies only when remediation is enabled for the policy as a whole. Firewall Manager uses this setting when it finds policy violations that involve conflicts between the custom entries and the policy entries.</p>
    /// <p>If forced remediation is disabled, Firewall Manager marks the network ACL as noncompliant and does not try to remediate. For more information about the remediation behavior, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/network-acl-policies.html">Network access control list (ACL) policies</a> in the <i>Firewall Manager Developer Guide</i>.</p>
    pub force_remediate_for_last_entries: bool,
}
impl NetworkAclEntrySet {
    /// <p>The rules that you want to run first in the Firewall Manager managed network ACLs.</p><note>
    /// <p>Provide these in the order in which you want them to run. Firewall Manager will assign the specific rule numbers for you, in the network ACLs that it creates.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.first_entries.is_none()`.
    pub fn first_entries(&self) -> &[crate::types::NetworkAclEntry] {
        self.first_entries.as_deref().unwrap_or_default()
    }
    /// <p>Applies only when remediation is enabled for the policy as a whole. Firewall Manager uses this setting when it finds policy violations that involve conflicts between the custom entries and the policy entries.</p>
    /// <p>If forced remediation is disabled, Firewall Manager marks the network ACL as noncompliant and does not try to remediate. For more information about the remediation behavior, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/network-acl-policies.html">Network access control list (ACL) policies</a> in the <i>Firewall Manager Developer Guide</i>.</p>
    pub fn force_remediate_for_first_entries(&self) -> bool {
        self.force_remediate_for_first_entries
    }
    /// <p>The rules that you want to run last in the Firewall Manager managed network ACLs.</p><note>
    /// <p>Provide these in the order in which you want them to run. Firewall Manager will assign the specific rule numbers for you, in the network ACLs that it creates.</p>
    /// </note>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.last_entries.is_none()`.
    pub fn last_entries(&self) -> &[crate::types::NetworkAclEntry] {
        self.last_entries.as_deref().unwrap_or_default()
    }
    /// <p>Applies only when remediation is enabled for the policy as a whole. Firewall Manager uses this setting when it finds policy violations that involve conflicts between the custom entries and the policy entries.</p>
    /// <p>If forced remediation is disabled, Firewall Manager marks the network ACL as noncompliant and does not try to remediate. For more information about the remediation behavior, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/network-acl-policies.html">Network access control list (ACL) policies</a> in the <i>Firewall Manager Developer Guide</i>.</p>
    pub fn force_remediate_for_last_entries(&self) -> bool {
        self.force_remediate_for_last_entries
    }
}
impl NetworkAclEntrySet {
    /// Creates a new builder-style object to manufacture [`NetworkAclEntrySet`](crate::types::NetworkAclEntrySet).
    pub fn builder() -> crate::types::builders::NetworkAclEntrySetBuilder {
        crate::types::builders::NetworkAclEntrySetBuilder::default()
    }
}

/// A builder for [`NetworkAclEntrySet`](crate::types::NetworkAclEntrySet).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NetworkAclEntrySetBuilder {
    pub(crate) first_entries: ::std::option::Option<::std::vec::Vec<crate::types::NetworkAclEntry>>,
    pub(crate) force_remediate_for_first_entries: ::std::option::Option<bool>,
    pub(crate) last_entries: ::std::option::Option<::std::vec::Vec<crate::types::NetworkAclEntry>>,
    pub(crate) force_remediate_for_last_entries: ::std::option::Option<bool>,
}
impl NetworkAclEntrySetBuilder {
    /// Appends an item to `first_entries`.
    ///
    /// To override the contents of this collection use [`set_first_entries`](Self::set_first_entries).
    ///
    /// <p>The rules that you want to run first in the Firewall Manager managed network ACLs.</p><note>
    /// <p>Provide these in the order in which you want them to run. Firewall Manager will assign the specific rule numbers for you, in the network ACLs that it creates.</p>
    /// </note>
    pub fn first_entries(mut self, input: crate::types::NetworkAclEntry) -> Self {
        let mut v = self.first_entries.unwrap_or_default();
        v.push(input);
        self.first_entries = ::std::option::Option::Some(v);
        self
    }
    /// <p>The rules that you want to run first in the Firewall Manager managed network ACLs.</p><note>
    /// <p>Provide these in the order in which you want them to run. Firewall Manager will assign the specific rule numbers for you, in the network ACLs that it creates.</p>
    /// </note>
    pub fn set_first_entries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NetworkAclEntry>>) -> Self {
        self.first_entries = input;
        self
    }
    /// <p>The rules that you want to run first in the Firewall Manager managed network ACLs.</p><note>
    /// <p>Provide these in the order in which you want them to run. Firewall Manager will assign the specific rule numbers for you, in the network ACLs that it creates.</p>
    /// </note>
    pub fn get_first_entries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NetworkAclEntry>> {
        &self.first_entries
    }
    /// <p>Applies only when remediation is enabled for the policy as a whole. Firewall Manager uses this setting when it finds policy violations that involve conflicts between the custom entries and the policy entries.</p>
    /// <p>If forced remediation is disabled, Firewall Manager marks the network ACL as noncompliant and does not try to remediate. For more information about the remediation behavior, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/network-acl-policies.html">Network access control list (ACL) policies</a> in the <i>Firewall Manager Developer Guide</i>.</p>
    /// This field is required.
    pub fn force_remediate_for_first_entries(mut self, input: bool) -> Self {
        self.force_remediate_for_first_entries = ::std::option::Option::Some(input);
        self
    }
    /// <p>Applies only when remediation is enabled for the policy as a whole. Firewall Manager uses this setting when it finds policy violations that involve conflicts between the custom entries and the policy entries.</p>
    /// <p>If forced remediation is disabled, Firewall Manager marks the network ACL as noncompliant and does not try to remediate. For more information about the remediation behavior, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/network-acl-policies.html">Network access control list (ACL) policies</a> in the <i>Firewall Manager Developer Guide</i>.</p>
    pub fn set_force_remediate_for_first_entries(mut self, input: ::std::option::Option<bool>) -> Self {
        self.force_remediate_for_first_entries = input;
        self
    }
    /// <p>Applies only when remediation is enabled for the policy as a whole. Firewall Manager uses this setting when it finds policy violations that involve conflicts between the custom entries and the policy entries.</p>
    /// <p>If forced remediation is disabled, Firewall Manager marks the network ACL as noncompliant and does not try to remediate. For more information about the remediation behavior, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/network-acl-policies.html">Network access control list (ACL) policies</a> in the <i>Firewall Manager Developer Guide</i>.</p>
    pub fn get_force_remediate_for_first_entries(&self) -> &::std::option::Option<bool> {
        &self.force_remediate_for_first_entries
    }
    /// Appends an item to `last_entries`.
    ///
    /// To override the contents of this collection use [`set_last_entries`](Self::set_last_entries).
    ///
    /// <p>The rules that you want to run last in the Firewall Manager managed network ACLs.</p><note>
    /// <p>Provide these in the order in which you want them to run. Firewall Manager will assign the specific rule numbers for you, in the network ACLs that it creates.</p>
    /// </note>
    pub fn last_entries(mut self, input: crate::types::NetworkAclEntry) -> Self {
        let mut v = self.last_entries.unwrap_or_default();
        v.push(input);
        self.last_entries = ::std::option::Option::Some(v);
        self
    }
    /// <p>The rules that you want to run last in the Firewall Manager managed network ACLs.</p><note>
    /// <p>Provide these in the order in which you want them to run. Firewall Manager will assign the specific rule numbers for you, in the network ACLs that it creates.</p>
    /// </note>
    pub fn set_last_entries(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::NetworkAclEntry>>) -> Self {
        self.last_entries = input;
        self
    }
    /// <p>The rules that you want to run last in the Firewall Manager managed network ACLs.</p><note>
    /// <p>Provide these in the order in which you want them to run. Firewall Manager will assign the specific rule numbers for you, in the network ACLs that it creates.</p>
    /// </note>
    pub fn get_last_entries(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::NetworkAclEntry>> {
        &self.last_entries
    }
    /// <p>Applies only when remediation is enabled for the policy as a whole. Firewall Manager uses this setting when it finds policy violations that involve conflicts between the custom entries and the policy entries.</p>
    /// <p>If forced remediation is disabled, Firewall Manager marks the network ACL as noncompliant and does not try to remediate. For more information about the remediation behavior, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/network-acl-policies.html">Network access control list (ACL) policies</a> in the <i>Firewall Manager Developer Guide</i>.</p>
    /// This field is required.
    pub fn force_remediate_for_last_entries(mut self, input: bool) -> Self {
        self.force_remediate_for_last_entries = ::std::option::Option::Some(input);
        self
    }
    /// <p>Applies only when remediation is enabled for the policy as a whole. Firewall Manager uses this setting when it finds policy violations that involve conflicts between the custom entries and the policy entries.</p>
    /// <p>If forced remediation is disabled, Firewall Manager marks the network ACL as noncompliant and does not try to remediate. For more information about the remediation behavior, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/network-acl-policies.html">Network access control list (ACL) policies</a> in the <i>Firewall Manager Developer Guide</i>.</p>
    pub fn set_force_remediate_for_last_entries(mut self, input: ::std::option::Option<bool>) -> Self {
        self.force_remediate_for_last_entries = input;
        self
    }
    /// <p>Applies only when remediation is enabled for the policy as a whole. Firewall Manager uses this setting when it finds policy violations that involve conflicts between the custom entries and the policy entries.</p>
    /// <p>If forced remediation is disabled, Firewall Manager marks the network ACL as noncompliant and does not try to remediate. For more information about the remediation behavior, see <a href="https://docs.aws.amazon.com/waf/latest/developerguide/network-acl-policies.html">Network access control list (ACL) policies</a> in the <i>Firewall Manager Developer Guide</i>.</p>
    pub fn get_force_remediate_for_last_entries(&self) -> &::std::option::Option<bool> {
        &self.force_remediate_for_last_entries
    }
    /// Consumes the builder and constructs a [`NetworkAclEntrySet`](crate::types::NetworkAclEntrySet).
    /// This method will fail if any of the following fields are not set:
    /// - [`force_remediate_for_first_entries`](crate::types::builders::NetworkAclEntrySetBuilder::force_remediate_for_first_entries)
    /// - [`force_remediate_for_last_entries`](crate::types::builders::NetworkAclEntrySetBuilder::force_remediate_for_last_entries)
    pub fn build(self) -> ::std::result::Result<crate::types::NetworkAclEntrySet, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::NetworkAclEntrySet {
            first_entries: self.first_entries,
            force_remediate_for_first_entries: self.force_remediate_for_first_entries.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "force_remediate_for_first_entries",
                    "force_remediate_for_first_entries was not specified but it is required when building NetworkAclEntrySet",
                )
            })?,
            last_entries: self.last_entries,
            force_remediate_for_last_entries: self.force_remediate_for_last_entries.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "force_remediate_for_last_entries",
                    "force_remediate_for_last_entries was not specified but it is required when building NetworkAclEntrySet",
                )
            })?,
        })
    }
}
