// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>ICMP protocol: The ICMP type and code.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NetworkAclIcmpTypeCode {
    /// <p>ICMP code.</p>
    pub code: ::std::option::Option<i32>,
    /// <p>ICMP type.</p>
    pub r#type: ::std::option::Option<i32>,
}
impl NetworkAclIcmpTypeCode {
    /// <p>ICMP code.</p>
    pub fn code(&self) -> ::std::option::Option<i32> {
        self.code
    }
    /// <p>ICMP type.</p>
    pub fn r#type(&self) -> ::std::option::Option<i32> {
        self.r#type
    }
}
impl NetworkAclIcmpTypeCode {
    /// Creates a new builder-style object to manufacture [`NetworkAclIcmpTypeCode`](crate::types::NetworkAclIcmpTypeCode).
    pub fn builder() -> crate::types::builders::NetworkAclIcmpTypeCodeBuilder {
        crate::types::builders::NetworkAclIcmpTypeCodeBuilder::default()
    }
}

/// A builder for [`NetworkAclIcmpTypeCode`](crate::types::NetworkAclIcmpTypeCode).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NetworkAclIcmpTypeCodeBuilder {
    pub(crate) code: ::std::option::Option<i32>,
    pub(crate) r#type: ::std::option::Option<i32>,
}
impl NetworkAclIcmpTypeCodeBuilder {
    /// <p>ICMP code.</p>
    pub fn code(mut self, input: i32) -> Self {
        self.code = ::std::option::Option::Some(input);
        self
    }
    /// <p>ICMP code.</p>
    pub fn set_code(mut self, input: ::std::option::Option<i32>) -> Self {
        self.code = input;
        self
    }
    /// <p>ICMP code.</p>
    pub fn get_code(&self) -> &::std::option::Option<i32> {
        &self.code
    }
    /// <p>ICMP type.</p>
    pub fn r#type(mut self, input: i32) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>ICMP type.</p>
    pub fn set_type(mut self, input: ::std::option::Option<i32>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>ICMP type.</p>
    pub fn get_type(&self) -> &::std::option::Option<i32> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`NetworkAclIcmpTypeCode`](crate::types::NetworkAclIcmpTypeCode).
    pub fn build(self) -> crate::types::NetworkAclIcmpTypeCode {
        crate::types::NetworkAclIcmpTypeCode {
            code: self.code,
            r#type: self.r#type,
        }
    }
}
