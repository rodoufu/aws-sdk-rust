// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>TCP or UDP protocols: The range of ports the rule applies to.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct NetworkAclPortRange {
    /// <p>The beginning port number of the range.</p>
    pub from: ::std::option::Option<i32>,
    /// <p>The ending port number of the range.</p>
    pub to: ::std::option::Option<i32>,
}
impl NetworkAclPortRange {
    /// <p>The beginning port number of the range.</p>
    pub fn from(&self) -> ::std::option::Option<i32> {
        self.from
    }
    /// <p>The ending port number of the range.</p>
    pub fn to(&self) -> ::std::option::Option<i32> {
        self.to
    }
}
impl NetworkAclPortRange {
    /// Creates a new builder-style object to manufacture [`NetworkAclPortRange`](crate::types::NetworkAclPortRange).
    pub fn builder() -> crate::types::builders::NetworkAclPortRangeBuilder {
        crate::types::builders::NetworkAclPortRangeBuilder::default()
    }
}

/// A builder for [`NetworkAclPortRange`](crate::types::NetworkAclPortRange).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct NetworkAclPortRangeBuilder {
    pub(crate) from: ::std::option::Option<i32>,
    pub(crate) to: ::std::option::Option<i32>,
}
impl NetworkAclPortRangeBuilder {
    /// <p>The beginning port number of the range.</p>
    pub fn from(mut self, input: i32) -> Self {
        self.from = ::std::option::Option::Some(input);
        self
    }
    /// <p>The beginning port number of the range.</p>
    pub fn set_from(mut self, input: ::std::option::Option<i32>) -> Self {
        self.from = input;
        self
    }
    /// <p>The beginning port number of the range.</p>
    pub fn get_from(&self) -> &::std::option::Option<i32> {
        &self.from
    }
    /// <p>The ending port number of the range.</p>
    pub fn to(mut self, input: i32) -> Self {
        self.to = ::std::option::Option::Some(input);
        self
    }
    /// <p>The ending port number of the range.</p>
    pub fn set_to(mut self, input: ::std::option::Option<i32>) -> Self {
        self.to = input;
        self
    }
    /// <p>The ending port number of the range.</p>
    pub fn get_to(&self) -> &::std::option::Option<i32> {
        &self.to
    }
    /// Consumes the builder and constructs a [`NetworkAclPortRange`](crate::types::NetworkAclPortRange).
    pub fn build(self) -> crate::types::NetworkAclPortRange {
        crate::types::NetworkAclPortRange {
            from: self.from,
            to: self.to,
        }
    }
}
