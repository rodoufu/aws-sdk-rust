// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Contains the settings to configure a network ACL policy, a Network Firewall firewall policy deployment model, or a third-party firewall policy.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct PolicyOption {
    /// <p>Defines the deployment model to use for the firewall policy.</p>
    pub network_firewall_policy: ::std::option::Option<crate::types::NetworkFirewallPolicy>,
    /// <p>Defines the policy options for a third-party firewall policy.</p>
    pub third_party_firewall_policy: ::std::option::Option<crate::types::ThirdPartyFirewallPolicy>,
    /// <p>Defines a Firewall Manager network ACL policy.</p>
    pub network_acl_common_policy: ::std::option::Option<crate::types::NetworkAclCommonPolicy>,
}
impl PolicyOption {
    /// <p>Defines the deployment model to use for the firewall policy.</p>
    pub fn network_firewall_policy(&self) -> ::std::option::Option<&crate::types::NetworkFirewallPolicy> {
        self.network_firewall_policy.as_ref()
    }
    /// <p>Defines the policy options for a third-party firewall policy.</p>
    pub fn third_party_firewall_policy(&self) -> ::std::option::Option<&crate::types::ThirdPartyFirewallPolicy> {
        self.third_party_firewall_policy.as_ref()
    }
    /// <p>Defines a Firewall Manager network ACL policy.</p>
    pub fn network_acl_common_policy(&self) -> ::std::option::Option<&crate::types::NetworkAclCommonPolicy> {
        self.network_acl_common_policy.as_ref()
    }
}
impl PolicyOption {
    /// Creates a new builder-style object to manufacture [`PolicyOption`](crate::types::PolicyOption).
    pub fn builder() -> crate::types::builders::PolicyOptionBuilder {
        crate::types::builders::PolicyOptionBuilder::default()
    }
}

/// A builder for [`PolicyOption`](crate::types::PolicyOption).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct PolicyOptionBuilder {
    pub(crate) network_firewall_policy: ::std::option::Option<crate::types::NetworkFirewallPolicy>,
    pub(crate) third_party_firewall_policy: ::std::option::Option<crate::types::ThirdPartyFirewallPolicy>,
    pub(crate) network_acl_common_policy: ::std::option::Option<crate::types::NetworkAclCommonPolicy>,
}
impl PolicyOptionBuilder {
    /// <p>Defines the deployment model to use for the firewall policy.</p>
    pub fn network_firewall_policy(mut self, input: crate::types::NetworkFirewallPolicy) -> Self {
        self.network_firewall_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the deployment model to use for the firewall policy.</p>
    pub fn set_network_firewall_policy(mut self, input: ::std::option::Option<crate::types::NetworkFirewallPolicy>) -> Self {
        self.network_firewall_policy = input;
        self
    }
    /// <p>Defines the deployment model to use for the firewall policy.</p>
    pub fn get_network_firewall_policy(&self) -> &::std::option::Option<crate::types::NetworkFirewallPolicy> {
        &self.network_firewall_policy
    }
    /// <p>Defines the policy options for a third-party firewall policy.</p>
    pub fn third_party_firewall_policy(mut self, input: crate::types::ThirdPartyFirewallPolicy) -> Self {
        self.third_party_firewall_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines the policy options for a third-party firewall policy.</p>
    pub fn set_third_party_firewall_policy(mut self, input: ::std::option::Option<crate::types::ThirdPartyFirewallPolicy>) -> Self {
        self.third_party_firewall_policy = input;
        self
    }
    /// <p>Defines the policy options for a third-party firewall policy.</p>
    pub fn get_third_party_firewall_policy(&self) -> &::std::option::Option<crate::types::ThirdPartyFirewallPolicy> {
        &self.third_party_firewall_policy
    }
    /// <p>Defines a Firewall Manager network ACL policy.</p>
    pub fn network_acl_common_policy(mut self, input: crate::types::NetworkAclCommonPolicy) -> Self {
        self.network_acl_common_policy = ::std::option::Option::Some(input);
        self
    }
    /// <p>Defines a Firewall Manager network ACL policy.</p>
    pub fn set_network_acl_common_policy(mut self, input: ::std::option::Option<crate::types::NetworkAclCommonPolicy>) -> Self {
        self.network_acl_common_policy = input;
        self
    }
    /// <p>Defines a Firewall Manager network ACL policy.</p>
    pub fn get_network_acl_common_policy(&self) -> &::std::option::Option<crate::types::NetworkAclCommonPolicy> {
        &self.network_acl_common_policy
    }
    /// Consumes the builder and constructs a [`PolicyOption`](crate::types::PolicyOption).
    pub fn build(self) -> crate::types::PolicyOption {
        crate::types::PolicyOption {
            network_firewall_policy: self.network_firewall_policy,
            third_party_firewall_policy: self.third_party_firewall_policy,
            network_acl_common_policy: self.network_acl_common_policy,
        }
    }
}
