// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
impl super::Client {
    /// Constructs a fluent builder for the [`DeregisterCompute`](crate::operation::deregister_compute::builders::DeregisterComputeFluentBuilder) operation.
    ///
    /// - The fluent builder is configurable:
    ///   - [`fleet_id(impl Into<String>)`](crate::operation::deregister_compute::builders::DeregisterComputeFluentBuilder::fleet_id) / [`set_fleet_id(Option<String>)`](crate::operation::deregister_compute::builders::DeregisterComputeFluentBuilder::set_fleet_id):<br>required: **true**<br><p>A unique identifier for the fleet the compute resource is currently registered to.</p><br>
    ///   - [`compute_name(impl Into<String>)`](crate::operation::deregister_compute::builders::DeregisterComputeFluentBuilder::compute_name) / [`set_compute_name(Option<String>)`](crate::operation::deregister_compute::builders::DeregisterComputeFluentBuilder::set_compute_name):<br>required: **true**<br><p>The unique identifier of the compute resource to deregister. For an Anywhere fleet compute, use the registered compute name. For a container fleet, use the compute name (for example, <code>a123b456c789012d3e4567f8a901b23c/1a234b56-7cd8-9e0f-a1b2-c34d567ef8a9</code>) or the compute ARN.</p><br>
    /// - On success, responds with [`DeregisterComputeOutput`](crate::operation::deregister_compute::DeregisterComputeOutput)
    /// - On failure, responds with [`SdkError<DeregisterComputeError>`](crate::operation::deregister_compute::DeregisterComputeError)
    pub fn deregister_compute(&self) -> crate::operation::deregister_compute::builders::DeregisterComputeFluentBuilder {
        crate::operation::deregister_compute::builders::DeregisterComputeFluentBuilder::new(self.handle.clone())
    }
}
