// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ListContainerGroupDefinitionsInput {
    /// <p>The type of container group definitions to retrieve.</p>
    /// <ul>
    /// <li>
    /// <p><code>DAEMON</code> -- Daemon container groups run background processes and are deployed once per fleet instance.</p></li>
    /// <li>
    /// <p><code>REPLICA</code> -- Replica container groups run your game server application and supporting software. Replica groups might be deployed multiple times per fleet instance.</p></li>
    /// </ul>
    pub scheduling_strategy: ::std::option::Option<crate::types::ContainerSchedulingStrategy>,
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    pub limit: ::std::option::Option<i32>,
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    pub next_token: ::std::option::Option<::std::string::String>,
}
impl ListContainerGroupDefinitionsInput {
    /// <p>The type of container group definitions to retrieve.</p>
    /// <ul>
    /// <li>
    /// <p><code>DAEMON</code> -- Daemon container groups run background processes and are deployed once per fleet instance.</p></li>
    /// <li>
    /// <p><code>REPLICA</code> -- Replica container groups run your game server application and supporting software. Replica groups might be deployed multiple times per fleet instance.</p></li>
    /// </ul>
    pub fn scheduling_strategy(&self) -> ::std::option::Option<&crate::types::ContainerSchedulingStrategy> {
        self.scheduling_strategy.as_ref()
    }
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    pub fn limit(&self) -> ::std::option::Option<i32> {
        self.limit
    }
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    pub fn next_token(&self) -> ::std::option::Option<&str> {
        self.next_token.as_deref()
    }
}
impl ListContainerGroupDefinitionsInput {
    /// Creates a new builder-style object to manufacture [`ListContainerGroupDefinitionsInput`](crate::operation::list_container_group_definitions::ListContainerGroupDefinitionsInput).
    pub fn builder() -> crate::operation::list_container_group_definitions::builders::ListContainerGroupDefinitionsInputBuilder {
        crate::operation::list_container_group_definitions::builders::ListContainerGroupDefinitionsInputBuilder::default()
    }
}

/// A builder for [`ListContainerGroupDefinitionsInput`](crate::operation::list_container_group_definitions::ListContainerGroupDefinitionsInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ListContainerGroupDefinitionsInputBuilder {
    pub(crate) scheduling_strategy: ::std::option::Option<crate::types::ContainerSchedulingStrategy>,
    pub(crate) limit: ::std::option::Option<i32>,
    pub(crate) next_token: ::std::option::Option<::std::string::String>,
}
impl ListContainerGroupDefinitionsInputBuilder {
    /// <p>The type of container group definitions to retrieve.</p>
    /// <ul>
    /// <li>
    /// <p><code>DAEMON</code> -- Daemon container groups run background processes and are deployed once per fleet instance.</p></li>
    /// <li>
    /// <p><code>REPLICA</code> -- Replica container groups run your game server application and supporting software. Replica groups might be deployed multiple times per fleet instance.</p></li>
    /// </ul>
    pub fn scheduling_strategy(mut self, input: crate::types::ContainerSchedulingStrategy) -> Self {
        self.scheduling_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of container group definitions to retrieve.</p>
    /// <ul>
    /// <li>
    /// <p><code>DAEMON</code> -- Daemon container groups run background processes and are deployed once per fleet instance.</p></li>
    /// <li>
    /// <p><code>REPLICA</code> -- Replica container groups run your game server application and supporting software. Replica groups might be deployed multiple times per fleet instance.</p></li>
    /// </ul>
    pub fn set_scheduling_strategy(mut self, input: ::std::option::Option<crate::types::ContainerSchedulingStrategy>) -> Self {
        self.scheduling_strategy = input;
        self
    }
    /// <p>The type of container group definitions to retrieve.</p>
    /// <ul>
    /// <li>
    /// <p><code>DAEMON</code> -- Daemon container groups run background processes and are deployed once per fleet instance.</p></li>
    /// <li>
    /// <p><code>REPLICA</code> -- Replica container groups run your game server application and supporting software. Replica groups might be deployed multiple times per fleet instance.</p></li>
    /// </ul>
    pub fn get_scheduling_strategy(&self) -> &::std::option::Option<crate::types::ContainerSchedulingStrategy> {
        &self.scheduling_strategy
    }
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.limit = input;
        self
    }
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        &self.limit
    }
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.next_token = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.next_token = input;
        self
    }
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        &self.next_token
    }
    /// Consumes the builder and constructs a [`ListContainerGroupDefinitionsInput`](crate::operation::list_container_group_definitions::ListContainerGroupDefinitionsInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_container_group_definitions::ListContainerGroupDefinitionsInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::list_container_group_definitions::ListContainerGroupDefinitionsInput {
            scheduling_strategy: self.scheduling_strategy,
            limit: self.limit,
            next_token: self.next_token,
        })
    }
}
