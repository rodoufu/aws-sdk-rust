// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub use crate::operation::list_container_group_definitions::_list_container_group_definitions_output::ListContainerGroupDefinitionsOutputBuilder;

pub use crate::operation::list_container_group_definitions::_list_container_group_definitions_input::ListContainerGroupDefinitionsInputBuilder;

impl crate::operation::list_container_group_definitions::builders::ListContainerGroupDefinitionsInputBuilder {
    /// Sends a request with this input using the given client.
    pub async fn send_with(
        self,
        client: &crate::Client,
    ) -> ::std::result::Result<
        crate::operation::list_container_group_definitions::ListContainerGroupDefinitionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_container_group_definitions::ListContainerGroupDefinitionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let mut fluent_builder = client.list_container_group_definitions();
        fluent_builder.inner = self;
        fluent_builder.send().await
    }
}
/// Fluent builder constructing a request to `ListContainerGroupDefinitions`.
///
/// <p><b>This operation is used with the Amazon GameLift containers feature, which is currently in public preview. </b></p>
/// <p>Retrieves all container group definitions for the Amazon Web Services account and Amazon Web Services Region that are currently in use. You can filter the result set by the container groups' scheduling strategy. Use the pagination parameters to retrieve results in a set of sequential pages.</p><note>
/// <p>This operation returns the list of container group definitions in no particular order.</p>
/// </note>
/// <p><b>Learn more</b></p>
/// <ul>
/// <li>
/// <p><a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/containers-create-groups.html">Manage a container group definition</a></p></li>
/// </ul>
#[derive(::std::clone::Clone, ::std::fmt::Debug)]
pub struct ListContainerGroupDefinitionsFluentBuilder {
    handle: ::std::sync::Arc<crate::client::Handle>,
    inner: crate::operation::list_container_group_definitions::builders::ListContainerGroupDefinitionsInputBuilder,
    config_override: ::std::option::Option<crate::config::Builder>,
}
impl
    crate::client::customize::internal::CustomizableSend<
        crate::operation::list_container_group_definitions::ListContainerGroupDefinitionsOutput,
        crate::operation::list_container_group_definitions::ListContainerGroupDefinitionsError,
    > for ListContainerGroupDefinitionsFluentBuilder
{
    fn send(
        self,
        config_override: crate::config::Builder,
    ) -> crate::client::customize::internal::BoxFuture<
        crate::client::customize::internal::SendResult<
            crate::operation::list_container_group_definitions::ListContainerGroupDefinitionsOutput,
            crate::operation::list_container_group_definitions::ListContainerGroupDefinitionsError,
        >,
    > {
        ::std::boxed::Box::pin(async move { self.config_override(config_override).send().await })
    }
}
impl ListContainerGroupDefinitionsFluentBuilder {
    /// Creates a new `ListContainerGroupDefinitions`.
    pub(crate) fn new(handle: ::std::sync::Arc<crate::client::Handle>) -> Self {
        Self {
            handle,
            inner: ::std::default::Default::default(),
            config_override: ::std::option::Option::None,
        }
    }
    /// Access the ListContainerGroupDefinitions as a reference.
    pub fn as_input(&self) -> &crate::operation::list_container_group_definitions::builders::ListContainerGroupDefinitionsInputBuilder {
        &self.inner
    }
    /// Sends the request and returns the response.
    ///
    /// If an error occurs, an `SdkError` will be returned with additional details that
    /// can be matched against.
    ///
    /// By default, any retryable failures will be retried twice. Retry behavior
    /// is configurable with the [RetryConfig](aws_smithy_types::retry::RetryConfig), which can be
    /// set when configuring the client.
    pub async fn send(
        self,
    ) -> ::std::result::Result<
        crate::operation::list_container_group_definitions::ListContainerGroupDefinitionsOutput,
        ::aws_smithy_runtime_api::client::result::SdkError<
            crate::operation::list_container_group_definitions::ListContainerGroupDefinitionsError,
            ::aws_smithy_runtime_api::client::orchestrator::HttpResponse,
        >,
    > {
        let input = self
            .inner
            .build()
            .map_err(::aws_smithy_runtime_api::client::result::SdkError::construction_failure)?;
        let runtime_plugins = crate::operation::list_container_group_definitions::ListContainerGroupDefinitions::operation_runtime_plugins(
            self.handle.runtime_plugins.clone(),
            &self.handle.conf,
            self.config_override,
        );
        crate::operation::list_container_group_definitions::ListContainerGroupDefinitions::orchestrate(&runtime_plugins, input).await
    }

    /// Consumes this builder, creating a customizable operation that can be modified before being sent.
    pub fn customize(
        self,
    ) -> crate::client::customize::CustomizableOperation<
        crate::operation::list_container_group_definitions::ListContainerGroupDefinitionsOutput,
        crate::operation::list_container_group_definitions::ListContainerGroupDefinitionsError,
        Self,
    > {
        crate::client::customize::CustomizableOperation::new(self)
    }
    pub(crate) fn config_override(mut self, config_override: impl ::std::convert::Into<crate::config::Builder>) -> Self {
        self.set_config_override(::std::option::Option::Some(config_override.into()));
        self
    }

    pub(crate) fn set_config_override(&mut self, config_override: ::std::option::Option<crate::config::Builder>) -> &mut Self {
        self.config_override = config_override;
        self
    }
    /// Create a paginator for this request
    ///
    /// Paginators are used by calling [`send().await`](crate::operation::list_container_group_definitions::paginator::ListContainerGroupDefinitionsPaginator::send) which returns a [`PaginationStream`](aws_smithy_async::future::pagination_stream::PaginationStream).
    pub fn into_paginator(self) -> crate::operation::list_container_group_definitions::paginator::ListContainerGroupDefinitionsPaginator {
        crate::operation::list_container_group_definitions::paginator::ListContainerGroupDefinitionsPaginator::new(self.handle, self.inner)
    }
    /// <p>The type of container group definitions to retrieve.</p>
    /// <ul>
    /// <li>
    /// <p><code>DAEMON</code> -- Daemon container groups run background processes and are deployed once per fleet instance.</p></li>
    /// <li>
    /// <p><code>REPLICA</code> -- Replica container groups run your game server application and supporting software. Replica groups might be deployed multiple times per fleet instance.</p></li>
    /// </ul>
    pub fn scheduling_strategy(mut self, input: crate::types::ContainerSchedulingStrategy) -> Self {
        self.inner = self.inner.scheduling_strategy(input);
        self
    }
    /// <p>The type of container group definitions to retrieve.</p>
    /// <ul>
    /// <li>
    /// <p><code>DAEMON</code> -- Daemon container groups run background processes and are deployed once per fleet instance.</p></li>
    /// <li>
    /// <p><code>REPLICA</code> -- Replica container groups run your game server application and supporting software. Replica groups might be deployed multiple times per fleet instance.</p></li>
    /// </ul>
    pub fn set_scheduling_strategy(mut self, input: ::std::option::Option<crate::types::ContainerSchedulingStrategy>) -> Self {
        self.inner = self.inner.set_scheduling_strategy(input);
        self
    }
    /// <p>The type of container group definitions to retrieve.</p>
    /// <ul>
    /// <li>
    /// <p><code>DAEMON</code> -- Daemon container groups run background processes and are deployed once per fleet instance.</p></li>
    /// <li>
    /// <p><code>REPLICA</code> -- Replica container groups run your game server application and supporting software. Replica groups might be deployed multiple times per fleet instance.</p></li>
    /// </ul>
    pub fn get_scheduling_strategy(&self) -> &::std::option::Option<crate::types::ContainerSchedulingStrategy> {
        self.inner.get_scheduling_strategy()
    }
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    pub fn limit(mut self, input: i32) -> Self {
        self.inner = self.inner.limit(input);
        self
    }
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    pub fn set_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.inner = self.inner.set_limit(input);
        self
    }
    /// <p>The maximum number of results to return. Use this parameter with <code>NextToken</code> to get results as a set of sequential pages.</p>
    pub fn get_limit(&self) -> &::std::option::Option<i32> {
        self.inner.get_limit()
    }
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    pub fn next_token(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.inner = self.inner.next_token(input.into());
        self
    }
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    pub fn set_next_token(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.inner = self.inner.set_next_token(input);
        self
    }
    /// <p>A token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this operation. To start at the beginning of the result set, do not specify a value.</p>
    pub fn get_next_token(&self) -> &::std::option::Option<::std::string::String> {
        self.inner.get_next_token()
    }
}
