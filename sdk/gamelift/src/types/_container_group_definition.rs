// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p><b>This data type is used with the Amazon GameLift containers feature, which is currently in public preview.</b></p>
/// <p>The properties that describe a container group resource. Container group definition properties can't be updated. To change a property, create a new container group definition.</p>
/// <p><b>Used with:</b> <code>CreateContainerGroupDefinition</code></p>
/// <p><b>Returned by:</b> <code>DescribeContainerGroupDefinition</code>, <code>ListContainerGroupDefinitions</code></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContainerGroupDefinition {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to an Amazon GameLift <code>ContainerGroupDefinition</code> resource. It uniquely identifies the resource across all Amazon Web Services Regions. Format is <code>arn:aws:gamelift:<region>
    /// ::containergroupdefinition/[container group definition name]
    /// </region></code>.</p>
    pub container_group_definition_arn: ::std::option::Option<::std::string::String>,
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    pub creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The platform required for all containers in the container group definition.</p>
    pub operating_system: ::std::option::Option<crate::types::ContainerOperatingSystem>,
    /// <p>A descriptive identifier for the container group definition. The name value is unique in an Amazon Web Services Region.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The method for deploying the container group across fleet instances. A replica container group might have multiple copies on each fleet instance. A daemon container group maintains only one copy per fleet instance.</p>
    pub scheduling_strategy: ::std::option::Option<crate::types::ContainerSchedulingStrategy>,
    /// <p>The amount of memory (in MiB) on a fleet instance to allocate for the container group. All containers in the group share these resources.</p>
    /// <p>You can set additional limits for each <code>ContainerDefinition</code> in the group. If individual containers have limits, this value must meet the following requirements:</p>
    /// <ul>
    /// <li>
    /// <p>Equal to or greater than the sum of all container-specific soft memory limits in the group.</p></li>
    /// <li>
    /// <p>Equal to or greater than any container-specific hard limits in the group.</p></li>
    /// </ul>
    /// <p>For more details on memory allocation, see the <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/containers-design-fleet">Container fleet design guide</a>.</p>
    pub total_memory_limit: ::std::option::Option<i32>,
    /// <p>The amount of CPU units on a fleet instance to allocate for the container group. All containers in the group share these resources. This property is an integer value in CPU units (1 vCPU is equal to 1024 CPU units).</p>
    /// <p>You can set additional limits for each <code>ContainerDefinition</code> in the group. If individual containers have limits, this value must be equal to or greater than the sum of all container-specific CPU limits in the group.</p>
    /// <p>For more details on memory allocation, see the <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/containers-design-fleet">Container fleet design guide</a>.</p>
    pub total_cpu_limit: ::std::option::Option<i32>,
    /// <p>The set of container definitions that are included in the container group.</p>
    pub container_definitions: ::std::option::Option<::std::vec::Vec<crate::types::ContainerDefinition>>,
    /// <p>Current status of the container group definition resource. Values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>COPYING</code> -- Amazon GameLift is in the process of making copies of all container images that are defined in the group. While in this state, the resource can't be used to create a container fleet.</p></li>
    /// <li>
    /// <p><code>READY</code> -- Amazon GameLift has copied the registry images for all containers that are defined in the group. You can use a container group definition in this status to create a container fleet.</p></li>
    /// <li>
    /// <p><code>FAILED</code> -- Amazon GameLift failed to create a valid container group definition resource. For more details on the cause of the failure, see <code>StatusReason</code>. A container group definition resource in failed status will be deleted within a few minutes.</p></li>
    /// </ul>
    pub status: ::std::option::Option<crate::types::ContainerGroupDefinitionStatus>,
    /// <p>Additional information about a container group definition that's in <code>FAILED</code> status. Possible reasons include:</p>
    /// <ul>
    /// <li>
    /// <p>An internal issue prevented Amazon GameLift from creating the container group definition resource. Delete the failed resource and call <code>CreateContainerGroupDefinition</code>again.</p></li>
    /// <li>
    /// <p>An access-denied message means that you don't have permissions to access the container image on ECR. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-iam-policy-examples.html"> IAM permission examples</a> for help setting up required IAM permissions for Amazon GameLift.</p></li>
    /// <li>
    /// <p>The <code>ImageUri</code> value for at least one of the containers in the container group definition was invalid or not found in the current Amazon Web Services account.</p></li>
    /// <li>
    /// <p>At least one of the container images referenced in the container group definition exceeds the allowed size. For size limits, see <a href="https://docs.aws.amazon.com/general/latest/gr/gamelift.html"> Amazon GameLift endpoints and quotas</a>.</p></li>
    /// <li>
    /// <p>At least one of the container images referenced in the container group definition uses a different operating system than the one defined for the container group.</p></li>
    /// </ul>
    pub status_reason: ::std::option::Option<::std::string::String>,
}
impl ContainerGroupDefinition {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to an Amazon GameLift <code>ContainerGroupDefinition</code> resource. It uniquely identifies the resource across all Amazon Web Services Regions. Format is <code>arn:aws:gamelift:<region>
    /// ::containergroupdefinition/[container group definition name]
    /// </region></code>.</p>
    pub fn container_group_definition_arn(&self) -> ::std::option::Option<&str> {
        self.container_group_definition_arn.as_deref()
    }
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    pub fn creation_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.creation_time.as_ref()
    }
    /// <p>The platform required for all containers in the container group definition.</p>
    pub fn operating_system(&self) -> ::std::option::Option<&crate::types::ContainerOperatingSystem> {
        self.operating_system.as_ref()
    }
    /// <p>A descriptive identifier for the container group definition. The name value is unique in an Amazon Web Services Region.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The method for deploying the container group across fleet instances. A replica container group might have multiple copies on each fleet instance. A daemon container group maintains only one copy per fleet instance.</p>
    pub fn scheduling_strategy(&self) -> ::std::option::Option<&crate::types::ContainerSchedulingStrategy> {
        self.scheduling_strategy.as_ref()
    }
    /// <p>The amount of memory (in MiB) on a fleet instance to allocate for the container group. All containers in the group share these resources.</p>
    /// <p>You can set additional limits for each <code>ContainerDefinition</code> in the group. If individual containers have limits, this value must meet the following requirements:</p>
    /// <ul>
    /// <li>
    /// <p>Equal to or greater than the sum of all container-specific soft memory limits in the group.</p></li>
    /// <li>
    /// <p>Equal to or greater than any container-specific hard limits in the group.</p></li>
    /// </ul>
    /// <p>For more details on memory allocation, see the <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/containers-design-fleet">Container fleet design guide</a>.</p>
    pub fn total_memory_limit(&self) -> ::std::option::Option<i32> {
        self.total_memory_limit
    }
    /// <p>The amount of CPU units on a fleet instance to allocate for the container group. All containers in the group share these resources. This property is an integer value in CPU units (1 vCPU is equal to 1024 CPU units).</p>
    /// <p>You can set additional limits for each <code>ContainerDefinition</code> in the group. If individual containers have limits, this value must be equal to or greater than the sum of all container-specific CPU limits in the group.</p>
    /// <p>For more details on memory allocation, see the <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/containers-design-fleet">Container fleet design guide</a>.</p>
    pub fn total_cpu_limit(&self) -> ::std::option::Option<i32> {
        self.total_cpu_limit
    }
    /// <p>The set of container definitions that are included in the container group.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.container_definitions.is_none()`.
    pub fn container_definitions(&self) -> &[crate::types::ContainerDefinition] {
        self.container_definitions.as_deref().unwrap_or_default()
    }
    /// <p>Current status of the container group definition resource. Values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>COPYING</code> -- Amazon GameLift is in the process of making copies of all container images that are defined in the group. While in this state, the resource can't be used to create a container fleet.</p></li>
    /// <li>
    /// <p><code>READY</code> -- Amazon GameLift has copied the registry images for all containers that are defined in the group. You can use a container group definition in this status to create a container fleet.</p></li>
    /// <li>
    /// <p><code>FAILED</code> -- Amazon GameLift failed to create a valid container group definition resource. For more details on the cause of the failure, see <code>StatusReason</code>. A container group definition resource in failed status will be deleted within a few minutes.</p></li>
    /// </ul>
    pub fn status(&self) -> ::std::option::Option<&crate::types::ContainerGroupDefinitionStatus> {
        self.status.as_ref()
    }
    /// <p>Additional information about a container group definition that's in <code>FAILED</code> status. Possible reasons include:</p>
    /// <ul>
    /// <li>
    /// <p>An internal issue prevented Amazon GameLift from creating the container group definition resource. Delete the failed resource and call <code>CreateContainerGroupDefinition</code>again.</p></li>
    /// <li>
    /// <p>An access-denied message means that you don't have permissions to access the container image on ECR. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-iam-policy-examples.html"> IAM permission examples</a> for help setting up required IAM permissions for Amazon GameLift.</p></li>
    /// <li>
    /// <p>The <code>ImageUri</code> value for at least one of the containers in the container group definition was invalid or not found in the current Amazon Web Services account.</p></li>
    /// <li>
    /// <p>At least one of the container images referenced in the container group definition exceeds the allowed size. For size limits, see <a href="https://docs.aws.amazon.com/general/latest/gr/gamelift.html"> Amazon GameLift endpoints and quotas</a>.</p></li>
    /// <li>
    /// <p>At least one of the container images referenced in the container group definition uses a different operating system than the one defined for the container group.</p></li>
    /// </ul>
    pub fn status_reason(&self) -> ::std::option::Option<&str> {
        self.status_reason.as_deref()
    }
}
impl ContainerGroupDefinition {
    /// Creates a new builder-style object to manufacture [`ContainerGroupDefinition`](crate::types::ContainerGroupDefinition).
    pub fn builder() -> crate::types::builders::ContainerGroupDefinitionBuilder {
        crate::types::builders::ContainerGroupDefinitionBuilder::default()
    }
}

/// A builder for [`ContainerGroupDefinition`](crate::types::ContainerGroupDefinition).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ContainerGroupDefinitionBuilder {
    pub(crate) container_group_definition_arn: ::std::option::Option<::std::string::String>,
    pub(crate) creation_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) operating_system: ::std::option::Option<crate::types::ContainerOperatingSystem>,
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) scheduling_strategy: ::std::option::Option<crate::types::ContainerSchedulingStrategy>,
    pub(crate) total_memory_limit: ::std::option::Option<i32>,
    pub(crate) total_cpu_limit: ::std::option::Option<i32>,
    pub(crate) container_definitions: ::std::option::Option<::std::vec::Vec<crate::types::ContainerDefinition>>,
    pub(crate) status: ::std::option::Option<crate::types::ContainerGroupDefinitionStatus>,
    pub(crate) status_reason: ::std::option::Option<::std::string::String>,
}
impl ContainerGroupDefinitionBuilder {
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to an Amazon GameLift <code>ContainerGroupDefinition</code> resource. It uniquely identifies the resource across all Amazon Web Services Regions. Format is <code>arn:aws:gamelift:<region>
    /// ::containergroupdefinition/[container group definition name]
    /// </region></code>.</p>
    pub fn container_group_definition_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.container_group_definition_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to an Amazon GameLift <code>ContainerGroupDefinition</code> resource. It uniquely identifies the resource across all Amazon Web Services Regions. Format is <code>arn:aws:gamelift:<region>
    /// ::containergroupdefinition/[container group definition name]
    /// </region></code>.</p>
    pub fn set_container_group_definition_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.container_group_definition_arn = input;
        self
    }
    /// <p>The Amazon Resource Name (<a href="https://docs.aws.amazon.com/AmazonS3/latest/dev/s3-arn-format.html">ARN</a>) that is assigned to an Amazon GameLift <code>ContainerGroupDefinition</code> resource. It uniquely identifies the resource across all Amazon Web Services Regions. Format is <code>arn:aws:gamelift:<region>
    /// ::containergroupdefinition/[container group definition name]
    /// </region></code>.</p>
    pub fn get_container_group_definition_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.container_group_definition_arn
    }
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    pub fn creation_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.creation_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    pub fn set_creation_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.creation_time = input;
        self
    }
    /// <p>A time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example <code>"1469498468.057"</code>).</p>
    pub fn get_creation_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.creation_time
    }
    /// <p>The platform required for all containers in the container group definition.</p>
    pub fn operating_system(mut self, input: crate::types::ContainerOperatingSystem) -> Self {
        self.operating_system = ::std::option::Option::Some(input);
        self
    }
    /// <p>The platform required for all containers in the container group definition.</p>
    pub fn set_operating_system(mut self, input: ::std::option::Option<crate::types::ContainerOperatingSystem>) -> Self {
        self.operating_system = input;
        self
    }
    /// <p>The platform required for all containers in the container group definition.</p>
    pub fn get_operating_system(&self) -> &::std::option::Option<crate::types::ContainerOperatingSystem> {
        &self.operating_system
    }
    /// <p>A descriptive identifier for the container group definition. The name value is unique in an Amazon Web Services Region.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>A descriptive identifier for the container group definition. The name value is unique in an Amazon Web Services Region.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>A descriptive identifier for the container group definition. The name value is unique in an Amazon Web Services Region.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The method for deploying the container group across fleet instances. A replica container group might have multiple copies on each fleet instance. A daemon container group maintains only one copy per fleet instance.</p>
    pub fn scheduling_strategy(mut self, input: crate::types::ContainerSchedulingStrategy) -> Self {
        self.scheduling_strategy = ::std::option::Option::Some(input);
        self
    }
    /// <p>The method for deploying the container group across fleet instances. A replica container group might have multiple copies on each fleet instance. A daemon container group maintains only one copy per fleet instance.</p>
    pub fn set_scheduling_strategy(mut self, input: ::std::option::Option<crate::types::ContainerSchedulingStrategy>) -> Self {
        self.scheduling_strategy = input;
        self
    }
    /// <p>The method for deploying the container group across fleet instances. A replica container group might have multiple copies on each fleet instance. A daemon container group maintains only one copy per fleet instance.</p>
    pub fn get_scheduling_strategy(&self) -> &::std::option::Option<crate::types::ContainerSchedulingStrategy> {
        &self.scheduling_strategy
    }
    /// <p>The amount of memory (in MiB) on a fleet instance to allocate for the container group. All containers in the group share these resources.</p>
    /// <p>You can set additional limits for each <code>ContainerDefinition</code> in the group. If individual containers have limits, this value must meet the following requirements:</p>
    /// <ul>
    /// <li>
    /// <p>Equal to or greater than the sum of all container-specific soft memory limits in the group.</p></li>
    /// <li>
    /// <p>Equal to or greater than any container-specific hard limits in the group.</p></li>
    /// </ul>
    /// <p>For more details on memory allocation, see the <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/containers-design-fleet">Container fleet design guide</a>.</p>
    pub fn total_memory_limit(mut self, input: i32) -> Self {
        self.total_memory_limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of memory (in MiB) on a fleet instance to allocate for the container group. All containers in the group share these resources.</p>
    /// <p>You can set additional limits for each <code>ContainerDefinition</code> in the group. If individual containers have limits, this value must meet the following requirements:</p>
    /// <ul>
    /// <li>
    /// <p>Equal to or greater than the sum of all container-specific soft memory limits in the group.</p></li>
    /// <li>
    /// <p>Equal to or greater than any container-specific hard limits in the group.</p></li>
    /// </ul>
    /// <p>For more details on memory allocation, see the <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/containers-design-fleet">Container fleet design guide</a>.</p>
    pub fn set_total_memory_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_memory_limit = input;
        self
    }
    /// <p>The amount of memory (in MiB) on a fleet instance to allocate for the container group. All containers in the group share these resources.</p>
    /// <p>You can set additional limits for each <code>ContainerDefinition</code> in the group. If individual containers have limits, this value must meet the following requirements:</p>
    /// <ul>
    /// <li>
    /// <p>Equal to or greater than the sum of all container-specific soft memory limits in the group.</p></li>
    /// <li>
    /// <p>Equal to or greater than any container-specific hard limits in the group.</p></li>
    /// </ul>
    /// <p>For more details on memory allocation, see the <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/containers-design-fleet">Container fleet design guide</a>.</p>
    pub fn get_total_memory_limit(&self) -> &::std::option::Option<i32> {
        &self.total_memory_limit
    }
    /// <p>The amount of CPU units on a fleet instance to allocate for the container group. All containers in the group share these resources. This property is an integer value in CPU units (1 vCPU is equal to 1024 CPU units).</p>
    /// <p>You can set additional limits for each <code>ContainerDefinition</code> in the group. If individual containers have limits, this value must be equal to or greater than the sum of all container-specific CPU limits in the group.</p>
    /// <p>For more details on memory allocation, see the <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/containers-design-fleet">Container fleet design guide</a>.</p>
    pub fn total_cpu_limit(mut self, input: i32) -> Self {
        self.total_cpu_limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of CPU units on a fleet instance to allocate for the container group. All containers in the group share these resources. This property is an integer value in CPU units (1 vCPU is equal to 1024 CPU units).</p>
    /// <p>You can set additional limits for each <code>ContainerDefinition</code> in the group. If individual containers have limits, this value must be equal to or greater than the sum of all container-specific CPU limits in the group.</p>
    /// <p>For more details on memory allocation, see the <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/containers-design-fleet">Container fleet design guide</a>.</p>
    pub fn set_total_cpu_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.total_cpu_limit = input;
        self
    }
    /// <p>The amount of CPU units on a fleet instance to allocate for the container group. All containers in the group share these resources. This property is an integer value in CPU units (1 vCPU is equal to 1024 CPU units).</p>
    /// <p>You can set additional limits for each <code>ContainerDefinition</code> in the group. If individual containers have limits, this value must be equal to or greater than the sum of all container-specific CPU limits in the group.</p>
    /// <p>For more details on memory allocation, see the <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/containers-design-fleet">Container fleet design guide</a>.</p>
    pub fn get_total_cpu_limit(&self) -> &::std::option::Option<i32> {
        &self.total_cpu_limit
    }
    /// Appends an item to `container_definitions`.
    ///
    /// To override the contents of this collection use [`set_container_definitions`](Self::set_container_definitions).
    ///
    /// <p>The set of container definitions that are included in the container group.</p>
    pub fn container_definitions(mut self, input: crate::types::ContainerDefinition) -> Self {
        let mut v = self.container_definitions.unwrap_or_default();
        v.push(input);
        self.container_definitions = ::std::option::Option::Some(v);
        self
    }
    /// <p>The set of container definitions that are included in the container group.</p>
    pub fn set_container_definitions(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ContainerDefinition>>) -> Self {
        self.container_definitions = input;
        self
    }
    /// <p>The set of container definitions that are included in the container group.</p>
    pub fn get_container_definitions(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ContainerDefinition>> {
        &self.container_definitions
    }
    /// <p>Current status of the container group definition resource. Values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>COPYING</code> -- Amazon GameLift is in the process of making copies of all container images that are defined in the group. While in this state, the resource can't be used to create a container fleet.</p></li>
    /// <li>
    /// <p><code>READY</code> -- Amazon GameLift has copied the registry images for all containers that are defined in the group. You can use a container group definition in this status to create a container fleet.</p></li>
    /// <li>
    /// <p><code>FAILED</code> -- Amazon GameLift failed to create a valid container group definition resource. For more details on the cause of the failure, see <code>StatusReason</code>. A container group definition resource in failed status will be deleted within a few minutes.</p></li>
    /// </ul>
    pub fn status(mut self, input: crate::types::ContainerGroupDefinitionStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Current status of the container group definition resource. Values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>COPYING</code> -- Amazon GameLift is in the process of making copies of all container images that are defined in the group. While in this state, the resource can't be used to create a container fleet.</p></li>
    /// <li>
    /// <p><code>READY</code> -- Amazon GameLift has copied the registry images for all containers that are defined in the group. You can use a container group definition in this status to create a container fleet.</p></li>
    /// <li>
    /// <p><code>FAILED</code> -- Amazon GameLift failed to create a valid container group definition resource. For more details on the cause of the failure, see <code>StatusReason</code>. A container group definition resource in failed status will be deleted within a few minutes.</p></li>
    /// </ul>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ContainerGroupDefinitionStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>Current status of the container group definition resource. Values include:</p>
    /// <ul>
    /// <li>
    /// <p><code>COPYING</code> -- Amazon GameLift is in the process of making copies of all container images that are defined in the group. While in this state, the resource can't be used to create a container fleet.</p></li>
    /// <li>
    /// <p><code>READY</code> -- Amazon GameLift has copied the registry images for all containers that are defined in the group. You can use a container group definition in this status to create a container fleet.</p></li>
    /// <li>
    /// <p><code>FAILED</code> -- Amazon GameLift failed to create a valid container group definition resource. For more details on the cause of the failure, see <code>StatusReason</code>. A container group definition resource in failed status will be deleted within a few minutes.</p></li>
    /// </ul>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ContainerGroupDefinitionStatus> {
        &self.status
    }
    /// <p>Additional information about a container group definition that's in <code>FAILED</code> status. Possible reasons include:</p>
    /// <ul>
    /// <li>
    /// <p>An internal issue prevented Amazon GameLift from creating the container group definition resource. Delete the failed resource and call <code>CreateContainerGroupDefinition</code>again.</p></li>
    /// <li>
    /// <p>An access-denied message means that you don't have permissions to access the container image on ECR. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-iam-policy-examples.html"> IAM permission examples</a> for help setting up required IAM permissions for Amazon GameLift.</p></li>
    /// <li>
    /// <p>The <code>ImageUri</code> value for at least one of the containers in the container group definition was invalid or not found in the current Amazon Web Services account.</p></li>
    /// <li>
    /// <p>At least one of the container images referenced in the container group definition exceeds the allowed size. For size limits, see <a href="https://docs.aws.amazon.com/general/latest/gr/gamelift.html"> Amazon GameLift endpoints and quotas</a>.</p></li>
    /// <li>
    /// <p>At least one of the container images referenced in the container group definition uses a different operating system than the one defined for the container group.</p></li>
    /// </ul>
    pub fn status_reason(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.status_reason = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Additional information about a container group definition that's in <code>FAILED</code> status. Possible reasons include:</p>
    /// <ul>
    /// <li>
    /// <p>An internal issue prevented Amazon GameLift from creating the container group definition resource. Delete the failed resource and call <code>CreateContainerGroupDefinition</code>again.</p></li>
    /// <li>
    /// <p>An access-denied message means that you don't have permissions to access the container image on ECR. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-iam-policy-examples.html"> IAM permission examples</a> for help setting up required IAM permissions for Amazon GameLift.</p></li>
    /// <li>
    /// <p>The <code>ImageUri</code> value for at least one of the containers in the container group definition was invalid or not found in the current Amazon Web Services account.</p></li>
    /// <li>
    /// <p>At least one of the container images referenced in the container group definition exceeds the allowed size. For size limits, see <a href="https://docs.aws.amazon.com/general/latest/gr/gamelift.html"> Amazon GameLift endpoints and quotas</a>.</p></li>
    /// <li>
    /// <p>At least one of the container images referenced in the container group definition uses a different operating system than the one defined for the container group.</p></li>
    /// </ul>
    pub fn set_status_reason(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.status_reason = input;
        self
    }
    /// <p>Additional information about a container group definition that's in <code>FAILED</code> status. Possible reasons include:</p>
    /// <ul>
    /// <li>
    /// <p>An internal issue prevented Amazon GameLift from creating the container group definition resource. Delete the failed resource and call <code>CreateContainerGroupDefinition</code>again.</p></li>
    /// <li>
    /// <p>An access-denied message means that you don't have permissions to access the container image on ECR. See <a href="https://docs.aws.amazon.com/gamelift/latest/developerguide/gamelift-iam-policy-examples.html"> IAM permission examples</a> for help setting up required IAM permissions for Amazon GameLift.</p></li>
    /// <li>
    /// <p>The <code>ImageUri</code> value for at least one of the containers in the container group definition was invalid or not found in the current Amazon Web Services account.</p></li>
    /// <li>
    /// <p>At least one of the container images referenced in the container group definition exceeds the allowed size. For size limits, see <a href="https://docs.aws.amazon.com/general/latest/gr/gamelift.html"> Amazon GameLift endpoints and quotas</a>.</p></li>
    /// <li>
    /// <p>At least one of the container images referenced in the container group definition uses a different operating system than the one defined for the container group.</p></li>
    /// </ul>
    pub fn get_status_reason(&self) -> &::std::option::Option<::std::string::String> {
        &self.status_reason
    }
    /// Consumes the builder and constructs a [`ContainerGroupDefinition`](crate::types::ContainerGroupDefinition).
    pub fn build(self) -> crate::types::ContainerGroupDefinition {
        crate::types::ContainerGroupDefinition {
            container_group_definition_arn: self.container_group_definition_arn,
            creation_time: self.creation_time,
            operating_system: self.operating_system,
            name: self.name,
            scheduling_strategy: self.scheduling_strategy,
            total_memory_limit: self.total_memory_limit,
            total_cpu_limit: self.total_cpu_limit,
            container_definitions: self.container_definitions,
            status: self.status,
            status_reason: self.status_reason,
        }
    }
}
