// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p><b>This data type is used with the Amazon GameLift containers feature, which is currently in public preview.</b></p>
/// <p>Configuration details for a set of container groups, for use when creating a fleet with compute type <code>CONTAINER</code>.</p>
/// <p><b>Used with:</b> <code>CreateFleet</code></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContainerGroupsConfiguration {
    /// <p>The list of container group definition names to deploy to a new container fleet.</p>
    pub container_group_definition_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>A set of ports to allow inbound traffic, including game clients, to connect to processes running in the container fleet.</p>
    /// <p>Connection ports are dynamically mapped to container ports, which are assigned to individual processes running in a container. The connection port range must have enough ports to map to all container ports across a fleet instance. To calculate the minimum connection ports needed, use the following formula:</p>
    /// <p><i>[Total number of container ports as defined for containers in the replica container group] * [Desired or calculated number of replica container groups per instance] + [Total number of container ports as defined for containers in the daemon container group]</i></p>
    /// <p>As a best practice, double the minimum number of connection ports.</p><note>
    /// <p>Use the fleet's <code>EC2InboundPermissions</code> property to control external access to connection ports. Set this property to the connection port numbers that you want to open access to. See <code>IpPermission</code> for more details.</p>
    /// </note>
    pub connection_port_range: ::std::option::Option<crate::types::ConnectionPortRange>,
    /// <p>The number of times to replicate the replica container group on each instance in a container fleet. By default, Amazon GameLift calculates the maximum number of replica container groups that can fit on a fleet instance (based on CPU and memory resources). Leave this parameter empty if you want to use the maximum number, or specify a desired number to override the maximum. The desired number is used if it's less than the maximum number.</p>
    pub desired_replica_container_groups_per_instance: ::std::option::Option<i32>,
}
impl ContainerGroupsConfiguration {
    /// <p>The list of container group definition names to deploy to a new container fleet.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.container_group_definition_names.is_none()`.
    pub fn container_group_definition_names(&self) -> &[::std::string::String] {
        self.container_group_definition_names.as_deref().unwrap_or_default()
    }
    /// <p>A set of ports to allow inbound traffic, including game clients, to connect to processes running in the container fleet.</p>
    /// <p>Connection ports are dynamically mapped to container ports, which are assigned to individual processes running in a container. The connection port range must have enough ports to map to all container ports across a fleet instance. To calculate the minimum connection ports needed, use the following formula:</p>
    /// <p><i>[Total number of container ports as defined for containers in the replica container group] * [Desired or calculated number of replica container groups per instance] + [Total number of container ports as defined for containers in the daemon container group]</i></p>
    /// <p>As a best practice, double the minimum number of connection ports.</p><note>
    /// <p>Use the fleet's <code>EC2InboundPermissions</code> property to control external access to connection ports. Set this property to the connection port numbers that you want to open access to. See <code>IpPermission</code> for more details.</p>
    /// </note>
    pub fn connection_port_range(&self) -> ::std::option::Option<&crate::types::ConnectionPortRange> {
        self.connection_port_range.as_ref()
    }
    /// <p>The number of times to replicate the replica container group on each instance in a container fleet. By default, Amazon GameLift calculates the maximum number of replica container groups that can fit on a fleet instance (based on CPU and memory resources). Leave this parameter empty if you want to use the maximum number, or specify a desired number to override the maximum. The desired number is used if it's less than the maximum number.</p>
    pub fn desired_replica_container_groups_per_instance(&self) -> ::std::option::Option<i32> {
        self.desired_replica_container_groups_per_instance
    }
}
impl ContainerGroupsConfiguration {
    /// Creates a new builder-style object to manufacture [`ContainerGroupsConfiguration`](crate::types::ContainerGroupsConfiguration).
    pub fn builder() -> crate::types::builders::ContainerGroupsConfigurationBuilder {
        crate::types::builders::ContainerGroupsConfigurationBuilder::default()
    }
}

/// A builder for [`ContainerGroupsConfiguration`](crate::types::ContainerGroupsConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ContainerGroupsConfigurationBuilder {
    pub(crate) container_group_definition_names: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) connection_port_range: ::std::option::Option<crate::types::ConnectionPortRange>,
    pub(crate) desired_replica_container_groups_per_instance: ::std::option::Option<i32>,
}
impl ContainerGroupsConfigurationBuilder {
    /// Appends an item to `container_group_definition_names`.
    ///
    /// To override the contents of this collection use [`set_container_group_definition_names`](Self::set_container_group_definition_names).
    ///
    /// <p>The list of container group definition names to deploy to a new container fleet.</p>
    pub fn container_group_definition_names(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.container_group_definition_names.unwrap_or_default();
        v.push(input.into());
        self.container_group_definition_names = ::std::option::Option::Some(v);
        self
    }
    /// <p>The list of container group definition names to deploy to a new container fleet.</p>
    pub fn set_container_group_definition_names(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.container_group_definition_names = input;
        self
    }
    /// <p>The list of container group definition names to deploy to a new container fleet.</p>
    pub fn get_container_group_definition_names(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.container_group_definition_names
    }
    /// <p>A set of ports to allow inbound traffic, including game clients, to connect to processes running in the container fleet.</p>
    /// <p>Connection ports are dynamically mapped to container ports, which are assigned to individual processes running in a container. The connection port range must have enough ports to map to all container ports across a fleet instance. To calculate the minimum connection ports needed, use the following formula:</p>
    /// <p><i>[Total number of container ports as defined for containers in the replica container group] * [Desired or calculated number of replica container groups per instance] + [Total number of container ports as defined for containers in the daemon container group]</i></p>
    /// <p>As a best practice, double the minimum number of connection ports.</p><note>
    /// <p>Use the fleet's <code>EC2InboundPermissions</code> property to control external access to connection ports. Set this property to the connection port numbers that you want to open access to. See <code>IpPermission</code> for more details.</p>
    /// </note>
    /// This field is required.
    pub fn connection_port_range(mut self, input: crate::types::ConnectionPortRange) -> Self {
        self.connection_port_range = ::std::option::Option::Some(input);
        self
    }
    /// <p>A set of ports to allow inbound traffic, including game clients, to connect to processes running in the container fleet.</p>
    /// <p>Connection ports are dynamically mapped to container ports, which are assigned to individual processes running in a container. The connection port range must have enough ports to map to all container ports across a fleet instance. To calculate the minimum connection ports needed, use the following formula:</p>
    /// <p><i>[Total number of container ports as defined for containers in the replica container group] * [Desired or calculated number of replica container groups per instance] + [Total number of container ports as defined for containers in the daemon container group]</i></p>
    /// <p>As a best practice, double the minimum number of connection ports.</p><note>
    /// <p>Use the fleet's <code>EC2InboundPermissions</code> property to control external access to connection ports. Set this property to the connection port numbers that you want to open access to. See <code>IpPermission</code> for more details.</p>
    /// </note>
    pub fn set_connection_port_range(mut self, input: ::std::option::Option<crate::types::ConnectionPortRange>) -> Self {
        self.connection_port_range = input;
        self
    }
    /// <p>A set of ports to allow inbound traffic, including game clients, to connect to processes running in the container fleet.</p>
    /// <p>Connection ports are dynamically mapped to container ports, which are assigned to individual processes running in a container. The connection port range must have enough ports to map to all container ports across a fleet instance. To calculate the minimum connection ports needed, use the following formula:</p>
    /// <p><i>[Total number of container ports as defined for containers in the replica container group] * [Desired or calculated number of replica container groups per instance] + [Total number of container ports as defined for containers in the daemon container group]</i></p>
    /// <p>As a best practice, double the minimum number of connection ports.</p><note>
    /// <p>Use the fleet's <code>EC2InboundPermissions</code> property to control external access to connection ports. Set this property to the connection port numbers that you want to open access to. See <code>IpPermission</code> for more details.</p>
    /// </note>
    pub fn get_connection_port_range(&self) -> &::std::option::Option<crate::types::ConnectionPortRange> {
        &self.connection_port_range
    }
    /// <p>The number of times to replicate the replica container group on each instance in a container fleet. By default, Amazon GameLift calculates the maximum number of replica container groups that can fit on a fleet instance (based on CPU and memory resources). Leave this parameter empty if you want to use the maximum number, or specify a desired number to override the maximum. The desired number is used if it's less than the maximum number.</p>
    pub fn desired_replica_container_groups_per_instance(mut self, input: i32) -> Self {
        self.desired_replica_container_groups_per_instance = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of times to replicate the replica container group on each instance in a container fleet. By default, Amazon GameLift calculates the maximum number of replica container groups that can fit on a fleet instance (based on CPU and memory resources). Leave this parameter empty if you want to use the maximum number, or specify a desired number to override the maximum. The desired number is used if it's less than the maximum number.</p>
    pub fn set_desired_replica_container_groups_per_instance(mut self, input: ::std::option::Option<i32>) -> Self {
        self.desired_replica_container_groups_per_instance = input;
        self
    }
    /// <p>The number of times to replicate the replica container group on each instance in a container fleet. By default, Amazon GameLift calculates the maximum number of replica container groups that can fit on a fleet instance (based on CPU and memory resources). Leave this parameter empty if you want to use the maximum number, or specify a desired number to override the maximum. The desired number is used if it's less than the maximum number.</p>
    pub fn get_desired_replica_container_groups_per_instance(&self) -> &::std::option::Option<i32> {
        &self.desired_replica_container_groups_per_instance
    }
    /// Consumes the builder and constructs a [`ContainerGroupsConfiguration`](crate::types::ContainerGroupsConfiguration).
    pub fn build(self) -> crate::types::ContainerGroupsConfiguration {
        crate::types::ContainerGroupsConfiguration {
            container_group_definition_names: self.container_group_definition_names,
            connection_port_range: self.connection_port_range,
            desired_replica_container_groups_per_instance: self.desired_replica_container_groups_per_instance,
        }
    }
}
