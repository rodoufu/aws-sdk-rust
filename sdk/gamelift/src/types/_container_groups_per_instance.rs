// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p><b>This data type is used with the Amazon GameLift containers feature, which is currently in public preview.</b></p>
/// <p>Determines how many replica container groups that Amazon GameLift deploys to each instance in a container fleet.</p>
/// <p>Amazon GameLift calculates the maximum possible replica groups per instance based on the instance 's CPU and memory resources. When deploying a fleet, Amazon GameLift places replica container groups on each fleet instance based on the following:</p>
/// <ul>
/// <li>
/// <p>If no desired value is set, Amazon GameLift places the calculated maximum.</p></li>
/// <li>
/// <p>If a desired number is set to a value higher than the calculated maximum, Amazon GameLift places the calculated maximum.</p></li>
/// <li>
/// <p>If a desired number is set to a value lower than the calculated maximum, Amazon GameLift places the desired number.</p></li>
/// </ul>
/// <p><b>Part of:</b> <code>ContainerGroupsConfiguration</code>, <code>ContainerGroupsAttributes</code></p>
/// <p><b>Returned by:</b> <code>DescribeFleetAttributes</code>, <code>CreateFleet</code></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContainerGroupsPerInstance {
    /// <p>The desired number of replica container groups to place on each fleet instance.</p>
    pub desired_replica_container_groups_per_instance: ::std::option::Option<i32>,
    /// <p>The maximum possible number of replica container groups that each fleet instance can have.</p>
    pub max_replica_container_groups_per_instance: ::std::option::Option<i32>,
}
impl ContainerGroupsPerInstance {
    /// <p>The desired number of replica container groups to place on each fleet instance.</p>
    pub fn desired_replica_container_groups_per_instance(&self) -> ::std::option::Option<i32> {
        self.desired_replica_container_groups_per_instance
    }
    /// <p>The maximum possible number of replica container groups that each fleet instance can have.</p>
    pub fn max_replica_container_groups_per_instance(&self) -> ::std::option::Option<i32> {
        self.max_replica_container_groups_per_instance
    }
}
impl ContainerGroupsPerInstance {
    /// Creates a new builder-style object to manufacture [`ContainerGroupsPerInstance`](crate::types::ContainerGroupsPerInstance).
    pub fn builder() -> crate::types::builders::ContainerGroupsPerInstanceBuilder {
        crate::types::builders::ContainerGroupsPerInstanceBuilder::default()
    }
}

/// A builder for [`ContainerGroupsPerInstance`](crate::types::ContainerGroupsPerInstance).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ContainerGroupsPerInstanceBuilder {
    pub(crate) desired_replica_container_groups_per_instance: ::std::option::Option<i32>,
    pub(crate) max_replica_container_groups_per_instance: ::std::option::Option<i32>,
}
impl ContainerGroupsPerInstanceBuilder {
    /// <p>The desired number of replica container groups to place on each fleet instance.</p>
    pub fn desired_replica_container_groups_per_instance(mut self, input: i32) -> Self {
        self.desired_replica_container_groups_per_instance = ::std::option::Option::Some(input);
        self
    }
    /// <p>The desired number of replica container groups to place on each fleet instance.</p>
    pub fn set_desired_replica_container_groups_per_instance(mut self, input: ::std::option::Option<i32>) -> Self {
        self.desired_replica_container_groups_per_instance = input;
        self
    }
    /// <p>The desired number of replica container groups to place on each fleet instance.</p>
    pub fn get_desired_replica_container_groups_per_instance(&self) -> &::std::option::Option<i32> {
        &self.desired_replica_container_groups_per_instance
    }
    /// <p>The maximum possible number of replica container groups that each fleet instance can have.</p>
    pub fn max_replica_container_groups_per_instance(mut self, input: i32) -> Self {
        self.max_replica_container_groups_per_instance = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum possible number of replica container groups that each fleet instance can have.</p>
    pub fn set_max_replica_container_groups_per_instance(mut self, input: ::std::option::Option<i32>) -> Self {
        self.max_replica_container_groups_per_instance = input;
        self
    }
    /// <p>The maximum possible number of replica container groups that each fleet instance can have.</p>
    pub fn get_max_replica_container_groups_per_instance(&self) -> &::std::option::Option<i32> {
        &self.max_replica_container_groups_per_instance
    }
    /// Consumes the builder and constructs a [`ContainerGroupsPerInstance`](crate::types::ContainerGroupsPerInstance).
    pub fn build(self) -> crate::types::ContainerGroupsPerInstance {
        crate::types::ContainerGroupsPerInstance {
            desired_replica_container_groups_per_instance: self.desired_replica_container_groups_per_instance,
            max_replica_container_groups_per_instance: self.max_replica_container_groups_per_instance,
        }
    }
}
