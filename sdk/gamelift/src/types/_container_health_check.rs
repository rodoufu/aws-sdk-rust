// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Instructions on when and how to check the health of a container in a container fleet. When health check properties are set in a container definition, they override any Docker health checks in the container image. For more information on container health checks, see <a href="https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html#ECS-Type-HealthCheck-command">HealthCheck command</a> in the <i>Amazon Elastic Container Service API</i>.</p>
/// <p>The following example instructions tell the container to wait 100 seconds after launch before counting failed health checks, then initiate the health check command every 60 seconds. After issuing the health check command, wait 10 seconds for it to succeed. If it fails, retry the command 3 times before considering the container to be unhealthy.</p>
/// <p><code>{"Command": [ "CMD-SHELL", "ps cax | grep "processmanager" || exit 1" ], "Interval": 300, "Timeout": 30, "Retries": 5, "StartPeriod": 100 }</code></p>
/// <p><b>Part of:</b> <code>ContainerDefinition$HealthCheck</code></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContainerHealthCheck {
    /// <p>A string array that specifies the command that the container runs to determine if it's healthy.</p>
    pub command: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    /// <p>The time period (in seconds) between each health check.</p>
    pub interval: ::std::option::Option<i32>,
    /// <p>The time period (in seconds) to wait for a health check to succeed before a failed health check is counted.</p>
    pub timeout: ::std::option::Option<i32>,
    /// <p>The number of times to retry a failed health check before the container is considered unhealthy. The first run of the command does not count as a retry.</p>
    pub retries: ::std::option::Option<i32>,
    /// <p>The optional grace period (in seconds) to give a container time to bootstrap before the first failed health check counts toward the number of retries.</p>
    pub start_period: ::std::option::Option<i32>,
}
impl ContainerHealthCheck {
    /// <p>A string array that specifies the command that the container runs to determine if it's healthy.</p>
    ///
    /// If no value was sent for this field, a default will be set. If you want to determine if no value was sent, use `.command.is_none()`.
    pub fn command(&self) -> &[::std::string::String] {
        self.command.as_deref().unwrap_or_default()
    }
    /// <p>The time period (in seconds) between each health check.</p>
    pub fn interval(&self) -> ::std::option::Option<i32> {
        self.interval
    }
    /// <p>The time period (in seconds) to wait for a health check to succeed before a failed health check is counted.</p>
    pub fn timeout(&self) -> ::std::option::Option<i32> {
        self.timeout
    }
    /// <p>The number of times to retry a failed health check before the container is considered unhealthy. The first run of the command does not count as a retry.</p>
    pub fn retries(&self) -> ::std::option::Option<i32> {
        self.retries
    }
    /// <p>The optional grace period (in seconds) to give a container time to bootstrap before the first failed health check counts toward the number of retries.</p>
    pub fn start_period(&self) -> ::std::option::Option<i32> {
        self.start_period
    }
}
impl ContainerHealthCheck {
    /// Creates a new builder-style object to manufacture [`ContainerHealthCheck`](crate::types::ContainerHealthCheck).
    pub fn builder() -> crate::types::builders::ContainerHealthCheckBuilder {
        crate::types::builders::ContainerHealthCheckBuilder::default()
    }
}

/// A builder for [`ContainerHealthCheck`](crate::types::ContainerHealthCheck).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ContainerHealthCheckBuilder {
    pub(crate) command: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
    pub(crate) interval: ::std::option::Option<i32>,
    pub(crate) timeout: ::std::option::Option<i32>,
    pub(crate) retries: ::std::option::Option<i32>,
    pub(crate) start_period: ::std::option::Option<i32>,
}
impl ContainerHealthCheckBuilder {
    /// Appends an item to `command`.
    ///
    /// To override the contents of this collection use [`set_command`](Self::set_command).
    ///
    /// <p>A string array that specifies the command that the container runs to determine if it's healthy.</p>
    pub fn command(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.command.unwrap_or_default();
        v.push(input.into());
        self.command = ::std::option::Option::Some(v);
        self
    }
    /// <p>A string array that specifies the command that the container runs to determine if it's healthy.</p>
    pub fn set_command(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.command = input;
        self
    }
    /// <p>A string array that specifies the command that the container runs to determine if it's healthy.</p>
    pub fn get_command(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.command
    }
    /// <p>The time period (in seconds) between each health check.</p>
    pub fn interval(mut self, input: i32) -> Self {
        self.interval = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time period (in seconds) between each health check.</p>
    pub fn set_interval(mut self, input: ::std::option::Option<i32>) -> Self {
        self.interval = input;
        self
    }
    /// <p>The time period (in seconds) between each health check.</p>
    pub fn get_interval(&self) -> &::std::option::Option<i32> {
        &self.interval
    }
    /// <p>The time period (in seconds) to wait for a health check to succeed before a failed health check is counted.</p>
    pub fn timeout(mut self, input: i32) -> Self {
        self.timeout = ::std::option::Option::Some(input);
        self
    }
    /// <p>The time period (in seconds) to wait for a health check to succeed before a failed health check is counted.</p>
    pub fn set_timeout(mut self, input: ::std::option::Option<i32>) -> Self {
        self.timeout = input;
        self
    }
    /// <p>The time period (in seconds) to wait for a health check to succeed before a failed health check is counted.</p>
    pub fn get_timeout(&self) -> &::std::option::Option<i32> {
        &self.timeout
    }
    /// <p>The number of times to retry a failed health check before the container is considered unhealthy. The first run of the command does not count as a retry.</p>
    pub fn retries(mut self, input: i32) -> Self {
        self.retries = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of times to retry a failed health check before the container is considered unhealthy. The first run of the command does not count as a retry.</p>
    pub fn set_retries(mut self, input: ::std::option::Option<i32>) -> Self {
        self.retries = input;
        self
    }
    /// <p>The number of times to retry a failed health check before the container is considered unhealthy. The first run of the command does not count as a retry.</p>
    pub fn get_retries(&self) -> &::std::option::Option<i32> {
        &self.retries
    }
    /// <p>The optional grace period (in seconds) to give a container time to bootstrap before the first failed health check counts toward the number of retries.</p>
    pub fn start_period(mut self, input: i32) -> Self {
        self.start_period = ::std::option::Option::Some(input);
        self
    }
    /// <p>The optional grace period (in seconds) to give a container time to bootstrap before the first failed health check counts toward the number of retries.</p>
    pub fn set_start_period(mut self, input: ::std::option::Option<i32>) -> Self {
        self.start_period = input;
        self
    }
    /// <p>The optional grace period (in seconds) to give a container time to bootstrap before the first failed health check counts toward the number of retries.</p>
    pub fn get_start_period(&self) -> &::std::option::Option<i32> {
        &self.start_period
    }
    /// Consumes the builder and constructs a [`ContainerHealthCheck`](crate::types::ContainerHealthCheck).
    pub fn build(self) -> crate::types::ContainerHealthCheck {
        crate::types::ContainerHealthCheck {
            command: self.command,
            interval: self.interval,
            timeout: self.timeout,
            retries: self.retries,
            start_period: self.start_period,
        }
    }
}
