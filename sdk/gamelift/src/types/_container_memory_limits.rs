// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Specifies how much memory is available to a container. You can't change this value after you create this object.</p>
/// <p><b>Part of: </b> <code>ContainerDefinition$MemoryLimits</code></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ContainerMemoryLimits {
    /// <p>The amount of memory that is reserved for a container. When the container group's shared memory is under contention, the system attempts to maintain the container memory usage at this soft limit. However, the container can use more memory when needed, if available. This property is similar to the Amazon ECS container definition parameter <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#ContainerDefinition-memoryReservation">memoryreservation</a> (<i>Amazon Elastic Container Service Developer Guide</i>).</p>
    pub soft_limit: ::std::option::Option<i32>,
    /// <p>The maximum amount of memory that the container can use. If a container attempts to exceed this limit, the container is stopped. This property is similar to the Amazon ECS container definition parameter <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#container_definition_memory">memory</a> in the <i>Amazon Elastic Container Service Developer Guide.</i></p>
    pub hard_limit: ::std::option::Option<i32>,
}
impl ContainerMemoryLimits {
    /// <p>The amount of memory that is reserved for a container. When the container group's shared memory is under contention, the system attempts to maintain the container memory usage at this soft limit. However, the container can use more memory when needed, if available. This property is similar to the Amazon ECS container definition parameter <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#ContainerDefinition-memoryReservation">memoryreservation</a> (<i>Amazon Elastic Container Service Developer Guide</i>).</p>
    pub fn soft_limit(&self) -> ::std::option::Option<i32> {
        self.soft_limit
    }
    /// <p>The maximum amount of memory that the container can use. If a container attempts to exceed this limit, the container is stopped. This property is similar to the Amazon ECS container definition parameter <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#container_definition_memory">memory</a> in the <i>Amazon Elastic Container Service Developer Guide.</i></p>
    pub fn hard_limit(&self) -> ::std::option::Option<i32> {
        self.hard_limit
    }
}
impl ContainerMemoryLimits {
    /// Creates a new builder-style object to manufacture [`ContainerMemoryLimits`](crate::types::ContainerMemoryLimits).
    pub fn builder() -> crate::types::builders::ContainerMemoryLimitsBuilder {
        crate::types::builders::ContainerMemoryLimitsBuilder::default()
    }
}

/// A builder for [`ContainerMemoryLimits`](crate::types::ContainerMemoryLimits).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ContainerMemoryLimitsBuilder {
    pub(crate) soft_limit: ::std::option::Option<i32>,
    pub(crate) hard_limit: ::std::option::Option<i32>,
}
impl ContainerMemoryLimitsBuilder {
    /// <p>The amount of memory that is reserved for a container. When the container group's shared memory is under contention, the system attempts to maintain the container memory usage at this soft limit. However, the container can use more memory when needed, if available. This property is similar to the Amazon ECS container definition parameter <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#ContainerDefinition-memoryReservation">memoryreservation</a> (<i>Amazon Elastic Container Service Developer Guide</i>).</p>
    pub fn soft_limit(mut self, input: i32) -> Self {
        self.soft_limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The amount of memory that is reserved for a container. When the container group's shared memory is under contention, the system attempts to maintain the container memory usage at this soft limit. However, the container can use more memory when needed, if available. This property is similar to the Amazon ECS container definition parameter <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#ContainerDefinition-memoryReservation">memoryreservation</a> (<i>Amazon Elastic Container Service Developer Guide</i>).</p>
    pub fn set_soft_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.soft_limit = input;
        self
    }
    /// <p>The amount of memory that is reserved for a container. When the container group's shared memory is under contention, the system attempts to maintain the container memory usage at this soft limit. However, the container can use more memory when needed, if available. This property is similar to the Amazon ECS container definition parameter <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#ContainerDefinition-memoryReservation">memoryreservation</a> (<i>Amazon Elastic Container Service Developer Guide</i>).</p>
    pub fn get_soft_limit(&self) -> &::std::option::Option<i32> {
        &self.soft_limit
    }
    /// <p>The maximum amount of memory that the container can use. If a container attempts to exceed this limit, the container is stopped. This property is similar to the Amazon ECS container definition parameter <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#container_definition_memory">memory</a> in the <i>Amazon Elastic Container Service Developer Guide.</i></p>
    pub fn hard_limit(mut self, input: i32) -> Self {
        self.hard_limit = ::std::option::Option::Some(input);
        self
    }
    /// <p>The maximum amount of memory that the container can use. If a container attempts to exceed this limit, the container is stopped. This property is similar to the Amazon ECS container definition parameter <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#container_definition_memory">memory</a> in the <i>Amazon Elastic Container Service Developer Guide.</i></p>
    pub fn set_hard_limit(mut self, input: ::std::option::Option<i32>) -> Self {
        self.hard_limit = input;
        self
    }
    /// <p>The maximum amount of memory that the container can use. If a container attempts to exceed this limit, the container is stopped. This property is similar to the Amazon ECS container definition parameter <a href="https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#container_definition_memory">memory</a> in the <i>Amazon Elastic Container Service Developer Guide.</i></p>
    pub fn get_hard_limit(&self) -> &::std::option::Option<i32> {
        &self.hard_limit
    }
    /// Consumes the builder and constructs a [`ContainerMemoryLimits`](crate::types::ContainerMemoryLimits).
    pub fn build(self) -> crate::types::ContainerMemoryLimits {
        crate::types::ContainerMemoryLimits {
            soft_limit: self.soft_limit,
            hard_limit: self.hard_limit,
        }
    }
}
