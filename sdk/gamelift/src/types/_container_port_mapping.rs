// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p><b>This data type is used with the Amazon GameLift containers feature, which is currently in public preview.</b></p>
/// <p>Defines how an internal-facing container port is mapped to an external-facing connection port on a fleet instance of compute type <code>CONTAINER</code>. Incoming traffic, such as a game client, uses a connection port to connect to a process in the container fleet. Amazon GameLift directs the inbound traffic to the container port that is assigned to the process, such as a game session, running on a container.</p>
/// <p><b>Part of:</b> <code>ContainerAttributes</code></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ContainerPortMapping {
    /// <p>The port opened on the container.</p>
    pub container_port: ::std::option::Option<i32>,
    /// <p>The port opened on the fleet instance. This is also called the "host port".</p>
    pub connection_port: ::std::option::Option<i32>,
    /// <p>The network protocol that this mapping supports.</p>
    pub protocol: ::std::option::Option<crate::types::IpProtocol>,
}
impl ContainerPortMapping {
    /// <p>The port opened on the container.</p>
    pub fn container_port(&self) -> ::std::option::Option<i32> {
        self.container_port
    }
    /// <p>The port opened on the fleet instance. This is also called the "host port".</p>
    pub fn connection_port(&self) -> ::std::option::Option<i32> {
        self.connection_port
    }
    /// <p>The network protocol that this mapping supports.</p>
    pub fn protocol(&self) -> ::std::option::Option<&crate::types::IpProtocol> {
        self.protocol.as_ref()
    }
}
impl ::std::fmt::Debug for ContainerPortMapping {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ContainerPortMapping");
        formatter.field("container_port", &"*** Sensitive Data Redacted ***");
        formatter.field("connection_port", &"*** Sensitive Data Redacted ***");
        formatter.field("protocol", &self.protocol);
        formatter.finish()
    }
}
impl ContainerPortMapping {
    /// Creates a new builder-style object to manufacture [`ContainerPortMapping`](crate::types::ContainerPortMapping).
    pub fn builder() -> crate::types::builders::ContainerPortMappingBuilder {
        crate::types::builders::ContainerPortMappingBuilder::default()
    }
}

/// A builder for [`ContainerPortMapping`](crate::types::ContainerPortMapping).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ContainerPortMappingBuilder {
    pub(crate) container_port: ::std::option::Option<i32>,
    pub(crate) connection_port: ::std::option::Option<i32>,
    pub(crate) protocol: ::std::option::Option<crate::types::IpProtocol>,
}
impl ContainerPortMappingBuilder {
    /// <p>The port opened on the container.</p>
    pub fn container_port(mut self, input: i32) -> Self {
        self.container_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port opened on the container.</p>
    pub fn set_container_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.container_port = input;
        self
    }
    /// <p>The port opened on the container.</p>
    pub fn get_container_port(&self) -> &::std::option::Option<i32> {
        &self.container_port
    }
    /// <p>The port opened on the fleet instance. This is also called the "host port".</p>
    pub fn connection_port(mut self, input: i32) -> Self {
        self.connection_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>The port opened on the fleet instance. This is also called the "host port".</p>
    pub fn set_connection_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.connection_port = input;
        self
    }
    /// <p>The port opened on the fleet instance. This is also called the "host port".</p>
    pub fn get_connection_port(&self) -> &::std::option::Option<i32> {
        &self.connection_port
    }
    /// <p>The network protocol that this mapping supports.</p>
    pub fn protocol(mut self, input: crate::types::IpProtocol) -> Self {
        self.protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>The network protocol that this mapping supports.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<crate::types::IpProtocol>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The network protocol that this mapping supports.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<crate::types::IpProtocol> {
        &self.protocol
    }
    /// Consumes the builder and constructs a [`ContainerPortMapping`](crate::types::ContainerPortMapping).
    pub fn build(self) -> crate::types::ContainerPortMapping {
        crate::types::ContainerPortMapping {
            container_port: self.container_port,
            connection_port: self.connection_port,
            protocol: self.protocol,
        }
    }
}
impl ::std::fmt::Debug for ContainerPortMappingBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ContainerPortMappingBuilder");
        formatter.field("container_port", &"*** Sensitive Data Redacted ***");
        formatter.field("connection_port", &"*** Sensitive Data Redacted ***");
        formatter.field("protocol", &self.protocol);
        formatter.finish()
    }
}
