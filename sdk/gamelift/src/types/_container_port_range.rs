// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p><b>This data type is used with the Amazon GameLift containers feature, which is currently in public preview.</b></p>
/// <p>A set of one or more port numbers that can be opened on the container.</p>
/// <p><b>Part of:</b> <code>ContainerPortConfiguration</code></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ContainerPortRange {
    /// <p>A starting value for the range of allowed port numbers.</p>
    pub from_port: ::std::option::Option<i32>,
    /// <p>An ending value for the range of allowed port numbers. Port numbers are end-inclusive. This value must be equal to or greater than <code>FromPort</code>.</p>
    pub to_port: ::std::option::Option<i32>,
    /// <p>The network protocol that these ports support.</p>
    pub protocol: ::std::option::Option<crate::types::IpProtocol>,
}
impl ContainerPortRange {
    /// <p>A starting value for the range of allowed port numbers.</p>
    pub fn from_port(&self) -> ::std::option::Option<i32> {
        self.from_port
    }
    /// <p>An ending value for the range of allowed port numbers. Port numbers are end-inclusive. This value must be equal to or greater than <code>FromPort</code>.</p>
    pub fn to_port(&self) -> ::std::option::Option<i32> {
        self.to_port
    }
    /// <p>The network protocol that these ports support.</p>
    pub fn protocol(&self) -> ::std::option::Option<&crate::types::IpProtocol> {
        self.protocol.as_ref()
    }
}
impl ::std::fmt::Debug for ContainerPortRange {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ContainerPortRange");
        formatter.field("from_port", &"*** Sensitive Data Redacted ***");
        formatter.field("to_port", &"*** Sensitive Data Redacted ***");
        formatter.field("protocol", &self.protocol);
        formatter.finish()
    }
}
impl ContainerPortRange {
    /// Creates a new builder-style object to manufacture [`ContainerPortRange`](crate::types::ContainerPortRange).
    pub fn builder() -> crate::types::builders::ContainerPortRangeBuilder {
        crate::types::builders::ContainerPortRangeBuilder::default()
    }
}

/// A builder for [`ContainerPortRange`](crate::types::ContainerPortRange).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ContainerPortRangeBuilder {
    pub(crate) from_port: ::std::option::Option<i32>,
    pub(crate) to_port: ::std::option::Option<i32>,
    pub(crate) protocol: ::std::option::Option<crate::types::IpProtocol>,
}
impl ContainerPortRangeBuilder {
    /// <p>A starting value for the range of allowed port numbers.</p>
    /// This field is required.
    pub fn from_port(mut self, input: i32) -> Self {
        self.from_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>A starting value for the range of allowed port numbers.</p>
    pub fn set_from_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.from_port = input;
        self
    }
    /// <p>A starting value for the range of allowed port numbers.</p>
    pub fn get_from_port(&self) -> &::std::option::Option<i32> {
        &self.from_port
    }
    /// <p>An ending value for the range of allowed port numbers. Port numbers are end-inclusive. This value must be equal to or greater than <code>FromPort</code>.</p>
    /// This field is required.
    pub fn to_port(mut self, input: i32) -> Self {
        self.to_port = ::std::option::Option::Some(input);
        self
    }
    /// <p>An ending value for the range of allowed port numbers. Port numbers are end-inclusive. This value must be equal to or greater than <code>FromPort</code>.</p>
    pub fn set_to_port(mut self, input: ::std::option::Option<i32>) -> Self {
        self.to_port = input;
        self
    }
    /// <p>An ending value for the range of allowed port numbers. Port numbers are end-inclusive. This value must be equal to or greater than <code>FromPort</code>.</p>
    pub fn get_to_port(&self) -> &::std::option::Option<i32> {
        &self.to_port
    }
    /// <p>The network protocol that these ports support.</p>
    /// This field is required.
    pub fn protocol(mut self, input: crate::types::IpProtocol) -> Self {
        self.protocol = ::std::option::Option::Some(input);
        self
    }
    /// <p>The network protocol that these ports support.</p>
    pub fn set_protocol(mut self, input: ::std::option::Option<crate::types::IpProtocol>) -> Self {
        self.protocol = input;
        self
    }
    /// <p>The network protocol that these ports support.</p>
    pub fn get_protocol(&self) -> &::std::option::Option<crate::types::IpProtocol> {
        &self.protocol
    }
    /// Consumes the builder and constructs a [`ContainerPortRange`](crate::types::ContainerPortRange).
    pub fn build(self) -> crate::types::ContainerPortRange {
        crate::types::ContainerPortRange {
            from_port: self.from_port,
            to_port: self.to_port,
            protocol: self.protocol,
        }
    }
}
impl ::std::fmt::Debug for ContainerPortRangeBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ContainerPortRangeBuilder");
        formatter.field("from_port", &"*** Sensitive Data Redacted ***");
        formatter.field("to_port", &"*** Sensitive Data Redacted ***");
        formatter.field("protocol", &self.protocol);
        formatter.finish()
    }
}
