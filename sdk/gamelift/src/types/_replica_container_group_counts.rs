// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p><b>This data type is used with the Amazon GameLift containers feature, which is currently in public preview.</b></p>
/// <p>The number and status of replica container groups that are deployed across a fleet with compute type <code>CONTAINER</code>. This information, combined with the number of server processes being hosted per container group (see <code>RuntimeConfiguration</code>), tells you how many game sessions the fleet is currently capable of hosting concurrently.</p>
/// <p><b>Returned by:</b> <code>DescribeFleetCapacity</code>, <code>DescribeFleetLocationCapacity</code></p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ReplicaContainerGroupCounts {
    /// <p>The number of container groups that are starting up but have not yet registered.</p>
    pub pending: ::std::option::Option<i32>,
    /// <p>The number of container groups that have active game sessions.</p>
    pub active: ::std::option::Option<i32>,
    /// <p>The number of container groups that have no active game sessions.</p>
    pub idle: ::std::option::Option<i32>,
    /// <p>The number of container groups that are in the process of shutting down.</p>
    pub terminating: ::std::option::Option<i32>,
}
impl ReplicaContainerGroupCounts {
    /// <p>The number of container groups that are starting up but have not yet registered.</p>
    pub fn pending(&self) -> ::std::option::Option<i32> {
        self.pending
    }
    /// <p>The number of container groups that have active game sessions.</p>
    pub fn active(&self) -> ::std::option::Option<i32> {
        self.active
    }
    /// <p>The number of container groups that have no active game sessions.</p>
    pub fn idle(&self) -> ::std::option::Option<i32> {
        self.idle
    }
    /// <p>The number of container groups that are in the process of shutting down.</p>
    pub fn terminating(&self) -> ::std::option::Option<i32> {
        self.terminating
    }
}
impl ReplicaContainerGroupCounts {
    /// Creates a new builder-style object to manufacture [`ReplicaContainerGroupCounts`](crate::types::ReplicaContainerGroupCounts).
    pub fn builder() -> crate::types::builders::ReplicaContainerGroupCountsBuilder {
        crate::types::builders::ReplicaContainerGroupCountsBuilder::default()
    }
}

/// A builder for [`ReplicaContainerGroupCounts`](crate::types::ReplicaContainerGroupCounts).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ReplicaContainerGroupCountsBuilder {
    pub(crate) pending: ::std::option::Option<i32>,
    pub(crate) active: ::std::option::Option<i32>,
    pub(crate) idle: ::std::option::Option<i32>,
    pub(crate) terminating: ::std::option::Option<i32>,
}
impl ReplicaContainerGroupCountsBuilder {
    /// <p>The number of container groups that are starting up but have not yet registered.</p>
    pub fn pending(mut self, input: i32) -> Self {
        self.pending = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of container groups that are starting up but have not yet registered.</p>
    pub fn set_pending(mut self, input: ::std::option::Option<i32>) -> Self {
        self.pending = input;
        self
    }
    /// <p>The number of container groups that are starting up but have not yet registered.</p>
    pub fn get_pending(&self) -> &::std::option::Option<i32> {
        &self.pending
    }
    /// <p>The number of container groups that have active game sessions.</p>
    pub fn active(mut self, input: i32) -> Self {
        self.active = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of container groups that have active game sessions.</p>
    pub fn set_active(mut self, input: ::std::option::Option<i32>) -> Self {
        self.active = input;
        self
    }
    /// <p>The number of container groups that have active game sessions.</p>
    pub fn get_active(&self) -> &::std::option::Option<i32> {
        &self.active
    }
    /// <p>The number of container groups that have no active game sessions.</p>
    pub fn idle(mut self, input: i32) -> Self {
        self.idle = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of container groups that have no active game sessions.</p>
    pub fn set_idle(mut self, input: ::std::option::Option<i32>) -> Self {
        self.idle = input;
        self
    }
    /// <p>The number of container groups that have no active game sessions.</p>
    pub fn get_idle(&self) -> &::std::option::Option<i32> {
        &self.idle
    }
    /// <p>The number of container groups that are in the process of shutting down.</p>
    pub fn terminating(mut self, input: i32) -> Self {
        self.terminating = ::std::option::Option::Some(input);
        self
    }
    /// <p>The number of container groups that are in the process of shutting down.</p>
    pub fn set_terminating(mut self, input: ::std::option::Option<i32>) -> Self {
        self.terminating = input;
        self
    }
    /// <p>The number of container groups that are in the process of shutting down.</p>
    pub fn get_terminating(&self) -> &::std::option::Option<i32> {
        &self.terminating
    }
    /// Consumes the builder and constructs a [`ReplicaContainerGroupCounts`](crate::types::ReplicaContainerGroupCounts).
    pub fn build(self) -> crate::types::ReplicaContainerGroupCounts {
        crate::types::ReplicaContainerGroupCounts {
            pending: self.pending,
            active: self.active,
            idle: self.idle,
            terminating: self.terminating,
        }
    }
}
