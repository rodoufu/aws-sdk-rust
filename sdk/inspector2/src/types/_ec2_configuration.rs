// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Enables agent-based scanning, which scans instances that are not managed by SSM.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct Ec2Configuration {
    /// <p>The scan method that is applied to the instance.</p>
    pub scan_mode: crate::types::Ec2ScanMode,
}
impl Ec2Configuration {
    /// <p>The scan method that is applied to the instance.</p>
    pub fn scan_mode(&self) -> &crate::types::Ec2ScanMode {
        &self.scan_mode
    }
}
impl Ec2Configuration {
    /// Creates a new builder-style object to manufacture [`Ec2Configuration`](crate::types::Ec2Configuration).
    pub fn builder() -> crate::types::builders::Ec2ConfigurationBuilder {
        crate::types::builders::Ec2ConfigurationBuilder::default()
    }
}

/// A builder for [`Ec2Configuration`](crate::types::Ec2Configuration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct Ec2ConfigurationBuilder {
    pub(crate) scan_mode: ::std::option::Option<crate::types::Ec2ScanMode>,
}
impl Ec2ConfigurationBuilder {
    /// <p>The scan method that is applied to the instance.</p>
    /// This field is required.
    pub fn scan_mode(mut self, input: crate::types::Ec2ScanMode) -> Self {
        self.scan_mode = ::std::option::Option::Some(input);
        self
    }
    /// <p>The scan method that is applied to the instance.</p>
    pub fn set_scan_mode(mut self, input: ::std::option::Option<crate::types::Ec2ScanMode>) -> Self {
        self.scan_mode = input;
        self
    }
    /// <p>The scan method that is applied to the instance.</p>
    pub fn get_scan_mode(&self) -> &::std::option::Option<crate::types::Ec2ScanMode> {
        &self.scan_mode
    }
    /// Consumes the builder and constructs a [`Ec2Configuration`](crate::types::Ec2Configuration).
    /// This method will fail if any of the following fields are not set:
    /// - [`scan_mode`](crate::types::builders::Ec2ConfigurationBuilder::scan_mode)
    pub fn build(self) -> ::std::result::Result<crate::types::Ec2Configuration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::Ec2Configuration {
            scan_mode: self.scan_mode.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "scan_mode",
                    "scan_mode was not specified but it is required when building Ec2Configuration",
                )
            })?,
        })
    }
}
