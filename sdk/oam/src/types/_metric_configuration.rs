// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>This structure contains the <code>Filter</code> parameter which you can use to specify which metric namespaces are to be shared from this source account to the monitoring account.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct MetricConfiguration {
    /// <p>Use this field to specify which metrics are to be shared with the monitoring account. Use the term <code>Namespace</code> and one or more of the following operands. Use single quotation marks (') around namespace names. The matching of namespace names is case sensitive. Each filter has a limit of five conditional operands. Conditional operands are <code>AND</code> and <code>OR</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>=</code> and <code>!=</code></p></li>
    /// <li>
    /// <p><code>AND</code></p></li>
    /// <li>
    /// <p><code>OR</code></p></li>
    /// <li>
    /// <p><code>LIKE</code> and <code>NOT LIKE</code>. These can be used only as prefix searches. Include a <code>%</code> at the end of the string that you want to search for and include.</p></li>
    /// <li>
    /// <p><code>IN</code> and <code>NOT IN</code>, using parentheses <code>( )</code></p></li>
    /// </ul>
    /// <p>Examples:</p>
    /// <ul>
    /// <li>
    /// <p><code>Namespace NOT LIKE 'AWS/%'</code> includes only namespaces that don't start with <code>AWS/</code>, such as custom namespaces.</p></li>
    /// <li>
    /// <p><code>Namespace IN ('AWS/EC2', 'AWS/ELB', 'AWS/S3')</code> includes only the metrics in the EC2, Elastic Load Balancing, and Amazon S3 namespaces.</p></li>
    /// <li>
    /// <p><code>Namespace = 'AWS/EC2' OR Namespace NOT LIKE 'AWS/%'</code> includes only the EC2 namespace and your custom namespaces.</p></li>
    /// </ul><note>
    /// <p>If you are updating a link that uses filters, you can specify <code>*</code> as the only value for the <code>filter</code> parameter to delete the filter and share all metric namespaces with the monitoring account.</p>
    /// </note>
    pub filter: ::std::string::String,
}
impl MetricConfiguration {
    /// <p>Use this field to specify which metrics are to be shared with the monitoring account. Use the term <code>Namespace</code> and one or more of the following operands. Use single quotation marks (') around namespace names. The matching of namespace names is case sensitive. Each filter has a limit of five conditional operands. Conditional operands are <code>AND</code> and <code>OR</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>=</code> and <code>!=</code></p></li>
    /// <li>
    /// <p><code>AND</code></p></li>
    /// <li>
    /// <p><code>OR</code></p></li>
    /// <li>
    /// <p><code>LIKE</code> and <code>NOT LIKE</code>. These can be used only as prefix searches. Include a <code>%</code> at the end of the string that you want to search for and include.</p></li>
    /// <li>
    /// <p><code>IN</code> and <code>NOT IN</code>, using parentheses <code>( )</code></p></li>
    /// </ul>
    /// <p>Examples:</p>
    /// <ul>
    /// <li>
    /// <p><code>Namespace NOT LIKE 'AWS/%'</code> includes only namespaces that don't start with <code>AWS/</code>, such as custom namespaces.</p></li>
    /// <li>
    /// <p><code>Namespace IN ('AWS/EC2', 'AWS/ELB', 'AWS/S3')</code> includes only the metrics in the EC2, Elastic Load Balancing, and Amazon S3 namespaces.</p></li>
    /// <li>
    /// <p><code>Namespace = 'AWS/EC2' OR Namespace NOT LIKE 'AWS/%'</code> includes only the EC2 namespace and your custom namespaces.</p></li>
    /// </ul><note>
    /// <p>If you are updating a link that uses filters, you can specify <code>*</code> as the only value for the <code>filter</code> parameter to delete the filter and share all metric namespaces with the monitoring account.</p>
    /// </note>
    pub fn filter(&self) -> &str {
        use std::ops::Deref;
        self.filter.deref()
    }
}
impl MetricConfiguration {
    /// Creates a new builder-style object to manufacture [`MetricConfiguration`](crate::types::MetricConfiguration).
    pub fn builder() -> crate::types::builders::MetricConfigurationBuilder {
        crate::types::builders::MetricConfigurationBuilder::default()
    }
}

/// A builder for [`MetricConfiguration`](crate::types::MetricConfiguration).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct MetricConfigurationBuilder {
    pub(crate) filter: ::std::option::Option<::std::string::String>,
}
impl MetricConfigurationBuilder {
    /// <p>Use this field to specify which metrics are to be shared with the monitoring account. Use the term <code>Namespace</code> and one or more of the following operands. Use single quotation marks (') around namespace names. The matching of namespace names is case sensitive. Each filter has a limit of five conditional operands. Conditional operands are <code>AND</code> and <code>OR</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>=</code> and <code>!=</code></p></li>
    /// <li>
    /// <p><code>AND</code></p></li>
    /// <li>
    /// <p><code>OR</code></p></li>
    /// <li>
    /// <p><code>LIKE</code> and <code>NOT LIKE</code>. These can be used only as prefix searches. Include a <code>%</code> at the end of the string that you want to search for and include.</p></li>
    /// <li>
    /// <p><code>IN</code> and <code>NOT IN</code>, using parentheses <code>( )</code></p></li>
    /// </ul>
    /// <p>Examples:</p>
    /// <ul>
    /// <li>
    /// <p><code>Namespace NOT LIKE 'AWS/%'</code> includes only namespaces that don't start with <code>AWS/</code>, such as custom namespaces.</p></li>
    /// <li>
    /// <p><code>Namespace IN ('AWS/EC2', 'AWS/ELB', 'AWS/S3')</code> includes only the metrics in the EC2, Elastic Load Balancing, and Amazon S3 namespaces.</p></li>
    /// <li>
    /// <p><code>Namespace = 'AWS/EC2' OR Namespace NOT LIKE 'AWS/%'</code> includes only the EC2 namespace and your custom namespaces.</p></li>
    /// </ul><note>
    /// <p>If you are updating a link that uses filters, you can specify <code>*</code> as the only value for the <code>filter</code> parameter to delete the filter and share all metric namespaces with the monitoring account.</p>
    /// </note>
    /// This field is required.
    pub fn filter(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.filter = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Use this field to specify which metrics are to be shared with the monitoring account. Use the term <code>Namespace</code> and one or more of the following operands. Use single quotation marks (') around namespace names. The matching of namespace names is case sensitive. Each filter has a limit of five conditional operands. Conditional operands are <code>AND</code> and <code>OR</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>=</code> and <code>!=</code></p></li>
    /// <li>
    /// <p><code>AND</code></p></li>
    /// <li>
    /// <p><code>OR</code></p></li>
    /// <li>
    /// <p><code>LIKE</code> and <code>NOT LIKE</code>. These can be used only as prefix searches. Include a <code>%</code> at the end of the string that you want to search for and include.</p></li>
    /// <li>
    /// <p><code>IN</code> and <code>NOT IN</code>, using parentheses <code>( )</code></p></li>
    /// </ul>
    /// <p>Examples:</p>
    /// <ul>
    /// <li>
    /// <p><code>Namespace NOT LIKE 'AWS/%'</code> includes only namespaces that don't start with <code>AWS/</code>, such as custom namespaces.</p></li>
    /// <li>
    /// <p><code>Namespace IN ('AWS/EC2', 'AWS/ELB', 'AWS/S3')</code> includes only the metrics in the EC2, Elastic Load Balancing, and Amazon S3 namespaces.</p></li>
    /// <li>
    /// <p><code>Namespace = 'AWS/EC2' OR Namespace NOT LIKE 'AWS/%'</code> includes only the EC2 namespace and your custom namespaces.</p></li>
    /// </ul><note>
    /// <p>If you are updating a link that uses filters, you can specify <code>*</code> as the only value for the <code>filter</code> parameter to delete the filter and share all metric namespaces with the monitoring account.</p>
    /// </note>
    pub fn set_filter(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.filter = input;
        self
    }
    /// <p>Use this field to specify which metrics are to be shared with the monitoring account. Use the term <code>Namespace</code> and one or more of the following operands. Use single quotation marks (') around namespace names. The matching of namespace names is case sensitive. Each filter has a limit of five conditional operands. Conditional operands are <code>AND</code> and <code>OR</code>.</p>
    /// <ul>
    /// <li>
    /// <p><code>=</code> and <code>!=</code></p></li>
    /// <li>
    /// <p><code>AND</code></p></li>
    /// <li>
    /// <p><code>OR</code></p></li>
    /// <li>
    /// <p><code>LIKE</code> and <code>NOT LIKE</code>. These can be used only as prefix searches. Include a <code>%</code> at the end of the string that you want to search for and include.</p></li>
    /// <li>
    /// <p><code>IN</code> and <code>NOT IN</code>, using parentheses <code>( )</code></p></li>
    /// </ul>
    /// <p>Examples:</p>
    /// <ul>
    /// <li>
    /// <p><code>Namespace NOT LIKE 'AWS/%'</code> includes only namespaces that don't start with <code>AWS/</code>, such as custom namespaces.</p></li>
    /// <li>
    /// <p><code>Namespace IN ('AWS/EC2', 'AWS/ELB', 'AWS/S3')</code> includes only the metrics in the EC2, Elastic Load Balancing, and Amazon S3 namespaces.</p></li>
    /// <li>
    /// <p><code>Namespace = 'AWS/EC2' OR Namespace NOT LIKE 'AWS/%'</code> includes only the EC2 namespace and your custom namespaces.</p></li>
    /// </ul><note>
    /// <p>If you are updating a link that uses filters, you can specify <code>*</code> as the only value for the <code>filter</code> parameter to delete the filter and share all metric namespaces with the monitoring account.</p>
    /// </note>
    pub fn get_filter(&self) -> &::std::option::Option<::std::string::String> {
        &self.filter
    }
    /// Consumes the builder and constructs a [`MetricConfiguration`](crate::types::MetricConfiguration).
    /// This method will fail if any of the following fields are not set:
    /// - [`filter`](crate::types::builders::MetricConfigurationBuilder::filter)
    pub fn build(self) -> ::std::result::Result<crate::types::MetricConfiguration, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::MetricConfiguration {
            filter: self.filter.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "filter",
                    "filter was not specified but it is required when building MetricConfiguration",
                )
            })?,
        })
    }
}
