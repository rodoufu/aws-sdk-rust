// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq)]
pub struct ValidateStateMachineDefinitionInput {
    /// <p>The Amazon States Language definition of the state machine. For more information, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html">Amazon States Language</a> (ASL).</p>
    pub definition: ::std::option::Option<::std::string::String>,
    /// <p>The target type of state machine for this definition. The default is <code>STANDARD</code>.</p>
    pub r#type: ::std::option::Option<crate::types::StateMachineType>,
}
impl ValidateStateMachineDefinitionInput {
    /// <p>The Amazon States Language definition of the state machine. For more information, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html">Amazon States Language</a> (ASL).</p>
    pub fn definition(&self) -> ::std::option::Option<&str> {
        self.definition.as_deref()
    }
    /// <p>The target type of state machine for this definition. The default is <code>STANDARD</code>.</p>
    pub fn r#type(&self) -> ::std::option::Option<&crate::types::StateMachineType> {
        self.r#type.as_ref()
    }
}
impl ::std::fmt::Debug for ValidateStateMachineDefinitionInput {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ValidateStateMachineDefinitionInput");
        formatter.field("definition", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.finish()
    }
}
impl ValidateStateMachineDefinitionInput {
    /// Creates a new builder-style object to manufacture [`ValidateStateMachineDefinitionInput`](crate::operation::validate_state_machine_definition::ValidateStateMachineDefinitionInput).
    pub fn builder() -> crate::operation::validate_state_machine_definition::builders::ValidateStateMachineDefinitionInputBuilder {
        crate::operation::validate_state_machine_definition::builders::ValidateStateMachineDefinitionInputBuilder::default()
    }
}

/// A builder for [`ValidateStateMachineDefinitionInput`](crate::operation::validate_state_machine_definition::ValidateStateMachineDefinitionInput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default)]
pub struct ValidateStateMachineDefinitionInputBuilder {
    pub(crate) definition: ::std::option::Option<::std::string::String>,
    pub(crate) r#type: ::std::option::Option<crate::types::StateMachineType>,
}
impl ValidateStateMachineDefinitionInputBuilder {
    /// <p>The Amazon States Language definition of the state machine. For more information, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html">Amazon States Language</a> (ASL).</p>
    /// This field is required.
    pub fn definition(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.definition = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Amazon States Language definition of the state machine. For more information, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html">Amazon States Language</a> (ASL).</p>
    pub fn set_definition(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.definition = input;
        self
    }
    /// <p>The Amazon States Language definition of the state machine. For more information, see <a href="https://docs.aws.amazon.com/step-functions/latest/dg/concepts-amazon-states-language.html">Amazon States Language</a> (ASL).</p>
    pub fn get_definition(&self) -> &::std::option::Option<::std::string::String> {
        &self.definition
    }
    /// <p>The target type of state machine for this definition. The default is <code>STANDARD</code>.</p>
    pub fn r#type(mut self, input: crate::types::StateMachineType) -> Self {
        self.r#type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The target type of state machine for this definition. The default is <code>STANDARD</code>.</p>
    pub fn set_type(mut self, input: ::std::option::Option<crate::types::StateMachineType>) -> Self {
        self.r#type = input;
        self
    }
    /// <p>The target type of state machine for this definition. The default is <code>STANDARD</code>.</p>
    pub fn get_type(&self) -> &::std::option::Option<crate::types::StateMachineType> {
        &self.r#type
    }
    /// Consumes the builder and constructs a [`ValidateStateMachineDefinitionInput`](crate::operation::validate_state_machine_definition::ValidateStateMachineDefinitionInput).
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::validate_state_machine_definition::ValidateStateMachineDefinitionInput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(crate::operation::validate_state_machine_definition::ValidateStateMachineDefinitionInput {
            definition: self.definition,
            r#type: self.r#type,
        })
    }
}
impl ::std::fmt::Debug for ValidateStateMachineDefinitionInputBuilder {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        let mut formatter = f.debug_struct("ValidateStateMachineDefinitionInputBuilder");
        formatter.field("definition", &"*** Sensitive Data Redacted ***");
        formatter.field("r#type", &self.r#type);
        formatter.finish()
    }
}
