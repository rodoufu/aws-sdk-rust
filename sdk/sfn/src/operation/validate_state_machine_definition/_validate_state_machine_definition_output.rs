// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ValidateStateMachineDefinitionOutput {
    /// <p>The result value will be <code>OK</code> when no syntax errors are found, or <code>FAIL</code> if the workflow definition does not pass verification.</p>
    pub result: crate::types::ValidateStateMachineDefinitionResultCode,
    /// <p>If the result is <code>OK</code>, this field will be empty. When there are errors, this field will contain an array of <b>Diagnostic</b> objects to help you troubleshoot.</p>
    pub diagnostics: ::std::vec::Vec<crate::types::ValidateStateMachineDefinitionDiagnostic>,
    _request_id: Option<String>,
}
impl ValidateStateMachineDefinitionOutput {
    /// <p>The result value will be <code>OK</code> when no syntax errors are found, or <code>FAIL</code> if the workflow definition does not pass verification.</p>
    pub fn result(&self) -> &crate::types::ValidateStateMachineDefinitionResultCode {
        &self.result
    }
    /// <p>If the result is <code>OK</code>, this field will be empty. When there are errors, this field will contain an array of <b>Diagnostic</b> objects to help you troubleshoot.</p>
    pub fn diagnostics(&self) -> &[crate::types::ValidateStateMachineDefinitionDiagnostic] {
        use std::ops::Deref;
        self.diagnostics.deref()
    }
}
impl ::aws_types::request_id::RequestId for ValidateStateMachineDefinitionOutput {
    fn request_id(&self) -> Option<&str> {
        self._request_id.as_deref()
    }
}
impl ValidateStateMachineDefinitionOutput {
    /// Creates a new builder-style object to manufacture [`ValidateStateMachineDefinitionOutput`](crate::operation::validate_state_machine_definition::ValidateStateMachineDefinitionOutput).
    pub fn builder() -> crate::operation::validate_state_machine_definition::builders::ValidateStateMachineDefinitionOutputBuilder {
        crate::operation::validate_state_machine_definition::builders::ValidateStateMachineDefinitionOutputBuilder::default()
    }
}

/// A builder for [`ValidateStateMachineDefinitionOutput`](crate::operation::validate_state_machine_definition::ValidateStateMachineDefinitionOutput).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ValidateStateMachineDefinitionOutputBuilder {
    pub(crate) result: ::std::option::Option<crate::types::ValidateStateMachineDefinitionResultCode>,
    pub(crate) diagnostics: ::std::option::Option<::std::vec::Vec<crate::types::ValidateStateMachineDefinitionDiagnostic>>,
    _request_id: Option<String>,
}
impl ValidateStateMachineDefinitionOutputBuilder {
    /// <p>The result value will be <code>OK</code> when no syntax errors are found, or <code>FAIL</code> if the workflow definition does not pass verification.</p>
    /// This field is required.
    pub fn result(mut self, input: crate::types::ValidateStateMachineDefinitionResultCode) -> Self {
        self.result = ::std::option::Option::Some(input);
        self
    }
    /// <p>The result value will be <code>OK</code> when no syntax errors are found, or <code>FAIL</code> if the workflow definition does not pass verification.</p>
    pub fn set_result(mut self, input: ::std::option::Option<crate::types::ValidateStateMachineDefinitionResultCode>) -> Self {
        self.result = input;
        self
    }
    /// <p>The result value will be <code>OK</code> when no syntax errors are found, or <code>FAIL</code> if the workflow definition does not pass verification.</p>
    pub fn get_result(&self) -> &::std::option::Option<crate::types::ValidateStateMachineDefinitionResultCode> {
        &self.result
    }
    /// Appends an item to `diagnostics`.
    ///
    /// To override the contents of this collection use [`set_diagnostics`](Self::set_diagnostics).
    ///
    /// <p>If the result is <code>OK</code>, this field will be empty. When there are errors, this field will contain an array of <b>Diagnostic</b> objects to help you troubleshoot.</p>
    pub fn diagnostics(mut self, input: crate::types::ValidateStateMachineDefinitionDiagnostic) -> Self {
        let mut v = self.diagnostics.unwrap_or_default();
        v.push(input);
        self.diagnostics = ::std::option::Option::Some(v);
        self
    }
    /// <p>If the result is <code>OK</code>, this field will be empty. When there are errors, this field will contain an array of <b>Diagnostic</b> objects to help you troubleshoot.</p>
    pub fn set_diagnostics(mut self, input: ::std::option::Option<::std::vec::Vec<crate::types::ValidateStateMachineDefinitionDiagnostic>>) -> Self {
        self.diagnostics = input;
        self
    }
    /// <p>If the result is <code>OK</code>, this field will be empty. When there are errors, this field will contain an array of <b>Diagnostic</b> objects to help you troubleshoot.</p>
    pub fn get_diagnostics(&self) -> &::std::option::Option<::std::vec::Vec<crate::types::ValidateStateMachineDefinitionDiagnostic>> {
        &self.diagnostics
    }
    pub(crate) fn _request_id(mut self, request_id: impl Into<String>) -> Self {
        self._request_id = Some(request_id.into());
        self
    }

    pub(crate) fn _set_request_id(&mut self, request_id: Option<String>) -> &mut Self {
        self._request_id = request_id;
        self
    }
    /// Consumes the builder and constructs a [`ValidateStateMachineDefinitionOutput`](crate::operation::validate_state_machine_definition::ValidateStateMachineDefinitionOutput).
    /// This method will fail if any of the following fields are not set:
    /// - [`result`](crate::operation::validate_state_machine_definition::builders::ValidateStateMachineDefinitionOutputBuilder::result)
    /// - [`diagnostics`](crate::operation::validate_state_machine_definition::builders::ValidateStateMachineDefinitionOutputBuilder::diagnostics)
    pub fn build(
        self,
    ) -> ::std::result::Result<
        crate::operation::validate_state_machine_definition::ValidateStateMachineDefinitionOutput,
        ::aws_smithy_types::error::operation::BuildError,
    > {
        ::std::result::Result::Ok(
            crate::operation::validate_state_machine_definition::ValidateStateMachineDefinitionOutput {
                result: self.result.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "result",
                        "result was not specified but it is required when building ValidateStateMachineDefinitionOutput",
                    )
                })?,
                diagnostics: self.diagnostics.ok_or_else(|| {
                    ::aws_smithy_types::error::operation::BuildError::missing_field(
                        "diagnostics",
                        "diagnostics was not specified but it is required when building ValidateStateMachineDefinitionOutput",
                    )
                })?,
                _request_id: self._request_id,
            },
        )
    }
}
