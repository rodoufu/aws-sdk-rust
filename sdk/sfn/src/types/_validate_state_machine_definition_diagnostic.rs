// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes an error found during validation. Validation errors found in the definition return in the response as <b>diagnostic elements</b>, rather than raise an exception.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct ValidateStateMachineDefinitionDiagnostic {
    /// <p>A value of <code>ERROR</code> means that you cannot create or update a state machine with this definition.</p>
    pub severity: crate::types::ValidateStateMachineDefinitionSeverity,
    /// <p>Identifying code for the diagnostic.</p>
    pub code: ::std::string::String,
    /// <p>Message describing the diagnostic condition.</p>
    pub message: ::std::string::String,
    /// <p>Location of the issue in the state machine, if available.</p>
    /// <p>For errors specific to a field, the location could be in the format: <code>/States/<statename>
    /// /
    /// <fieldname></fieldname>
    /// </statename></code>, for example: <code>/States/FailState/ErrorPath</code>.</p>
    pub location: ::std::option::Option<::std::string::String>,
}
impl ValidateStateMachineDefinitionDiagnostic {
    /// <p>A value of <code>ERROR</code> means that you cannot create or update a state machine with this definition.</p>
    pub fn severity(&self) -> &crate::types::ValidateStateMachineDefinitionSeverity {
        &self.severity
    }
    /// <p>Identifying code for the diagnostic.</p>
    pub fn code(&self) -> &str {
        use std::ops::Deref;
        self.code.deref()
    }
    /// <p>Message describing the diagnostic condition.</p>
    pub fn message(&self) -> &str {
        use std::ops::Deref;
        self.message.deref()
    }
    /// <p>Location of the issue in the state machine, if available.</p>
    /// <p>For errors specific to a field, the location could be in the format: <code>/States/<statename>
    /// /
    /// <fieldname></fieldname>
    /// </statename></code>, for example: <code>/States/FailState/ErrorPath</code>.</p>
    pub fn location(&self) -> ::std::option::Option<&str> {
        self.location.as_deref()
    }
}
impl ValidateStateMachineDefinitionDiagnostic {
    /// Creates a new builder-style object to manufacture [`ValidateStateMachineDefinitionDiagnostic`](crate::types::ValidateStateMachineDefinitionDiagnostic).
    pub fn builder() -> crate::types::builders::ValidateStateMachineDefinitionDiagnosticBuilder {
        crate::types::builders::ValidateStateMachineDefinitionDiagnosticBuilder::default()
    }
}

/// A builder for [`ValidateStateMachineDefinitionDiagnostic`](crate::types::ValidateStateMachineDefinitionDiagnostic).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct ValidateStateMachineDefinitionDiagnosticBuilder {
    pub(crate) severity: ::std::option::Option<crate::types::ValidateStateMachineDefinitionSeverity>,
    pub(crate) code: ::std::option::Option<::std::string::String>,
    pub(crate) message: ::std::option::Option<::std::string::String>,
    pub(crate) location: ::std::option::Option<::std::string::String>,
}
impl ValidateStateMachineDefinitionDiagnosticBuilder {
    /// <p>A value of <code>ERROR</code> means that you cannot create or update a state machine with this definition.</p>
    /// This field is required.
    pub fn severity(mut self, input: crate::types::ValidateStateMachineDefinitionSeverity) -> Self {
        self.severity = ::std::option::Option::Some(input);
        self
    }
    /// <p>A value of <code>ERROR</code> means that you cannot create or update a state machine with this definition.</p>
    pub fn set_severity(mut self, input: ::std::option::Option<crate::types::ValidateStateMachineDefinitionSeverity>) -> Self {
        self.severity = input;
        self
    }
    /// <p>A value of <code>ERROR</code> means that you cannot create or update a state machine with this definition.</p>
    pub fn get_severity(&self) -> &::std::option::Option<crate::types::ValidateStateMachineDefinitionSeverity> {
        &self.severity
    }
    /// <p>Identifying code for the diagnostic.</p>
    /// This field is required.
    pub fn code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Identifying code for the diagnostic.</p>
    pub fn set_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.code = input;
        self
    }
    /// <p>Identifying code for the diagnostic.</p>
    pub fn get_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.code
    }
    /// <p>Message describing the diagnostic condition.</p>
    /// This field is required.
    pub fn message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Message describing the diagnostic condition.</p>
    pub fn set_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.message = input;
        self
    }
    /// <p>Message describing the diagnostic condition.</p>
    pub fn get_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.message
    }
    /// <p>Location of the issue in the state machine, if available.</p>
    /// <p>For errors specific to a field, the location could be in the format: <code>/States/<statename>
    /// /
    /// <fieldname></fieldname>
    /// </statename></code>, for example: <code>/States/FailState/ErrorPath</code>.</p>
    pub fn location(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.location = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>Location of the issue in the state machine, if available.</p>
    /// <p>For errors specific to a field, the location could be in the format: <code>/States/<statename>
    /// /
    /// <fieldname></fieldname>
    /// </statename></code>, for example: <code>/States/FailState/ErrorPath</code>.</p>
    pub fn set_location(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.location = input;
        self
    }
    /// <p>Location of the issue in the state machine, if available.</p>
    /// <p>For errors specific to a field, the location could be in the format: <code>/States/<statename>
    /// /
    /// <fieldname></fieldname>
    /// </statename></code>, for example: <code>/States/FailState/ErrorPath</code>.</p>
    pub fn get_location(&self) -> &::std::option::Option<::std::string::String> {
        &self.location
    }
    /// Consumes the builder and constructs a [`ValidateStateMachineDefinitionDiagnostic`](crate::types::ValidateStateMachineDefinitionDiagnostic).
    /// This method will fail if any of the following fields are not set:
    /// - [`severity`](crate::types::builders::ValidateStateMachineDefinitionDiagnosticBuilder::severity)
    /// - [`code`](crate::types::builders::ValidateStateMachineDefinitionDiagnosticBuilder::code)
    /// - [`message`](crate::types::builders::ValidateStateMachineDefinitionDiagnosticBuilder::message)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::ValidateStateMachineDefinitionDiagnostic, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::ValidateStateMachineDefinitionDiagnostic {
            severity: self.severity.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "severity",
                    "severity was not specified but it is required when building ValidateStateMachineDefinitionDiagnostic",
                )
            })?,
            code: self.code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "code",
                    "code was not specified but it is required when building ValidateStateMachineDefinitionDiagnostic",
                )
            })?,
            message: self.message.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "message",
                    "message was not specified but it is required when building ValidateStateMachineDefinitionDiagnostic",
                )
            })?,
            location: self.location,
        })
    }
}
