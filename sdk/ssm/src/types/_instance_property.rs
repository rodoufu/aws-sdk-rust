// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>An object containing various properties of a managed node.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InstanceProperty {
    /// <p>The value of the EC2 <code>Name</code> tag associated with the node. If a <code>Name</code> tag hasn't been applied to the node, this value is blank.</p>
    pub name: ::std::option::Option<::std::string::String>,
    /// <p>The ID of the managed node.</p>
    pub instance_id: ::std::option::Option<::std::string::String>,
    /// <p>The instance type of the managed node. For example, t3.large.</p>
    pub instance_type: ::std::option::Option<::std::string::String>,
    /// <p>The instance profile attached to the node. If an instance profile isn't attached to the node, this value is blank.</p>
    pub instance_role: ::std::option::Option<::std::string::String>,
    /// <p>The name of the key pair associated with the node. If a key pair isnt't associated with the node, this value is blank.</p>
    pub key_name: ::std::option::Option<::std::string::String>,
    /// <p>The current state of the node.</p>
    pub instance_state: ::std::option::Option<::std::string::String>,
    /// <p>The CPU architecture of the node. For example, x86_64.</p>
    pub architecture: ::std::option::Option<::std::string::String>,
    /// <p>The public IPv4 address assigned to the node. If a public IPv4 address isn't assigned to the node, this value is blank.</p>
    pub ip_address: ::std::option::Option<::std::string::String>,
    /// <p>The timestamp for when the node was launched.</p>
    pub launch_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Connection status of the SSM Agent on the managed node.</p>
    pub ping_status: ::std::option::Option<crate::types::PingStatus>,
    /// <p>The date and time when the SSM Agent last pinged the Systems Manager service.</p>
    pub last_ping_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The version of SSM Agent running on your managed node.</p>
    pub agent_version: ::std::option::Option<::std::string::String>,
    /// <p>The operating system platform type of the managed node. For example, Windows.</p>
    pub platform_type: ::std::option::Option<crate::types::PlatformType>,
    /// <p>The name of the operating system platform running on your managed node.</p>
    pub platform_name: ::std::option::Option<::std::string::String>,
    /// <p>The version of the OS platform running on your managed node.</p>
    pub platform_version: ::std::option::Option<::std::string::String>,
    /// <p>The activation ID created by Systems Manager when the server or virtual machine (VM) was registered</p>
    pub activation_id: ::std::option::Option<::std::string::String>,
    /// <p>The IAM role used in the hybrid activation to register the node with Systems Manager.</p>
    pub iam_role: ::std::option::Option<::std::string::String>,
    /// <p>The date the node was registered with Systems Manager.</p>
    pub registration_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The type of managed node.</p>
    pub resource_type: ::std::option::Option<::std::string::String>,
    /// <p>The fully qualified host name of the managed node.</p>
    pub computer_name: ::std::option::Option<::std::string::String>,
    /// <p>The status of the State Manager association applied to the managed node.</p>
    pub association_status: ::std::option::Option<::std::string::String>,
    /// <p>The date the association was last run.</p>
    pub last_association_execution_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>The last date the association was successfully run.</p>
    pub last_successful_association_execution_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    /// <p>Status information about the aggregated associations.</p>
    pub association_overview: ::std::option::Option<crate::types::InstanceAggregatedAssociationOverview>,
    /// <p>The ID of the source resource.</p>
    pub source_id: ::std::option::Option<::std::string::String>,
    /// <p>The type of the source resource.</p>
    pub source_type: ::std::option::Option<crate::types::SourceType>,
}
impl InstanceProperty {
    /// <p>The value of the EC2 <code>Name</code> tag associated with the node. If a <code>Name</code> tag hasn't been applied to the node, this value is blank.</p>
    pub fn name(&self) -> ::std::option::Option<&str> {
        self.name.as_deref()
    }
    /// <p>The ID of the managed node.</p>
    pub fn instance_id(&self) -> ::std::option::Option<&str> {
        self.instance_id.as_deref()
    }
    /// <p>The instance type of the managed node. For example, t3.large.</p>
    pub fn instance_type(&self) -> ::std::option::Option<&str> {
        self.instance_type.as_deref()
    }
    /// <p>The instance profile attached to the node. If an instance profile isn't attached to the node, this value is blank.</p>
    pub fn instance_role(&self) -> ::std::option::Option<&str> {
        self.instance_role.as_deref()
    }
    /// <p>The name of the key pair associated with the node. If a key pair isnt't associated with the node, this value is blank.</p>
    pub fn key_name(&self) -> ::std::option::Option<&str> {
        self.key_name.as_deref()
    }
    /// <p>The current state of the node.</p>
    pub fn instance_state(&self) -> ::std::option::Option<&str> {
        self.instance_state.as_deref()
    }
    /// <p>The CPU architecture of the node. For example, x86_64.</p>
    pub fn architecture(&self) -> ::std::option::Option<&str> {
        self.architecture.as_deref()
    }
    /// <p>The public IPv4 address assigned to the node. If a public IPv4 address isn't assigned to the node, this value is blank.</p>
    pub fn ip_address(&self) -> ::std::option::Option<&str> {
        self.ip_address.as_deref()
    }
    /// <p>The timestamp for when the node was launched.</p>
    pub fn launch_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.launch_time.as_ref()
    }
    /// <p>Connection status of the SSM Agent on the managed node.</p>
    pub fn ping_status(&self) -> ::std::option::Option<&crate::types::PingStatus> {
        self.ping_status.as_ref()
    }
    /// <p>The date and time when the SSM Agent last pinged the Systems Manager service.</p>
    pub fn last_ping_date_time(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_ping_date_time.as_ref()
    }
    /// <p>The version of SSM Agent running on your managed node.</p>
    pub fn agent_version(&self) -> ::std::option::Option<&str> {
        self.agent_version.as_deref()
    }
    /// <p>The operating system platform type of the managed node. For example, Windows.</p>
    pub fn platform_type(&self) -> ::std::option::Option<&crate::types::PlatformType> {
        self.platform_type.as_ref()
    }
    /// <p>The name of the operating system platform running on your managed node.</p>
    pub fn platform_name(&self) -> ::std::option::Option<&str> {
        self.platform_name.as_deref()
    }
    /// <p>The version of the OS platform running on your managed node.</p>
    pub fn platform_version(&self) -> ::std::option::Option<&str> {
        self.platform_version.as_deref()
    }
    /// <p>The activation ID created by Systems Manager when the server or virtual machine (VM) was registered</p>
    pub fn activation_id(&self) -> ::std::option::Option<&str> {
        self.activation_id.as_deref()
    }
    /// <p>The IAM role used in the hybrid activation to register the node with Systems Manager.</p>
    pub fn iam_role(&self) -> ::std::option::Option<&str> {
        self.iam_role.as_deref()
    }
    /// <p>The date the node was registered with Systems Manager.</p>
    pub fn registration_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.registration_date.as_ref()
    }
    /// <p>The type of managed node.</p>
    pub fn resource_type(&self) -> ::std::option::Option<&str> {
        self.resource_type.as_deref()
    }
    /// <p>The fully qualified host name of the managed node.</p>
    pub fn computer_name(&self) -> ::std::option::Option<&str> {
        self.computer_name.as_deref()
    }
    /// <p>The status of the State Manager association applied to the managed node.</p>
    pub fn association_status(&self) -> ::std::option::Option<&str> {
        self.association_status.as_deref()
    }
    /// <p>The date the association was last run.</p>
    pub fn last_association_execution_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_association_execution_date.as_ref()
    }
    /// <p>The last date the association was successfully run.</p>
    pub fn last_successful_association_execution_date(&self) -> ::std::option::Option<&::aws_smithy_types::DateTime> {
        self.last_successful_association_execution_date.as_ref()
    }
    /// <p>Status information about the aggregated associations.</p>
    pub fn association_overview(&self) -> ::std::option::Option<&crate::types::InstanceAggregatedAssociationOverview> {
        self.association_overview.as_ref()
    }
    /// <p>The ID of the source resource.</p>
    pub fn source_id(&self) -> ::std::option::Option<&str> {
        self.source_id.as_deref()
    }
    /// <p>The type of the source resource.</p>
    pub fn source_type(&self) -> ::std::option::Option<&crate::types::SourceType> {
        self.source_type.as_ref()
    }
}
impl InstanceProperty {
    /// Creates a new builder-style object to manufacture [`InstanceProperty`](crate::types::InstanceProperty).
    pub fn builder() -> crate::types::builders::InstancePropertyBuilder {
        crate::types::builders::InstancePropertyBuilder::default()
    }
}

/// A builder for [`InstanceProperty`](crate::types::InstanceProperty).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InstancePropertyBuilder {
    pub(crate) name: ::std::option::Option<::std::string::String>,
    pub(crate) instance_id: ::std::option::Option<::std::string::String>,
    pub(crate) instance_type: ::std::option::Option<::std::string::String>,
    pub(crate) instance_role: ::std::option::Option<::std::string::String>,
    pub(crate) key_name: ::std::option::Option<::std::string::String>,
    pub(crate) instance_state: ::std::option::Option<::std::string::String>,
    pub(crate) architecture: ::std::option::Option<::std::string::String>,
    pub(crate) ip_address: ::std::option::Option<::std::string::String>,
    pub(crate) launch_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) ping_status: ::std::option::Option<crate::types::PingStatus>,
    pub(crate) last_ping_date_time: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) agent_version: ::std::option::Option<::std::string::String>,
    pub(crate) platform_type: ::std::option::Option<crate::types::PlatformType>,
    pub(crate) platform_name: ::std::option::Option<::std::string::String>,
    pub(crate) platform_version: ::std::option::Option<::std::string::String>,
    pub(crate) activation_id: ::std::option::Option<::std::string::String>,
    pub(crate) iam_role: ::std::option::Option<::std::string::String>,
    pub(crate) registration_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) resource_type: ::std::option::Option<::std::string::String>,
    pub(crate) computer_name: ::std::option::Option<::std::string::String>,
    pub(crate) association_status: ::std::option::Option<::std::string::String>,
    pub(crate) last_association_execution_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) last_successful_association_execution_date: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) association_overview: ::std::option::Option<crate::types::InstanceAggregatedAssociationOverview>,
    pub(crate) source_id: ::std::option::Option<::std::string::String>,
    pub(crate) source_type: ::std::option::Option<crate::types::SourceType>,
}
impl InstancePropertyBuilder {
    /// <p>The value of the EC2 <code>Name</code> tag associated with the node. If a <code>Name</code> tag hasn't been applied to the node, this value is blank.</p>
    pub fn name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The value of the EC2 <code>Name</code> tag associated with the node. If a <code>Name</code> tag hasn't been applied to the node, this value is blank.</p>
    pub fn set_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.name = input;
        self
    }
    /// <p>The value of the EC2 <code>Name</code> tag associated with the node. If a <code>Name</code> tag hasn't been applied to the node, this value is blank.</p>
    pub fn get_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.name
    }
    /// <p>The ID of the managed node.</p>
    pub fn instance_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the managed node.</p>
    pub fn set_instance_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_id = input;
        self
    }
    /// <p>The ID of the managed node.</p>
    pub fn get_instance_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_id
    }
    /// <p>The instance type of the managed node. For example, t3.large.</p>
    pub fn instance_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance type of the managed node. For example, t3.large.</p>
    pub fn set_instance_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_type = input;
        self
    }
    /// <p>The instance type of the managed node. For example, t3.large.</p>
    pub fn get_instance_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_type
    }
    /// <p>The instance profile attached to the node. If an instance profile isn't attached to the node, this value is blank.</p>
    pub fn instance_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The instance profile attached to the node. If an instance profile isn't attached to the node, this value is blank.</p>
    pub fn set_instance_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_role = input;
        self
    }
    /// <p>The instance profile attached to the node. If an instance profile isn't attached to the node, this value is blank.</p>
    pub fn get_instance_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_role
    }
    /// <p>The name of the key pair associated with the node. If a key pair isnt't associated with the node, this value is blank.</p>
    pub fn key_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.key_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the key pair associated with the node. If a key pair isnt't associated with the node, this value is blank.</p>
    pub fn set_key_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.key_name = input;
        self
    }
    /// <p>The name of the key pair associated with the node. If a key pair isnt't associated with the node, this value is blank.</p>
    pub fn get_key_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.key_name
    }
    /// <p>The current state of the node.</p>
    pub fn instance_state(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.instance_state = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The current state of the node.</p>
    pub fn set_instance_state(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.instance_state = input;
        self
    }
    /// <p>The current state of the node.</p>
    pub fn get_instance_state(&self) -> &::std::option::Option<::std::string::String> {
        &self.instance_state
    }
    /// <p>The CPU architecture of the node. For example, x86_64.</p>
    pub fn architecture(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.architecture = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The CPU architecture of the node. For example, x86_64.</p>
    pub fn set_architecture(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.architecture = input;
        self
    }
    /// <p>The CPU architecture of the node. For example, x86_64.</p>
    pub fn get_architecture(&self) -> &::std::option::Option<::std::string::String> {
        &self.architecture
    }
    /// <p>The public IPv4 address assigned to the node. If a public IPv4 address isn't assigned to the node, this value is blank.</p>
    pub fn ip_address(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.ip_address = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The public IPv4 address assigned to the node. If a public IPv4 address isn't assigned to the node, this value is blank.</p>
    pub fn set_ip_address(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.ip_address = input;
        self
    }
    /// <p>The public IPv4 address assigned to the node. If a public IPv4 address isn't assigned to the node, this value is blank.</p>
    pub fn get_ip_address(&self) -> &::std::option::Option<::std::string::String> {
        &self.ip_address
    }
    /// <p>The timestamp for when the node was launched.</p>
    pub fn launch_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.launch_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The timestamp for when the node was launched.</p>
    pub fn set_launch_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.launch_time = input;
        self
    }
    /// <p>The timestamp for when the node was launched.</p>
    pub fn get_launch_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.launch_time
    }
    /// <p>Connection status of the SSM Agent on the managed node.</p>
    pub fn ping_status(mut self, input: crate::types::PingStatus) -> Self {
        self.ping_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>Connection status of the SSM Agent on the managed node.</p>
    pub fn set_ping_status(mut self, input: ::std::option::Option<crate::types::PingStatus>) -> Self {
        self.ping_status = input;
        self
    }
    /// <p>Connection status of the SSM Agent on the managed node.</p>
    pub fn get_ping_status(&self) -> &::std::option::Option<crate::types::PingStatus> {
        &self.ping_status
    }
    /// <p>The date and time when the SSM Agent last pinged the Systems Manager service.</p>
    pub fn last_ping_date_time(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_ping_date_time = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date and time when the SSM Agent last pinged the Systems Manager service.</p>
    pub fn set_last_ping_date_time(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_ping_date_time = input;
        self
    }
    /// <p>The date and time when the SSM Agent last pinged the Systems Manager service.</p>
    pub fn get_last_ping_date_time(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_ping_date_time
    }
    /// <p>The version of SSM Agent running on your managed node.</p>
    pub fn agent_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.agent_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of SSM Agent running on your managed node.</p>
    pub fn set_agent_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.agent_version = input;
        self
    }
    /// <p>The version of SSM Agent running on your managed node.</p>
    pub fn get_agent_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.agent_version
    }
    /// <p>The operating system platform type of the managed node. For example, Windows.</p>
    pub fn platform_type(mut self, input: crate::types::PlatformType) -> Self {
        self.platform_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The operating system platform type of the managed node. For example, Windows.</p>
    pub fn set_platform_type(mut self, input: ::std::option::Option<crate::types::PlatformType>) -> Self {
        self.platform_type = input;
        self
    }
    /// <p>The operating system platform type of the managed node. For example, Windows.</p>
    pub fn get_platform_type(&self) -> &::std::option::Option<crate::types::PlatformType> {
        &self.platform_type
    }
    /// <p>The name of the operating system platform running on your managed node.</p>
    pub fn platform_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.platform_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The name of the operating system platform running on your managed node.</p>
    pub fn set_platform_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.platform_name = input;
        self
    }
    /// <p>The name of the operating system platform running on your managed node.</p>
    pub fn get_platform_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.platform_name
    }
    /// <p>The version of the OS platform running on your managed node.</p>
    pub fn platform_version(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.platform_version = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The version of the OS platform running on your managed node.</p>
    pub fn set_platform_version(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.platform_version = input;
        self
    }
    /// <p>The version of the OS platform running on your managed node.</p>
    pub fn get_platform_version(&self) -> &::std::option::Option<::std::string::String> {
        &self.platform_version
    }
    /// <p>The activation ID created by Systems Manager when the server or virtual machine (VM) was registered</p>
    pub fn activation_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.activation_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The activation ID created by Systems Manager when the server or virtual machine (VM) was registered</p>
    pub fn set_activation_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.activation_id = input;
        self
    }
    /// <p>The activation ID created by Systems Manager when the server or virtual machine (VM) was registered</p>
    pub fn get_activation_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.activation_id
    }
    /// <p>The IAM role used in the hybrid activation to register the node with Systems Manager.</p>
    pub fn iam_role(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.iam_role = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The IAM role used in the hybrid activation to register the node with Systems Manager.</p>
    pub fn set_iam_role(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.iam_role = input;
        self
    }
    /// <p>The IAM role used in the hybrid activation to register the node with Systems Manager.</p>
    pub fn get_iam_role(&self) -> &::std::option::Option<::std::string::String> {
        &self.iam_role
    }
    /// <p>The date the node was registered with Systems Manager.</p>
    pub fn registration_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.registration_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the node was registered with Systems Manager.</p>
    pub fn set_registration_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.registration_date = input;
        self
    }
    /// <p>The date the node was registered with Systems Manager.</p>
    pub fn get_registration_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.registration_date
    }
    /// <p>The type of managed node.</p>
    pub fn resource_type(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.resource_type = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The type of managed node.</p>
    pub fn set_resource_type(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.resource_type = input;
        self
    }
    /// <p>The type of managed node.</p>
    pub fn get_resource_type(&self) -> &::std::option::Option<::std::string::String> {
        &self.resource_type
    }
    /// <p>The fully qualified host name of the managed node.</p>
    pub fn computer_name(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.computer_name = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The fully qualified host name of the managed node.</p>
    pub fn set_computer_name(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.computer_name = input;
        self
    }
    /// <p>The fully qualified host name of the managed node.</p>
    pub fn get_computer_name(&self) -> &::std::option::Option<::std::string::String> {
        &self.computer_name
    }
    /// <p>The status of the State Manager association applied to the managed node.</p>
    pub fn association_status(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.association_status = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The status of the State Manager association applied to the managed node.</p>
    pub fn set_association_status(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.association_status = input;
        self
    }
    /// <p>The status of the State Manager association applied to the managed node.</p>
    pub fn get_association_status(&self) -> &::std::option::Option<::std::string::String> {
        &self.association_status
    }
    /// <p>The date the association was last run.</p>
    pub fn last_association_execution_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_association_execution_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The date the association was last run.</p>
    pub fn set_last_association_execution_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_association_execution_date = input;
        self
    }
    /// <p>The date the association was last run.</p>
    pub fn get_last_association_execution_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_association_execution_date
    }
    /// <p>The last date the association was successfully run.</p>
    pub fn last_successful_association_execution_date(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_successful_association_execution_date = ::std::option::Option::Some(input);
        self
    }
    /// <p>The last date the association was successfully run.</p>
    pub fn set_last_successful_association_execution_date(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_successful_association_execution_date = input;
        self
    }
    /// <p>The last date the association was successfully run.</p>
    pub fn get_last_successful_association_execution_date(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_successful_association_execution_date
    }
    /// <p>Status information about the aggregated associations.</p>
    pub fn association_overview(mut self, input: crate::types::InstanceAggregatedAssociationOverview) -> Self {
        self.association_overview = ::std::option::Option::Some(input);
        self
    }
    /// <p>Status information about the aggregated associations.</p>
    pub fn set_association_overview(mut self, input: ::std::option::Option<crate::types::InstanceAggregatedAssociationOverview>) -> Self {
        self.association_overview = input;
        self
    }
    /// <p>Status information about the aggregated associations.</p>
    pub fn get_association_overview(&self) -> &::std::option::Option<crate::types::InstanceAggregatedAssociationOverview> {
        &self.association_overview
    }
    /// <p>The ID of the source resource.</p>
    pub fn source_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.source_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the source resource.</p>
    pub fn set_source_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.source_id = input;
        self
    }
    /// <p>The ID of the source resource.</p>
    pub fn get_source_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.source_id
    }
    /// <p>The type of the source resource.</p>
    pub fn source_type(mut self, input: crate::types::SourceType) -> Self {
        self.source_type = ::std::option::Option::Some(input);
        self
    }
    /// <p>The type of the source resource.</p>
    pub fn set_source_type(mut self, input: ::std::option::Option<crate::types::SourceType>) -> Self {
        self.source_type = input;
        self
    }
    /// <p>The type of the source resource.</p>
    pub fn get_source_type(&self) -> &::std::option::Option<crate::types::SourceType> {
        &self.source_type
    }
    /// Consumes the builder and constructs a [`InstanceProperty`](crate::types::InstanceProperty).
    pub fn build(self) -> crate::types::InstanceProperty {
        crate::types::InstanceProperty {
            name: self.name,
            instance_id: self.instance_id,
            instance_type: self.instance_type,
            instance_role: self.instance_role,
            key_name: self.key_name,
            instance_state: self.instance_state,
            architecture: self.architecture,
            ip_address: self.ip_address,
            launch_time: self.launch_time,
            ping_status: self.ping_status,
            last_ping_date_time: self.last_ping_date_time,
            agent_version: self.agent_version,
            platform_type: self.platform_type,
            platform_name: self.platform_name,
            platform_version: self.platform_version,
            activation_id: self.activation_id,
            iam_role: self.iam_role,
            registration_date: self.registration_date,
            resource_type: self.resource_type,
            computer_name: self.computer_name,
            association_status: self.association_status,
            last_association_execution_date: self.last_association_execution_date,
            last_successful_association_execution_date: self.last_successful_association_execution_date,
            association_overview: self.association_overview,
            source_id: self.source_id,
            source_type: self.source_type,
        }
    }
}
