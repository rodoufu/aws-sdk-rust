// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Describes a filter for a specific list of managed nodes. You can filter node information by using tags. You specify tags by using a key-value mapping.</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct InstancePropertyFilter {
    /// <p>The name of the filter.</p>
    pub key: crate::types::InstancePropertyFilterKey,
    /// <p>The filter values.</p>
    pub value_set: ::std::vec::Vec<::std::string::String>,
}
impl InstancePropertyFilter {
    /// <p>The name of the filter.</p>
    pub fn key(&self) -> &crate::types::InstancePropertyFilterKey {
        &self.key
    }
    /// <p>The filter values.</p>
    pub fn value_set(&self) -> &[::std::string::String] {
        use std::ops::Deref;
        self.value_set.deref()
    }
}
impl InstancePropertyFilter {
    /// Creates a new builder-style object to manufacture [`InstancePropertyFilter`](crate::types::InstancePropertyFilter).
    pub fn builder() -> crate::types::builders::InstancePropertyFilterBuilder {
        crate::types::builders::InstancePropertyFilterBuilder::default()
    }
}

/// A builder for [`InstancePropertyFilter`](crate::types::InstancePropertyFilter).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct InstancePropertyFilterBuilder {
    pub(crate) key: ::std::option::Option<crate::types::InstancePropertyFilterKey>,
    pub(crate) value_set: ::std::option::Option<::std::vec::Vec<::std::string::String>>,
}
impl InstancePropertyFilterBuilder {
    /// <p>The name of the filter.</p>
    /// This field is required.
    pub fn key(mut self, input: crate::types::InstancePropertyFilterKey) -> Self {
        self.key = ::std::option::Option::Some(input);
        self
    }
    /// <p>The name of the filter.</p>
    pub fn set_key(mut self, input: ::std::option::Option<crate::types::InstancePropertyFilterKey>) -> Self {
        self.key = input;
        self
    }
    /// <p>The name of the filter.</p>
    pub fn get_key(&self) -> &::std::option::Option<crate::types::InstancePropertyFilterKey> {
        &self.key
    }
    /// Appends an item to `value_set`.
    ///
    /// To override the contents of this collection use [`set_value_set`](Self::set_value_set).
    ///
    /// <p>The filter values.</p>
    pub fn value_set(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut v = self.value_set.unwrap_or_default();
        v.push(input.into());
        self.value_set = ::std::option::Option::Some(v);
        self
    }
    /// <p>The filter values.</p>
    pub fn set_value_set(mut self, input: ::std::option::Option<::std::vec::Vec<::std::string::String>>) -> Self {
        self.value_set = input;
        self
    }
    /// <p>The filter values.</p>
    pub fn get_value_set(&self) -> &::std::option::Option<::std::vec::Vec<::std::string::String>> {
        &self.value_set
    }
    /// Consumes the builder and constructs a [`InstancePropertyFilter`](crate::types::InstancePropertyFilter).
    /// This method will fail if any of the following fields are not set:
    /// - [`key`](crate::types::builders::InstancePropertyFilterBuilder::key)
    /// - [`value_set`](crate::types::builders::InstancePropertyFilterBuilder::value_set)
    pub fn build(self) -> ::std::result::Result<crate::types::InstancePropertyFilter, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::InstancePropertyFilter {
            key: self.key.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "key",
                    "key was not specified but it is required when building InstancePropertyFilter",
                )
            })?,
            value_set: self.value_set.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "value_set",
                    "value_set was not specified but it is required when building InstancePropertyFilter",
                )
            })?,
        })
    }
}
