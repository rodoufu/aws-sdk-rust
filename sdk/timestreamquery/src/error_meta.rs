// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// All possible error types for this service.
#[non_exhaustive]
#[derive(::std::fmt::Debug)]
pub enum Error {
    /// <p>You are not authorized to perform this action.</p>
    AccessDeniedException(crate::types::error::AccessDeniedException),
    /// <p>Unable to poll results for a cancelled query.</p>
    ConflictException(crate::types::error::ConflictException),
    /// <p>The service was unable to fully process this request because of an internal server error.</p>
    InternalServerException(crate::types::error::InternalServerException),
    /// <p>The requested endpoint was not valid.</p>
    InvalidEndpointException(crate::types::error::InvalidEndpointException),
    /// <p>Timestream was unable to run the query successfully.</p>
    QueryExecutionException(crate::types::error::QueryExecutionException),
    /// <p>The requested resource could not be found.</p>
    ResourceNotFoundException(crate::types::error::ResourceNotFoundException),
    /// <p>You have exceeded the service quota.</p>
    ServiceQuotaExceededException(crate::types::error::ServiceQuotaExceededException),
    /// <p>The request was denied due to request throttling.</p>
    ThrottlingException(crate::types::error::ThrottlingException),
    /// <p>Invalid or malformed request.</p>
    ValidationException(crate::types::error::ValidationException),
    /// An unexpected error occurred (e.g., invalid JSON returned by the service or an unknown error code).
    #[deprecated(note = "Matching `Unhandled` directly is not forwards compatible. Instead, match using a \
    variable wildcard pattern and check `.code()`:
     \
    &nbsp;&nbsp;&nbsp;`err if err.code() == Some(\"SpecificExceptionCode\") => { /* handle the error */ }`
     \
    See [`ProvideErrorMetadata`](#impl-ProvideErrorMetadata-for-Error) for what information is available for the error.")]
    Unhandled(crate::error::sealed_unhandled::Unhandled),
}
impl ::std::fmt::Display for Error {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Error::AccessDeniedException(inner) => inner.fmt(f),
            Error::ConflictException(inner) => inner.fmt(f),
            Error::InternalServerException(inner) => inner.fmt(f),
            Error::InvalidEndpointException(inner) => inner.fmt(f),
            Error::QueryExecutionException(inner) => inner.fmt(f),
            Error::ResourceNotFoundException(inner) => inner.fmt(f),
            Error::ServiceQuotaExceededException(inner) => inner.fmt(f),
            Error::ThrottlingException(inner) => inner.fmt(f),
            Error::ValidationException(inner) => inner.fmt(f),
            Error::Unhandled(_) => {
                if let ::std::option::Option::Some(code) = ::aws_smithy_types::error::metadata::ProvideErrorMetadata::code(self) {
                    write!(f, "unhandled error ({code})")
                } else {
                    f.write_str("unhandled error")
                }
            }
        }
    }
}
impl From<::aws_smithy_types::error::operation::BuildError> for Error {
    fn from(value: ::aws_smithy_types::error::operation::BuildError) -> Self {
        Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
            source: value.into(),
            meta: ::std::default::Default::default(),
        })
    }
}
impl ::aws_smithy_types::error::metadata::ProvideErrorMetadata for Error {
    fn meta(&self) -> &::aws_smithy_types::error::metadata::ErrorMetadata {
        match self {
            Self::AccessDeniedException(inner) => inner.meta(),
            Self::ConflictException(inner) => inner.meta(),
            Self::InternalServerException(inner) => inner.meta(),
            Self::InvalidEndpointException(inner) => inner.meta(),
            Self::QueryExecutionException(inner) => inner.meta(),
            Self::ResourceNotFoundException(inner) => inner.meta(),
            Self::ServiceQuotaExceededException(inner) => inner.meta(),
            Self::ThrottlingException(inner) => inner.meta(),
            Self::ValidationException(inner) => inner.meta(),
            Self::Unhandled(inner) => &inner.meta,
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_query::CancelQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::cancel_query::CancelQueryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::cancel_query::CancelQueryError> for Error {
    fn from(err: crate::operation::cancel_query::CancelQueryError) -> Self {
        match err {
            crate::operation::cancel_query::CancelQueryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::cancel_query::CancelQueryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::cancel_query::CancelQueryError::InvalidEndpointException(inner) => Error::InvalidEndpointException(inner),
            crate::operation::cancel_query::CancelQueryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::cancel_query::CancelQueryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::cancel_query::CancelQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_scheduled_query::CreateScheduledQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::create_scheduled_query::CreateScheduledQueryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::create_scheduled_query::CreateScheduledQueryError> for Error {
    fn from(err: crate::operation::create_scheduled_query::CreateScheduledQueryError) -> Self {
        match err {
            crate::operation::create_scheduled_query::CreateScheduledQueryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::create_scheduled_query::CreateScheduledQueryError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::create_scheduled_query::CreateScheduledQueryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::create_scheduled_query::CreateScheduledQueryError::InvalidEndpointException(inner) => {
                Error::InvalidEndpointException(inner)
            }
            crate::operation::create_scheduled_query::CreateScheduledQueryError::ServiceQuotaExceededException(inner) => {
                Error::ServiceQuotaExceededException(inner)
            }
            crate::operation::create_scheduled_query::CreateScheduledQueryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::create_scheduled_query::CreateScheduledQueryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::create_scheduled_query::CreateScheduledQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_scheduled_query::DeleteScheduledQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::delete_scheduled_query::DeleteScheduledQueryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::delete_scheduled_query::DeleteScheduledQueryError> for Error {
    fn from(err: crate::operation::delete_scheduled_query::DeleteScheduledQueryError) -> Self {
        match err {
            crate::operation::delete_scheduled_query::DeleteScheduledQueryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::delete_scheduled_query::DeleteScheduledQueryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::delete_scheduled_query::DeleteScheduledQueryError::InvalidEndpointException(inner) => {
                Error::InvalidEndpointException(inner)
            }
            crate::operation::delete_scheduled_query::DeleteScheduledQueryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::delete_scheduled_query::DeleteScheduledQueryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::delete_scheduled_query::DeleteScheduledQueryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::delete_scheduled_query::DeleteScheduledQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_account_settings::DescribeAccountSettingsError, R>>
    for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_account_settings::DescribeAccountSettingsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_account_settings::DescribeAccountSettingsError> for Error {
    fn from(err: crate::operation::describe_account_settings::DescribeAccountSettingsError) -> Self {
        match err {
            crate::operation::describe_account_settings::DescribeAccountSettingsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_account_settings::DescribeAccountSettingsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_account_settings::DescribeAccountSettingsError::InvalidEndpointException(inner) => {
                Error::InvalidEndpointException(inner)
            }
            crate::operation::describe_account_settings::DescribeAccountSettingsError::ThrottlingException(inner) => {
                Error::ThrottlingException(inner)
            }
            crate::operation::describe_account_settings::DescribeAccountSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_endpoints::DescribeEndpointsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_endpoints::DescribeEndpointsError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_endpoints::DescribeEndpointsError> for Error {
    fn from(err: crate::operation::describe_endpoints::DescribeEndpointsError) -> Self {
        match err {
            crate::operation::describe_endpoints::DescribeEndpointsError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::describe_endpoints::DescribeEndpointsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_endpoints::DescribeEndpointsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_endpoints::DescribeEndpointsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_scheduled_query::DescribeScheduledQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::describe_scheduled_query::DescribeScheduledQueryError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::describe_scheduled_query::DescribeScheduledQueryError> for Error {
    fn from(err: crate::operation::describe_scheduled_query::DescribeScheduledQueryError) -> Self {
        match err {
            crate::operation::describe_scheduled_query::DescribeScheduledQueryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::describe_scheduled_query::DescribeScheduledQueryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::describe_scheduled_query::DescribeScheduledQueryError::InvalidEndpointException(inner) => {
                Error::InvalidEndpointException(inner)
            }
            crate::operation::describe_scheduled_query::DescribeScheduledQueryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::describe_scheduled_query::DescribeScheduledQueryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::describe_scheduled_query::DescribeScheduledQueryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::describe_scheduled_query::DescribeScheduledQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::execute_scheduled_query::ExecuteScheduledQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::execute_scheduled_query::ExecuteScheduledQueryError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::execute_scheduled_query::ExecuteScheduledQueryError> for Error {
    fn from(err: crate::operation::execute_scheduled_query::ExecuteScheduledQueryError) -> Self {
        match err {
            crate::operation::execute_scheduled_query::ExecuteScheduledQueryError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::execute_scheduled_query::ExecuteScheduledQueryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::execute_scheduled_query::ExecuteScheduledQueryError::InvalidEndpointException(inner) => {
                Error::InvalidEndpointException(inner)
            }
            crate::operation::execute_scheduled_query::ExecuteScheduledQueryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::execute_scheduled_query::ExecuteScheduledQueryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::execute_scheduled_query::ExecuteScheduledQueryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::execute_scheduled_query::ExecuteScheduledQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_scheduled_queries::ListScheduledQueriesError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_scheduled_queries::ListScheduledQueriesError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_scheduled_queries::ListScheduledQueriesError> for Error {
    fn from(err: crate::operation::list_scheduled_queries::ListScheduledQueriesError) -> Self {
        match err {
            crate::operation::list_scheduled_queries::ListScheduledQueriesError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::list_scheduled_queries::ListScheduledQueriesError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::list_scheduled_queries::ListScheduledQueriesError::InvalidEndpointException(inner) => {
                Error::InvalidEndpointException(inner)
            }
            crate::operation::list_scheduled_queries::ListScheduledQueriesError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_scheduled_queries::ListScheduledQueriesError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_scheduled_queries::ListScheduledQueriesError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::list_tags_for_resource::ListTagsForResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::list_tags_for_resource::ListTagsForResourceError> for Error {
    fn from(err: crate::operation::list_tags_for_resource::ListTagsForResourceError) -> Self {
        match err {
            crate::operation::list_tags_for_resource::ListTagsForResourceError::InvalidEndpointException(inner) => {
                Error::InvalidEndpointException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::list_tags_for_resource::ListTagsForResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::prepare_query::PrepareQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::prepare_query::PrepareQueryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::prepare_query::PrepareQueryError> for Error {
    fn from(err: crate::operation::prepare_query::PrepareQueryError) -> Self {
        match err {
            crate::operation::prepare_query::PrepareQueryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::prepare_query::PrepareQueryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::prepare_query::PrepareQueryError::InvalidEndpointException(inner) => Error::InvalidEndpointException(inner),
            crate::operation::prepare_query::PrepareQueryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::prepare_query::PrepareQueryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::prepare_query::PrepareQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::query::QueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::query::QueryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::query::QueryError> for Error {
    fn from(err: crate::operation::query::QueryError) -> Self {
        match err {
            crate::operation::query::QueryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::query::QueryError::ConflictException(inner) => Error::ConflictException(inner),
            crate::operation::query::QueryError::InternalServerException(inner) => Error::InternalServerException(inner),
            crate::operation::query::QueryError::InvalidEndpointException(inner) => Error::InvalidEndpointException(inner),
            crate::operation::query::QueryError::QueryExecutionException(inner) => Error::QueryExecutionException(inner),
            crate::operation::query::QueryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::query::QueryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::query::QueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::tag_resource::TagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::tag_resource::TagResourceError> for Error {
    fn from(err: crate::operation::tag_resource::TagResourceError) -> Self {
        match err {
            crate::operation::tag_resource::TagResourceError::InvalidEndpointException(inner) => Error::InvalidEndpointException(inner),
            crate::operation::tag_resource::TagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::tag_resource::TagResourceError::ServiceQuotaExceededException(inner) => Error::ServiceQuotaExceededException(inner),
            crate::operation::tag_resource::TagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::tag_resource::TagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::tag_resource::TagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::untag_resource::UntagResourceError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::untag_resource::UntagResourceError> for Error {
    fn from(err: crate::operation::untag_resource::UntagResourceError) -> Self {
        match err {
            crate::operation::untag_resource::UntagResourceError::InvalidEndpointException(inner) => Error::InvalidEndpointException(inner),
            crate::operation::untag_resource::UntagResourceError::ResourceNotFoundException(inner) => Error::ResourceNotFoundException(inner),
            crate::operation::untag_resource::UntagResourceError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::untag_resource::UntagResourceError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::untag_resource::UntagResourceError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_account_settings::UpdateAccountSettingsError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(
        err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_account_settings::UpdateAccountSettingsError, R>,
    ) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_account_settings::UpdateAccountSettingsError> for Error {
    fn from(err: crate::operation::update_account_settings::UpdateAccountSettingsError) -> Self {
        match err {
            crate::operation::update_account_settings::UpdateAccountSettingsError::AccessDeniedException(inner) => {
                Error::AccessDeniedException(inner)
            }
            crate::operation::update_account_settings::UpdateAccountSettingsError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_account_settings::UpdateAccountSettingsError::InvalidEndpointException(inner) => {
                Error::InvalidEndpointException(inner)
            }
            crate::operation::update_account_settings::UpdateAccountSettingsError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_account_settings::UpdateAccountSettingsError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_account_settings::UpdateAccountSettingsError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl<R> From<::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_scheduled_query::UpdateScheduledQueryError, R>> for Error
where
    R: Send + Sync + std::fmt::Debug + 'static,
{
    fn from(err: ::aws_smithy_runtime_api::client::result::SdkError<crate::operation::update_scheduled_query::UpdateScheduledQueryError, R>) -> Self {
        match err {
            ::aws_smithy_runtime_api::client::result::SdkError::ServiceError(context) => Self::from(context.into_err()),
            _ => Error::Unhandled(crate::error::sealed_unhandled::Unhandled {
                meta: ::aws_smithy_types::error::metadata::ProvideErrorMetadata::meta(&err).clone(),
                source: err.into(),
            }),
        }
    }
}
impl From<crate::operation::update_scheduled_query::UpdateScheduledQueryError> for Error {
    fn from(err: crate::operation::update_scheduled_query::UpdateScheduledQueryError) -> Self {
        match err {
            crate::operation::update_scheduled_query::UpdateScheduledQueryError::AccessDeniedException(inner) => Error::AccessDeniedException(inner),
            crate::operation::update_scheduled_query::UpdateScheduledQueryError::InternalServerException(inner) => {
                Error::InternalServerException(inner)
            }
            crate::operation::update_scheduled_query::UpdateScheduledQueryError::InvalidEndpointException(inner) => {
                Error::InvalidEndpointException(inner)
            }
            crate::operation::update_scheduled_query::UpdateScheduledQueryError::ResourceNotFoundException(inner) => {
                Error::ResourceNotFoundException(inner)
            }
            crate::operation::update_scheduled_query::UpdateScheduledQueryError::ThrottlingException(inner) => Error::ThrottlingException(inner),
            crate::operation::update_scheduled_query::UpdateScheduledQueryError::ValidationException(inner) => Error::ValidationException(inner),
            crate::operation::update_scheduled_query::UpdateScheduledQueryError::Unhandled(inner) => Error::Unhandled(inner),
        }
    }
}
impl ::std::error::Error for Error {
    fn source(&self) -> std::option::Option<&(dyn ::std::error::Error + 'static)> {
        match self {
            Error::AccessDeniedException(inner) => inner.source(),
            Error::ConflictException(inner) => inner.source(),
            Error::InternalServerException(inner) => inner.source(),
            Error::InvalidEndpointException(inner) => inner.source(),
            Error::QueryExecutionException(inner) => inner.source(),
            Error::ResourceNotFoundException(inner) => inner.source(),
            Error::ServiceQuotaExceededException(inner) => inner.source(),
            Error::ThrottlingException(inner) => inner.source(),
            Error::ValidationException(inner) => inner.source(),
            Error::Unhandled(inner) => ::std::option::Option::Some(&*inner.source),
        }
    }
}
impl ::aws_types::request_id::RequestId for Error {
    fn request_id(&self) -> Option<&str> {
        match self {
            Self::AccessDeniedException(e) => e.request_id(),
            Self::ConflictException(e) => e.request_id(),
            Self::InternalServerException(e) => e.request_id(),
            Self::InvalidEndpointException(e) => e.request_id(),
            Self::QueryExecutionException(e) => e.request_id(),
            Self::ResourceNotFoundException(e) => e.request_id(),
            Self::ServiceQuotaExceededException(e) => e.request_id(),
            Self::ThrottlingException(e) => e.request_id(),
            Self::ValidationException(e) => e.request_id(),
            Self::Unhandled(e) => e.meta.request_id(),
        }
    }
}
