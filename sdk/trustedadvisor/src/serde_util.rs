// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub(crate) fn access_denied_exception_correct_errors(
    mut builder: crate::types::error::builders::AccessDeniedExceptionBuilder,
) -> crate::types::error::builders::AccessDeniedExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn conflict_exception_correct_errors(
    mut builder: crate::types::error::builders::ConflictExceptionBuilder,
) -> crate::types::error::builders::ConflictExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn internal_server_exception_correct_errors(
    mut builder: crate::types::error::builders::InternalServerExceptionBuilder,
) -> crate::types::error::builders::InternalServerExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn throttling_exception_correct_errors(
    mut builder: crate::types::error::builders::ThrottlingExceptionBuilder,
) -> crate::types::error::builders::ThrottlingExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn validation_exception_correct_errors(
    mut builder: crate::types::error::builders::ValidationExceptionBuilder,
) -> crate::types::error::builders::ValidationExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn batch_update_recommendation_resource_exclusion_output_output_correct_errors(
    mut builder: crate::operation::batch_update_recommendation_resource_exclusion::builders::BatchUpdateRecommendationResourceExclusionOutputBuilder,
) -> crate::operation::batch_update_recommendation_resource_exclusion::builders::BatchUpdateRecommendationResourceExclusionOutputBuilder {
    if builder.batch_update_recommendation_resource_exclusion_errors.is_none() {
        builder.batch_update_recommendation_resource_exclusion_errors = Some(Default::default())
    }
    builder
}

pub(crate) fn resource_not_found_exception_correct_errors(
    mut builder: crate::types::error::builders::ResourceNotFoundExceptionBuilder,
) -> crate::types::error::builders::ResourceNotFoundExceptionBuilder {
    if builder.message.is_none() {
        builder.message = Some(Default::default())
    }
    builder
}

pub(crate) fn list_checks_output_output_correct_errors(
    mut builder: crate::operation::list_checks::builders::ListChecksOutputBuilder,
) -> crate::operation::list_checks::builders::ListChecksOutputBuilder {
    if builder.check_summaries.is_none() {
        builder.check_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_organization_recommendation_accounts_output_output_correct_errors(
    mut builder: crate::operation::list_organization_recommendation_accounts::builders::ListOrganizationRecommendationAccountsOutputBuilder,
) -> crate::operation::list_organization_recommendation_accounts::builders::ListOrganizationRecommendationAccountsOutputBuilder {
    if builder.account_recommendation_lifecycle_summaries.is_none() {
        builder.account_recommendation_lifecycle_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_organization_recommendation_resources_output_output_correct_errors(
    mut builder: crate::operation::list_organization_recommendation_resources::builders::ListOrganizationRecommendationResourcesOutputBuilder,
) -> crate::operation::list_organization_recommendation_resources::builders::ListOrganizationRecommendationResourcesOutputBuilder {
    if builder.organization_recommendation_resource_summaries.is_none() {
        builder.organization_recommendation_resource_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_organization_recommendations_output_output_correct_errors(
    mut builder: crate::operation::list_organization_recommendations::builders::ListOrganizationRecommendationsOutputBuilder,
) -> crate::operation::list_organization_recommendations::builders::ListOrganizationRecommendationsOutputBuilder {
    if builder.organization_recommendation_summaries.is_none() {
        builder.organization_recommendation_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_recommendation_resources_output_output_correct_errors(
    mut builder: crate::operation::list_recommendation_resources::builders::ListRecommendationResourcesOutputBuilder,
) -> crate::operation::list_recommendation_resources::builders::ListRecommendationResourcesOutputBuilder {
    if builder.recommendation_resource_summaries.is_none() {
        builder.recommendation_resource_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn list_recommendations_output_output_correct_errors(
    mut builder: crate::operation::list_recommendations::builders::ListRecommendationsOutputBuilder,
) -> crate::operation::list_recommendations::builders::ListRecommendationsOutputBuilder {
    if builder.recommendation_summaries.is_none() {
        builder.recommendation_summaries = Some(Default::default())
    }
    builder
}

pub(crate) fn organization_recommendation_correct_errors(
    mut builder: crate::types::builders::OrganizationRecommendationBuilder,
) -> crate::types::builders::OrganizationRecommendationBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RecommendationType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::RecommendationStatus>().ok()
    }
    if builder.pillars.is_none() {
        builder.pillars = Some(Default::default())
    }
    if builder.source.is_none() {
        builder.source = "no value was set".parse::<crate::types::RecommendationSource>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.resources_aggregates.is_none() {
        builder.resources_aggregates = {
            let builder = crate::types::builders::RecommendationResourcesAggregatesBuilder::default();
            crate::serde_util::recommendation_resources_aggregates_correct_errors(builder)
                .build()
                .ok()
        }
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    builder
}

pub(crate) fn recommendation_correct_errors(
    mut builder: crate::types::builders::RecommendationBuilder,
) -> crate::types::builders::RecommendationBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RecommendationType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::RecommendationStatus>().ok()
    }
    if builder.pillars.is_none() {
        builder.pillars = Some(Default::default())
    }
    if builder.source.is_none() {
        builder.source = "no value was set".parse::<crate::types::RecommendationSource>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.resources_aggregates.is_none() {
        builder.resources_aggregates = {
            let builder = crate::types::builders::RecommendationResourcesAggregatesBuilder::default();
            crate::serde_util::recommendation_resources_aggregates_correct_errors(builder)
                .build()
                .ok()
        }
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    builder
}

pub(crate) fn check_summary_correct_errors(mut builder: crate::types::builders::CheckSummaryBuilder) -> crate::types::builders::CheckSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.description.is_none() {
        builder.description = Some(Default::default())
    }
    if builder.pillars.is_none() {
        builder.pillars = Some(Default::default())
    }
    if builder.aws_services.is_none() {
        builder.aws_services = Some(Default::default())
    }
    if builder.source.is_none() {
        builder.source = "no value was set".parse::<crate::types::RecommendationSource>().ok()
    }
    if builder.metadata.is_none() {
        builder.metadata = Some(Default::default())
    }
    builder
}

pub(crate) fn organization_recommendation_resource_summary_correct_errors(
    mut builder: crate::types::builders::OrganizationRecommendationResourceSummaryBuilder,
) -> crate::types::builders::OrganizationRecommendationResourceSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.aws_resource_id.is_none() {
        builder.aws_resource_id = Some(Default::default())
    }
    if builder.region_code.is_none() {
        builder.region_code = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ResourceStatus>().ok()
    }
    if builder.metadata.is_none() {
        builder.metadata = Some(Default::default())
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.recommendation_arn.is_none() {
        builder.recommendation_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn organization_recommendation_summary_correct_errors(
    mut builder: crate::types::builders::OrganizationRecommendationSummaryBuilder,
) -> crate::types::builders::OrganizationRecommendationSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RecommendationType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::RecommendationStatus>().ok()
    }
    if builder.pillars.is_none() {
        builder.pillars = Some(Default::default())
    }
    if builder.source.is_none() {
        builder.source = "no value was set".parse::<crate::types::RecommendationSource>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.resources_aggregates.is_none() {
        builder.resources_aggregates = {
            let builder = crate::types::builders::RecommendationResourcesAggregatesBuilder::default();
            crate::serde_util::recommendation_resources_aggregates_correct_errors(builder)
                .build()
                .ok()
        }
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn recommendation_resource_summary_correct_errors(
    mut builder: crate::types::builders::RecommendationResourceSummaryBuilder,
) -> crate::types::builders::RecommendationResourceSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    if builder.aws_resource_id.is_none() {
        builder.aws_resource_id = Some(Default::default())
    }
    if builder.region_code.is_none() {
        builder.region_code = Some(Default::default())
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::ResourceStatus>().ok()
    }
    if builder.metadata.is_none() {
        builder.metadata = Some(Default::default())
    }
    if builder.last_updated_at.is_none() {
        builder.last_updated_at = Some(::aws_smithy_types::DateTime::from_fractional_secs(0, 0_f64))
    }
    if builder.recommendation_arn.is_none() {
        builder.recommendation_arn = Some(Default::default())
    }
    builder
}

pub(crate) fn recommendation_resources_aggregates_correct_errors(
    mut builder: crate::types::builders::RecommendationResourcesAggregatesBuilder,
) -> crate::types::builders::RecommendationResourcesAggregatesBuilder {
    if builder.ok_count.is_none() {
        builder.ok_count = Some(Default::default())
    }
    if builder.warning_count.is_none() {
        builder.warning_count = Some(Default::default())
    }
    if builder.error_count.is_none() {
        builder.error_count = Some(Default::default())
    }
    builder
}

pub(crate) fn recommendation_summary_correct_errors(
    mut builder: crate::types::builders::RecommendationSummaryBuilder,
) -> crate::types::builders::RecommendationSummaryBuilder {
    if builder.id.is_none() {
        builder.id = Some(Default::default())
    }
    if builder.r#type.is_none() {
        builder.r#type = "no value was set".parse::<crate::types::RecommendationType>().ok()
    }
    if builder.status.is_none() {
        builder.status = "no value was set".parse::<crate::types::RecommendationStatus>().ok()
    }
    if builder.pillars.is_none() {
        builder.pillars = Some(Default::default())
    }
    if builder.source.is_none() {
        builder.source = "no value was set".parse::<crate::types::RecommendationSource>().ok()
    }
    if builder.name.is_none() {
        builder.name = Some(Default::default())
    }
    if builder.resources_aggregates.is_none() {
        builder.resources_aggregates = {
            let builder = crate::types::builders::RecommendationResourcesAggregatesBuilder::default();
            crate::serde_util::recommendation_resources_aggregates_correct_errors(builder)
                .build()
                .ok()
        }
    }
    if builder.arn.is_none() {
        builder.arn = Some(Default::default())
    }
    builder
}

pub(crate) fn recommendation_cost_optimizing_aggregates_correct_errors(
    mut builder: crate::types::builders::RecommendationCostOptimizingAggregatesBuilder,
) -> crate::types::builders::RecommendationCostOptimizingAggregatesBuilder {
    if builder.estimated_monthly_savings.is_none() {
        builder.estimated_monthly_savings = Some(Default::default())
    }
    if builder.estimated_percent_monthly_savings.is_none() {
        builder.estimated_percent_monthly_savings = Some(Default::default())
    }
    builder
}
