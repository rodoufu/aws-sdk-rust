// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>Organization Recommendation Resource Summary</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct OrganizationRecommendationResourceSummary {
    /// <p>The ID of the Recommendation Resource</p>
    pub id: ::std::string::String,
    /// <p>The ARN of the Recommendation Resource</p>
    pub arn: ::std::string::String,
    /// <p>The AWS resource identifier</p>
    pub aws_resource_id: ::std::string::String,
    /// <p>The AWS Region code that the Recommendation Resource is in</p>
    pub region_code: ::std::string::String,
    /// <p>The current status of the Recommendation Resource</p>
    pub status: crate::types::ResourceStatus,
    /// <p>Metadata associated with the Recommendation Resource</p>
    pub metadata: ::std::collections::HashMap<::std::string::String, ::std::string::String>,
    /// <p>When the Recommendation Resource was last updated</p>
    pub last_updated_at: ::aws_smithy_types::DateTime,
    /// <p>The exclusion status of the Recommendation Resource</p>
    pub exclusion_status: crate::types::ExclusionStatus,
    /// <p>The AWS account ID</p>
    pub account_id: ::std::option::Option<::std::string::String>,
    /// <p>The Recommendation ARN</p>
    pub recommendation_arn: ::std::string::String,
}
impl OrganizationRecommendationResourceSummary {
    /// <p>The ID of the Recommendation Resource</p>
    pub fn id(&self) -> &str {
        use std::ops::Deref;
        self.id.deref()
    }
    /// <p>The ARN of the Recommendation Resource</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The AWS resource identifier</p>
    pub fn aws_resource_id(&self) -> &str {
        use std::ops::Deref;
        self.aws_resource_id.deref()
    }
    /// <p>The AWS Region code that the Recommendation Resource is in</p>
    pub fn region_code(&self) -> &str {
        use std::ops::Deref;
        self.region_code.deref()
    }
    /// <p>The current status of the Recommendation Resource</p>
    pub fn status(&self) -> &crate::types::ResourceStatus {
        &self.status
    }
    /// <p>Metadata associated with the Recommendation Resource</p>
    pub fn metadata(&self) -> &::std::collections::HashMap<::std::string::String, ::std::string::String> {
        &self.metadata
    }
    /// <p>When the Recommendation Resource was last updated</p>
    pub fn last_updated_at(&self) -> &::aws_smithy_types::DateTime {
        &self.last_updated_at
    }
    /// <p>The exclusion status of the Recommendation Resource</p>
    pub fn exclusion_status(&self) -> &crate::types::ExclusionStatus {
        &self.exclusion_status
    }
    /// <p>The AWS account ID</p>
    pub fn account_id(&self) -> ::std::option::Option<&str> {
        self.account_id.as_deref()
    }
    /// <p>The Recommendation ARN</p>
    pub fn recommendation_arn(&self) -> &str {
        use std::ops::Deref;
        self.recommendation_arn.deref()
    }
}
impl OrganizationRecommendationResourceSummary {
    /// Creates a new builder-style object to manufacture [`OrganizationRecommendationResourceSummary`](crate::types::OrganizationRecommendationResourceSummary).
    pub fn builder() -> crate::types::builders::OrganizationRecommendationResourceSummaryBuilder {
        crate::types::builders::OrganizationRecommendationResourceSummaryBuilder::default()
    }
}

/// A builder for [`OrganizationRecommendationResourceSummary`](crate::types::OrganizationRecommendationResourceSummary).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct OrganizationRecommendationResourceSummaryBuilder {
    pub(crate) id: ::std::option::Option<::std::string::String>,
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) aws_resource_id: ::std::option::Option<::std::string::String>,
    pub(crate) region_code: ::std::option::Option<::std::string::String>,
    pub(crate) status: ::std::option::Option<crate::types::ResourceStatus>,
    pub(crate) metadata: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>,
    pub(crate) last_updated_at: ::std::option::Option<::aws_smithy_types::DateTime>,
    pub(crate) exclusion_status: ::std::option::Option<crate::types::ExclusionStatus>,
    pub(crate) account_id: ::std::option::Option<::std::string::String>,
    pub(crate) recommendation_arn: ::std::option::Option<::std::string::String>,
}
impl OrganizationRecommendationResourceSummaryBuilder {
    /// <p>The ID of the Recommendation Resource</p>
    /// This field is required.
    pub fn id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ID of the Recommendation Resource</p>
    pub fn set_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.id = input;
        self
    }
    /// <p>The ID of the Recommendation Resource</p>
    pub fn get_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.id
    }
    /// <p>The ARN of the Recommendation Resource</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Recommendation Resource</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the Recommendation Resource</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The AWS resource identifier</p>
    /// This field is required.
    pub fn aws_resource_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.aws_resource_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS resource identifier</p>
    pub fn set_aws_resource_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.aws_resource_id = input;
        self
    }
    /// <p>The AWS resource identifier</p>
    pub fn get_aws_resource_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.aws_resource_id
    }
    /// <p>The AWS Region code that the Recommendation Resource is in</p>
    /// This field is required.
    pub fn region_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.region_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS Region code that the Recommendation Resource is in</p>
    pub fn set_region_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.region_code = input;
        self
    }
    /// <p>The AWS Region code that the Recommendation Resource is in</p>
    pub fn get_region_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.region_code
    }
    /// <p>The current status of the Recommendation Resource</p>
    /// This field is required.
    pub fn status(mut self, input: crate::types::ResourceStatus) -> Self {
        self.status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The current status of the Recommendation Resource</p>
    pub fn set_status(mut self, input: ::std::option::Option<crate::types::ResourceStatus>) -> Self {
        self.status = input;
        self
    }
    /// <p>The current status of the Recommendation Resource</p>
    pub fn get_status(&self) -> &::std::option::Option<crate::types::ResourceStatus> {
        &self.status
    }
    /// Adds a key-value pair to `metadata`.
    ///
    /// To override the contents of this collection use [`set_metadata`](Self::set_metadata).
    ///
    /// <p>Metadata associated with the Recommendation Resource</p>
    pub fn metadata(mut self, k: impl ::std::convert::Into<::std::string::String>, v: impl ::std::convert::Into<::std::string::String>) -> Self {
        let mut hash_map = self.metadata.unwrap_or_default();
        hash_map.insert(k.into(), v.into());
        self.metadata = ::std::option::Option::Some(hash_map);
        self
    }
    /// <p>Metadata associated with the Recommendation Resource</p>
    pub fn set_metadata(mut self, input: ::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>>) -> Self {
        self.metadata = input;
        self
    }
    /// <p>Metadata associated with the Recommendation Resource</p>
    pub fn get_metadata(&self) -> &::std::option::Option<::std::collections::HashMap<::std::string::String, ::std::string::String>> {
        &self.metadata
    }
    /// <p>When the Recommendation Resource was last updated</p>
    /// This field is required.
    pub fn last_updated_at(mut self, input: ::aws_smithy_types::DateTime) -> Self {
        self.last_updated_at = ::std::option::Option::Some(input);
        self
    }
    /// <p>When the Recommendation Resource was last updated</p>
    pub fn set_last_updated_at(mut self, input: ::std::option::Option<::aws_smithy_types::DateTime>) -> Self {
        self.last_updated_at = input;
        self
    }
    /// <p>When the Recommendation Resource was last updated</p>
    pub fn get_last_updated_at(&self) -> &::std::option::Option<::aws_smithy_types::DateTime> {
        &self.last_updated_at
    }
    /// <p>The exclusion status of the Recommendation Resource</p>
    pub fn exclusion_status(mut self, input: crate::types::ExclusionStatus) -> Self {
        self.exclusion_status = ::std::option::Option::Some(input);
        self
    }
    /// <p>The exclusion status of the Recommendation Resource</p>
    pub fn set_exclusion_status(mut self, input: ::std::option::Option<crate::types::ExclusionStatus>) -> Self {
        self.exclusion_status = input;
        self
    }
    /// <p>The exclusion status of the Recommendation Resource</p>
    pub fn get_exclusion_status(&self) -> &::std::option::Option<crate::types::ExclusionStatus> {
        &self.exclusion_status
    }
    /// <p>The AWS account ID</p>
    pub fn account_id(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.account_id = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The AWS account ID</p>
    pub fn set_account_id(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.account_id = input;
        self
    }
    /// <p>The AWS account ID</p>
    pub fn get_account_id(&self) -> &::std::option::Option<::std::string::String> {
        &self.account_id
    }
    /// <p>The Recommendation ARN</p>
    /// This field is required.
    pub fn recommendation_arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.recommendation_arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The Recommendation ARN</p>
    pub fn set_recommendation_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.recommendation_arn = input;
        self
    }
    /// <p>The Recommendation ARN</p>
    pub fn get_recommendation_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.recommendation_arn
    }
    /// Consumes the builder and constructs a [`OrganizationRecommendationResourceSummary`](crate::types::OrganizationRecommendationResourceSummary).
    /// This method will fail if any of the following fields are not set:
    /// - [`id`](crate::types::builders::OrganizationRecommendationResourceSummaryBuilder::id)
    /// - [`arn`](crate::types::builders::OrganizationRecommendationResourceSummaryBuilder::arn)
    /// - [`aws_resource_id`](crate::types::builders::OrganizationRecommendationResourceSummaryBuilder::aws_resource_id)
    /// - [`region_code`](crate::types::builders::OrganizationRecommendationResourceSummaryBuilder::region_code)
    /// - [`status`](crate::types::builders::OrganizationRecommendationResourceSummaryBuilder::status)
    /// - [`metadata`](crate::types::builders::OrganizationRecommendationResourceSummaryBuilder::metadata)
    /// - [`last_updated_at`](crate::types::builders::OrganizationRecommendationResourceSummaryBuilder::last_updated_at)
    /// - [`recommendation_arn`](crate::types::builders::OrganizationRecommendationResourceSummaryBuilder::recommendation_arn)
    pub fn build(
        self,
    ) -> ::std::result::Result<crate::types::OrganizationRecommendationResourceSummary, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::OrganizationRecommendationResourceSummary {
            id: self.id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "id",
                    "id was not specified but it is required when building OrganizationRecommendationResourceSummary",
                )
            })?,
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building OrganizationRecommendationResourceSummary",
                )
            })?,
            aws_resource_id: self.aws_resource_id.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "aws_resource_id",
                    "aws_resource_id was not specified but it is required when building OrganizationRecommendationResourceSummary",
                )
            })?,
            region_code: self.region_code.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "region_code",
                    "region_code was not specified but it is required when building OrganizationRecommendationResourceSummary",
                )
            })?,
            status: self.status.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "status",
                    "status was not specified but it is required when building OrganizationRecommendationResourceSummary",
                )
            })?,
            metadata: self.metadata.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "metadata",
                    "metadata was not specified but it is required when building OrganizationRecommendationResourceSummary",
                )
            })?,
            last_updated_at: self.last_updated_at.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "last_updated_at",
                    "last_updated_at was not specified but it is required when building OrganizationRecommendationResourceSummary",
                )
            })?,
            exclusion_status: self.exclusion_status.unwrap_or(
                "included"
                    .parse::<crate::types::ExclusionStatus>()
                    .expect("static value validated to member"),
            ),
            account_id: self.account_id,
            recommendation_arn: self.recommendation_arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "recommendation_arn",
                    "recommendation_arn was not specified but it is required when building OrganizationRecommendationResourceSummary",
                )
            })?,
        })
    }
}
