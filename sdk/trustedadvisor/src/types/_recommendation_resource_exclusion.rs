// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The request entry for Recommendation Resource exclusion. Each entry is a combination of Recommendation Resource ARN and corresponding exclusion status</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct RecommendationResourceExclusion {
    /// <p>The ARN of the Recommendation Resource</p>
    pub arn: ::std::string::String,
    /// <p>The exclusion status</p>
    pub is_excluded: bool,
}
impl RecommendationResourceExclusion {
    /// <p>The ARN of the Recommendation Resource</p>
    pub fn arn(&self) -> &str {
        use std::ops::Deref;
        self.arn.deref()
    }
    /// <p>The exclusion status</p>
    pub fn is_excluded(&self) -> bool {
        self.is_excluded
    }
}
impl RecommendationResourceExclusion {
    /// Creates a new builder-style object to manufacture [`RecommendationResourceExclusion`](crate::types::RecommendationResourceExclusion).
    pub fn builder() -> crate::types::builders::RecommendationResourceExclusionBuilder {
        crate::types::builders::RecommendationResourceExclusionBuilder::default()
    }
}

/// A builder for [`RecommendationResourceExclusion`](crate::types::RecommendationResourceExclusion).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct RecommendationResourceExclusionBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) is_excluded: ::std::option::Option<bool>,
}
impl RecommendationResourceExclusionBuilder {
    /// <p>The ARN of the Recommendation Resource</p>
    /// This field is required.
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Recommendation Resource</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the Recommendation Resource</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The exclusion status</p>
    /// This field is required.
    pub fn is_excluded(mut self, input: bool) -> Self {
        self.is_excluded = ::std::option::Option::Some(input);
        self
    }
    /// <p>The exclusion status</p>
    pub fn set_is_excluded(mut self, input: ::std::option::Option<bool>) -> Self {
        self.is_excluded = input;
        self
    }
    /// <p>The exclusion status</p>
    pub fn get_is_excluded(&self) -> &::std::option::Option<bool> {
        &self.is_excluded
    }
    /// Consumes the builder and constructs a [`RecommendationResourceExclusion`](crate::types::RecommendationResourceExclusion).
    /// This method will fail if any of the following fields are not set:
    /// - [`arn`](crate::types::builders::RecommendationResourceExclusionBuilder::arn)
    /// - [`is_excluded`](crate::types::builders::RecommendationResourceExclusionBuilder::is_excluded)
    pub fn build(self) -> ::std::result::Result<crate::types::RecommendationResourceExclusion, ::aws_smithy_types::error::operation::BuildError> {
        ::std::result::Result::Ok(crate::types::RecommendationResourceExclusion {
            arn: self.arn.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "arn",
                    "arn was not specified but it is required when building RecommendationResourceExclusion",
                )
            })?,
            is_excluded: self.is_excluded.ok_or_else(|| {
                ::aws_smithy_types::error::operation::BuildError::missing_field(
                    "is_excluded",
                    "is_excluded was not specified but it is required when building RecommendationResourceExclusion",
                )
            })?,
        })
    }
}
