// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.

/// <p>The error entry for Recommendation Resource exclusion. Each entry is a combination of Recommendation Resource ARN, error code and error message</p>
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::fmt::Debug)]
pub struct UpdateRecommendationResourceExclusionError {
    /// <p>The ARN of the Recommendation Resource</p>
    pub arn: ::std::option::Option<::std::string::String>,
    /// <p>The error code</p>
    pub error_code: ::std::option::Option<::std::string::String>,
    /// <p>The error message</p>
    pub error_message: ::std::option::Option<::std::string::String>,
}
impl UpdateRecommendationResourceExclusionError {
    /// <p>The ARN of the Recommendation Resource</p>
    pub fn arn(&self) -> ::std::option::Option<&str> {
        self.arn.as_deref()
    }
    /// <p>The error code</p>
    pub fn error_code(&self) -> ::std::option::Option<&str> {
        self.error_code.as_deref()
    }
    /// <p>The error message</p>
    pub fn error_message(&self) -> ::std::option::Option<&str> {
        self.error_message.as_deref()
    }
}
impl UpdateRecommendationResourceExclusionError {
    /// Creates a new builder-style object to manufacture [`UpdateRecommendationResourceExclusionError`](crate::types::UpdateRecommendationResourceExclusionError).
    pub fn builder() -> crate::types::builders::UpdateRecommendationResourceExclusionErrorBuilder {
        crate::types::builders::UpdateRecommendationResourceExclusionErrorBuilder::default()
    }
}

/// A builder for [`UpdateRecommendationResourceExclusionError`](crate::types::UpdateRecommendationResourceExclusionError).
#[non_exhaustive]
#[derive(::std::clone::Clone, ::std::cmp::PartialEq, ::std::default::Default, ::std::fmt::Debug)]
pub struct UpdateRecommendationResourceExclusionErrorBuilder {
    pub(crate) arn: ::std::option::Option<::std::string::String>,
    pub(crate) error_code: ::std::option::Option<::std::string::String>,
    pub(crate) error_message: ::std::option::Option<::std::string::String>,
}
impl UpdateRecommendationResourceExclusionErrorBuilder {
    /// <p>The ARN of the Recommendation Resource</p>
    pub fn arn(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.arn = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The ARN of the Recommendation Resource</p>
    pub fn set_arn(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.arn = input;
        self
    }
    /// <p>The ARN of the Recommendation Resource</p>
    pub fn get_arn(&self) -> &::std::option::Option<::std::string::String> {
        &self.arn
    }
    /// <p>The error code</p>
    pub fn error_code(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_code = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error code</p>
    pub fn set_error_code(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_code = input;
        self
    }
    /// <p>The error code</p>
    pub fn get_error_code(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_code
    }
    /// <p>The error message</p>
    pub fn error_message(mut self, input: impl ::std::convert::Into<::std::string::String>) -> Self {
        self.error_message = ::std::option::Option::Some(input.into());
        self
    }
    /// <p>The error message</p>
    pub fn set_error_message(mut self, input: ::std::option::Option<::std::string::String>) -> Self {
        self.error_message = input;
        self
    }
    /// <p>The error message</p>
    pub fn get_error_message(&self) -> &::std::option::Option<::std::string::String> {
        &self.error_message
    }
    /// Consumes the builder and constructs a [`UpdateRecommendationResourceExclusionError`](crate::types::UpdateRecommendationResourceExclusionError).
    pub fn build(self) -> crate::types::UpdateRecommendationResourceExclusionError {
        crate::types::UpdateRecommendationResourceExclusionError {
            arn: self.arn,
            error_code: self.error_code,
            error_message: self.error_message,
        }
    }
}
